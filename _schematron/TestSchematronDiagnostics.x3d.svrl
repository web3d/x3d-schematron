<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                        xmlns:schold="http://www.ascc.net/xml/schematron"
                        xmlns:iso="http://purl.oclc.org/dsdl/schematron"
                        xmlns:xhtml="http://www.w3.org/1999/xhtml"
                        xmlns:xs="http://www.w3.org/2001/XMLSchema"
                        title="X3D Graphics Validity Checks using Schematron"
                        schemaVersion=""><!--   
		   
		   
		 -->
   <svrl:active-pattern document="file:/C:/x3d-code/www.web3d.org/x3d/tools/schematron/TestSchematronDiagnostics.x3d"/>
   <svrl:fired-rule context="X3D | *[(upper-case(local-name()) = 'X3D')]"/>
   <svrl:fired-rule context="head | *[(lower-case(local-name()) = 'head')]"/>
   <svrl:successful-report test="(meta[@name='title'][starts-with(lower-case(@content),'test') or ends-with(lower-case(@content),'test.x3d')]) or (meta[(@name='error') or (@name='warning') or (@name='hint') or (@name='info') or (@name='TODO')][starts-with(lower-case(@content),'test')])"
                           role="diagnostic"
                           location="/X3D/head">
      <svrl:text>Based on file name, TestSchematronDiagnostics.x3d is considered a test model supporting X3D Quality Assurance (QA).
  https://www.web3d.org/x3d/content/examples/X3dResources.html#QualityAssurance </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:failed-assert test="@name" role="error" location="/X3D/head/component[1]">
      <svrl:text>&lt;component name='' level='3'/&gt; is required to have a value for name field </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:failed-assert test="@level" role="error" location="/X3D/head/component[2]">
      <svrl:text>&lt;component name='Geometry2D' level=''/&gt; is required to have a value for level field </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:successful-report test="preceding::component[@name = $name]"
                           role="warning"
                           location="/X3D/head/component[3]">
      <svrl:text>&lt;component name='Geometry2D'/&gt; has redundant prior component element with same name </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(not(string-length(@name) &gt; 0)) or (not(string-length(@level) &gt; 0)) or (@name='Core' and (@level='1' or @level='2')) or (@name='Time' and (@level='1' or @level='2')) or (@name='Networking' and (@level='1' or @level='2' or @level='3' or @level='4')) or (@name='Grouping' and (@level='1' or @level='2' or @level='3')) or (@name='Rendering' and (@level='1' or @level='2' or @level='3' or @level='4' or @level='5')) or (@name='Shape' and (@level='1' or @level='2' or @level='3' or @level='4')) or (@name='Geometry3D' and (@level='1' or @level='2' or @level='3' or @level='4')) or (@name='Geometry2D' and (@level='1' or @level='2')) or (@name='Text' and (@level='1')) or (@name='Sound' and (@level='1')) or (@name='Lighting' and (@level='1' or @level='2' or @level='3')) or (@name='Texturing' and (@level='1' or @level='2' or @level='3')) or (@name='Interpolation' and (@level='1' or @level='2' or @level='3' or @level='4' or @level='5')) or (@name='PointingDeviceSensor' and (@level='1')) or (@name='KeyDeviceSensor' and (@level='1' or @level='2')) or (@name='EnvironmentalSensor' and (@level='1' or @level='2' or @level='3')) or (@name='Navigation' and (@level='1' or @level='2' or @level='3')) or (@name='EnvironmentalEffects' and (@level='1' or @level='2' or @level='3' or @level='4')) or (@name='Geospatial' and (@level='1' or @level='2')) or (@name='H-Anim' and (@level='1')) or (@name='HAnim' and (@level='1' or @level='2')) or (@name='NURBS' and (@level='1' or @level='2' or @level='3' or @level='4')) or (@name='DIS' and (@level='1' or @level='2')) or (@name='Scripting' and (@level='1')) or (@name='EventUtilities' and (@level='1')) or (@name='Shaders' and (@level='1')) or (@name='CADGeometry' and (@level='1' or @level='2')) or (@name='Texturing3D' and (@level='1' or @level='2')) or (@name='CubeMapTexturing' and (@level='1' or @level='2' or @level='3')) or (@name='Layering' and (@level='1')) or (@name='Layout' and (@level='1' or @level='2')) or (@name='RigidBodyPhysics' and (@level='1' or @level='2')) or (@name='Picking' and (@level='1' or @level='2' or @level='3')) or (@name='Followers' and (@level='1')) or (@name='ParticleSystems' and (@level='1' or @level='2' or @level='3')) or (@name='VolumeRendering' and (@level='1' or @level='2' or @level='3' or @level='4'))"
                       role="error"
                       location="/X3D/head/component[3]">
      <svrl:text>&lt;component&gt; name='Geometry2D' has invalid value for level='3' (too high or undefined) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="component | *[(lower-case(local-name()) = 'component')]"/>
   <svrl:successful-report test="preceding::component[@name = $name]"
                           role="warning"
                           location="/X3D/head/component[4]">
      <svrl:text>&lt;component name='Geometry2D'/&gt; has redundant prior component element with same name </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(not(string-length(@name) &gt; 0)) or (not(string-length(@level) &gt; 0)) or (@name='Core' and (@level='1' or @level='2')) or (@name='Time' and (@level='1' or @level='2')) or (@name='Networking' and (@level='1' or @level='2' or @level='3' or @level='4')) or (@name='Grouping' and (@level='1' or @level='2' or @level='3')) or (@name='Rendering' and (@level='1' or @level='2' or @level='3' or @level='4' or @level='5')) or (@name='Shape' and (@level='1' or @level='2' or @level='3' or @level='4')) or (@name='Geometry3D' and (@level='1' or @level='2' or @level='3' or @level='4')) or (@name='Geometry2D' and (@level='1' or @level='2')) or (@name='Text' and (@level='1')) or (@name='Sound' and (@level='1')) or (@name='Lighting' and (@level='1' or @level='2' or @level='3')) or (@name='Texturing' and (@level='1' or @level='2' or @level='3')) or (@name='Interpolation' and (@level='1' or @level='2' or @level='3' or @level='4' or @level='5')) or (@name='PointingDeviceSensor' and (@level='1')) or (@name='KeyDeviceSensor' and (@level='1' or @level='2')) or (@name='EnvironmentalSensor' and (@level='1' or @level='2' or @level='3')) or (@name='Navigation' and (@level='1' or @level='2' or @level='3')) or (@name='EnvironmentalEffects' and (@level='1' or @level='2' or @level='3' or @level='4')) or (@name='Geospatial' and (@level='1' or @level='2')) or (@name='H-Anim' and (@level='1')) or (@name='HAnim' and (@level='1' or @level='2')) or (@name='NURBS' and (@level='1' or @level='2' or @level='3' or @level='4')) or (@name='DIS' and (@level='1' or @level='2')) or (@name='Scripting' and (@level='1')) or (@name='EventUtilities' and (@level='1')) or (@name='Shaders' and (@level='1')) or (@name='CADGeometry' and (@level='1' or @level='2')) or (@name='Texturing3D' and (@level='1' or @level='2')) or (@name='CubeMapTexturing' and (@level='1' or @level='2' or @level='3')) or (@name='Layering' and (@level='1')) or (@name='Layout' and (@level='1' or @level='2')) or (@name='RigidBodyPhysics' and (@level='1' or @level='2')) or (@name='Picking' and (@level='1' or @level='2' or @level='3')) or (@name='Followers' and (@level='1')) or (@name='ParticleSystems' and (@level='1' or @level='2' or @level='3')) or (@name='VolumeRendering' and (@level='1' or @level='2' or @level='3' or @level='4'))"
                       role="error"
                       location="/X3D/head/component[4]">
      <svrl:text>&lt;component&gt; name='Geometry2D' has invalid value for level='3' (too high or undefined) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="unit | *[(lower-case(local-name()) = 'unit')]"/>
   <svrl:failed-assert test="(/X3D/@version='3.3') or (/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/head/unit[1]">
      <svrl:text>&lt;unit/&gt; statement requires X3D version='3.3' or greater, but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(@conversionFactor &gt; 0)"
                       role="error"
                       location="/X3D/head/unit[1]">
      <svrl:text>&lt;unit conversionFactor='-1'/&gt; must be positive</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="unit | *[(lower-case(local-name()) = 'unit')]"/>
   <svrl:successful-report test="preceding::unit[@name = $name]"
                           role="warning"
                           location="/X3D/head/unit[2]">
      <svrl:text>&lt;unit name='nonPositiveConversionFactor'/&gt; has redundant prior unit element with same name </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(/X3D/@version='3.3') or (/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/head/unit[2]">
      <svrl:text>&lt;unit/&gt; statement requires X3D version='3.3' or greater, but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(@conversionFactor &gt; 0)"
                       role="error"
                       location="/X3D/head/unit[2]">
      <svrl:text>&lt;unit conversionFactor='-1'/&gt; must be positive</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:successful-report test="not($hasPriorDuplicate) and preceding::meta[@name = $name] and $hasSingletonName"
                           role="error"
                           location="/X3D/head/meta[3]">
      <svrl:text>&lt;meta name='description' content='Second meta tag to test warning that two description meta tags are present.'/&gt; has redundant prior element </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@name='description') and (count(preceding-sibling::*[@name='description']) gt 0) and (count(following-sibling::*[@name='description']) = 0)"
                           role="warning"
                           location="/X3D/head/meta[3]">
      <svrl:text>&lt;meta DEF=''/&gt; has 2 meta nodes with name='description' which can confuse archive and catalog tools </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta[(@name='error') or (@name='warning') or (@name='hint') or (@name='info') or starts-with(@name,'TODO')]"/>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/head/meta[7]">
      <svrl:text>&lt;meta name='warning' content='The regex is not finding IllegalMinusSignsTest.'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="meta[(@name='error') or (@name='warning') or (@name='hint') or (@name='info') or starts-with(@name,'TODO')]"/>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/head/meta[8]">
      <svrl:text>&lt;meta name='error' content='Test scene with many errors, primarily intended to exercise most of the rules in the X3D Schematron diagnostic set.'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="meta[(@name='error') or (@name='warning') or (@name='hint') or (@name='info') or starts-with(@name,'TODO')]"/>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/head/meta[9]">
      <svrl:text>&lt;meta name='warning' content='Test scene with many warnings embedded in comments.'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="meta[(@name='error') or (@name='warning') or (@name='hint') or (@name='info') or starts-with(@name,'TODO')]"/>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/head/meta[10]">
      <svrl:text>&lt;meta name='hint' content='Test scene with many hints embedded in comments.'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="meta[(@name='error') or (@name='warning') or (@name='hint') or (@name='info') or starts-with(@name,'TODO')]"/>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/head/meta[11]">
      <svrl:text>&lt;meta name='info' content='Perhaps the most erroneous X3D scene in the world!'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="meta[(@name='error') or (@name='warning') or (@name='hint') or (@name='info') or starts-with(@name,'TODO')]"/>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/head/meta[12]">
      <svrl:text>&lt;meta name='info' content='Perhaps the most erroneous X3D scene in the world!'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="meta | *[(lower-case(local-name()) = 'meta')]"/>
   <svrl:fired-rule context="Scene | *[(lower-case(local-name()) = 'scene')]"/>
   <svrl:failed-assert test="not(@DEF)" role="error" location="/X3D/Scene">
      <svrl:text>&lt;Scene DEF='improperDEF'/&gt; element is not allowed to have a DEF attribute </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="not(@USE)" role="error" location="/X3D/Scene">
      <svrl:text>&lt;Scene USE='improperUSE'/&gt; element is not allowed to have a USE attribute </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:successful-report test="@DEF and @USE" role="error" location="/X3D/Scene/TouchSensor">
      <svrl:text>&lt;TouchSensor DEF='IllegalCombinationDEFUSE' USE='IllegalCombinationDEFUSE'/&gt; cannot contain both DEF and USE in single node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Sensor') and not(local-name() = 'TimeSensor')"
                           role="warning"
                           location="/X3D/Scene/TouchSensor">
      <svrl:text>&lt;TouchSensor DEF='IllegalCombinationDEFUSE'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='IllegalCombinationDEFUSE' fromField='isActive/isOver/something_changed' toNode='SomeTargetDEFname' toField='set_enabled/set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="($peerNodesTotalCount &gt; 0)"
                           role="warning"
                           location="/X3D/Scene/TouchSensor">
      <svrl:text>&lt;TouchSensor DEF='IllegalCombinationDEFUSE'/&gt; has peer pointing-device sensor nodes which may make which selection of geometry difficult </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:failed-assert test="not($DEF) or (count(//*[@DEF=$DEF]) = 1)"
                       role="error"
                       location="/X3D/Scene/CylinderSensor">
      <svrl:text>&lt;CylinderSensor DEF='DoubleDEF'/&gt; has duplicated DEF name appearing elsewhere in the scene </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(@enabled='false') and not(//ROUTE[@toNode=$DEF][(@toField='enabled') or (@toField='set_enabled')] or (IS/connect[nodeField='enabled']))"
                           role="warning"
                           location="/X3D/Scene/CylinderSensor">
      <svrl:text>&lt;CylinderSensor DEF='DoubleDEF'/&gt; is inactive since enabled='false' (and no ROUTE is provided to change this value) </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Sensor') and not(local-name() = 'TimeSensor')"
                           role="warning"
                           location="/X3D/Scene/CylinderSensor">
      <svrl:text>&lt;CylinderSensor DEF='DoubleDEF'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='DoubleDEF' fromField='isActive/isOver/something_changed' toNode='SomeTargetDEFname' toField='set_enabled/set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@description) = 0) and not(boolean(IS/connect/@nodeField='description')) and not(@USE) and ((local-name()='CylinderSensor') or (local-name()='SphereSensor'))"
                           role="warning"
                           location="/X3D/Scene/CylinderSensor">
      <svrl:text>&lt;CylinderSensor DEF='DoubleDEF'/&gt; is missing description. Example: description='select and drag to rotate' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="($peerNodesTotalCount &gt; 0)"
                           role="warning"
                           location="/X3D/Scene/CylinderSensor">
      <svrl:text>&lt;CylinderSensor DEF='DoubleDEF'/&gt; has peer pointing-device sensor nodes which may make which selection of geometry difficult </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:failed-assert test="not($DEF) or (count(//*[@DEF=$DEF]) = 1)"
                       role="error"
                       location="/X3D/Scene/TimeSensor[1]">
      <svrl:text>&lt;TimeSensor DEF='DoubleDEF'/&gt; has duplicated DEF name appearing elsewhere in the scene </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and (local-name() = 'TimeSensor')"
                           role="warning"
                           location="/X3D/Scene/TimeSensor[1]">
      <svrl:text>&lt;TimeSensor DEF='DoubleDEF'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='DoubleDEF' fromField='fraction_changed' toNode='SomeInterpolatorDEFname' toField='set_fraction'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:successful-report test="not(@USE) and (string-length(@title) gt 0) and (string-length(preceding::WorldInfo/@title) gt 0)"
                           role="warning"
                           location="/X3D/Scene/WorldInfo[2]">
      <svrl:text>&lt;WorldInfo DEF='FirstTitle' title='title #1'/&gt; and &lt;WorldInfo DEF='SecondTitle' title='title #2'/&gt; have both defined window title </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:failed-assert test="not(contains($DEF,' '))"
                       role="error"
                       location="/X3D/Scene/WorldInfo[4]">
      <svrl:text>&lt;WorldInfo DEF='DEFEmbedded Space'/&gt; has embedded space character(s) in DEF name </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:failed-assert test="not(*) or (IS and (count(*) = 1)) or (*[starts-with(name(),'Metadata')] and (count(*) = 1)) or (IS and *[starts-with(name(),'Metadata')] and (count(*) = 2)) or (ProtoInstance and (count(*) = 1)) or ((local-name='GeoPositionInterpolator') and *[not(starts-with(name(),'Metadata')) and not(local-name='GeoOrigin')])"
                       role="error"
                       location="/X3D/Scene/WorldInfo[7]">
      <svrl:text>&lt;WorldInfo DEF='IllegalChild'/&gt; element has illegal child node (only single Metadata* node is allowed) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:failed-assert test="(string-length($name) &gt; 0) or (string-length(@USE) &gt; 0) or IS/connect or ($nodeName = 'HAnimMotion')"
                       role="error"
                       location="/X3D/Scene/WorldInfo[8]/MetadataString">
      <svrl:text>&lt;MetadataString DEF=''/&gt; name field is required </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Anchor"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/Anchor[1]">
      <svrl:text>&lt;Anchor DEF='NoChildrenNoUrl'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="@USE or @url or boolean(IS/connect[@nodeField='url']) or (local-name()='Script') or contains(local-name(),'Shader')"
                       role="error"
                       location="/X3D/Scene/Anchor[1]">
      <svrl:text>&lt;Anchor DEF='NoChildrenNoUrl'/&gt; has no value(s) in url='' array </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(local-name()='Anchor') and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))"
                           role="warning"
                           location="/X3D/Scene/Anchor[1]">
      <svrl:text>&lt;Anchor DEF='NoChildrenNoUrl'/&gt; is missing description which is important for accessibility and usability.  Example: description='Anchor link loads another scene...' or 'Anchor link goes to Viewpoint DEFname...' or 'Anchor link loads a Web page...' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Anchor"/>
   <svrl:successful-report test="(local-name()='Anchor') and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))"
                           role="warning"
                           location="/X3D/Scene/Anchor[2]">
      <svrl:text>&lt;Anchor DEF='AnchorBookmark'/&gt; is missing description which is important for accessibility and usability.  Example: description='Anchor link loads another scene...' or 'Anchor link goes to Viewpoint DEFname...' or 'Anchor link loads a Web page...' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/Anchor[2]/Group">
      <svrl:text>&lt;Group DEF=''/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Inline"/>
   <svrl:successful-report test="not(/X3D[(@profile='Interactive') or (@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Networking'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/Inline[1]">
      <svrl:text>&lt;Inline DEF='HelloWorld'/&gt; requires at least &lt;component name='Networking' level='2'/&gt; or &lt;X3D profile='Interactive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Inline"/>
   <svrl:failed-assert test="not(contains($url,'&#34;&#34;'))"
                       role="error"
                       location="/X3D/Scene/Inline[2]">
      <svrl:text>&lt;Inline DEF='UrlDotWrlPrecedesDotX3d'/&gt; url array has adjacent "quote marks" unseparated by other characters (url='"test.wrl" "test.x3d" "adjacent""quote marks"') </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(@url) and not(@USE) and not(contains(@url,'http')) and not((local-name()='Anchor') and contains(@url,'#')) and not((local-name()='Script') and contains(@url,'ecmascript:'))"
                           role="info"
                           location="/X3D/Scene/Inline[2]">
      <svrl:text>&lt;Inline DEF='UrlDotWrlPrecedesDotX3d'/&gt; url array address(es) missing online http/https references (url='"test.wrl" "test.x3d" "adjacent""quote marks"') </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains(substring-after(@url,'.wrl&#34;'),'.x3d&#34;') or contains(substring-after(@url,'.wrl#'),'.x3d#')"
                           role="warning"
                           location="/X3D/Scene/Inline[2]">
      <svrl:text>&lt;Inline DEF='UrlDotWrlPrecedesDotX3d'/&gt; url array has .wrl scene reference before .x3d scene reference (url='"test.wrl" "test.x3d" "adjacent""quote marks"') </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and contains($normalizedStringUrl,'&#34;&#34;') and not($normalizedStringUrl='&#34;&#34;') and not(contains($normalizedStringUrl,'\&#34;&#34;') or contains($normalizedStringUrl,'&#34;\&#34;') or contains($normalizedStringUrl,'&#34;&#34; &#34;') or contains($normalizedStringUrl,'&#34; &#34;&#34;'))"
                           role="error"
                           location="/X3D/Scene/Inline[2]">
      <svrl:text>&lt;Inline DEF='UrlDotWrlPrecedesDotX3d' string=''/&gt; string array has questionable line-break "" quote marks (url='"test.wrl" "test.x3d" "adjacent""quote marks"') </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Inline"/>
   <svrl:failed-assert test="not(*) or (IS and (count(*) = 1)) or (*[starts-with(name(),'Metadata')] and (count(*) = 1)) or (IS and *[starts-with(name(),'Metadata')] and (count(*) = 2)) or (ProtoInstance and (count(*) = 1)) or ((local-name='GeoPositionInterpolator') and *[not(starts-with(name(),'Metadata')) and not(local-name='GeoOrigin')])"
                       role="error"
                       location="/X3D/Scene/Inline[3]">
      <svrl:text>&lt;Inline DEF='NoUrlIllegalChild'/&gt; element has illegal child node (only single Metadata* node is allowed) </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="@USE or @url or boolean(IS/connect[@nodeField='url']) or (local-name()='Script') or contains(local-name(),'Shader')"
                       role="error"
                       location="/X3D/Scene/Inline[3]">
      <svrl:text>&lt;Inline DEF='NoUrlIllegalChild'/&gt; has no value(s) in url='' array </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="Inline"/>
   <svrl:successful-report test="(@url) and not(@USE) and not(contains(@url,'http')) and not((local-name()='Anchor') and contains(@url,'#')) and not((local-name()='Script') and contains(@url,'ecmascript:'))"
                           role="info"
                           location="/X3D/Scene/Inline[4]">
      <svrl:text>&lt;Inline DEF='NodeUrlVRML.wrl.PrecedingX3D.x3d'/&gt; url array address(es) missing online http/https references (url='"HelloWorld.wrl" "HelloWorld.x3d"') </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains(substring-after(@url,'.wrl&#34;'),'.x3d&#34;') or contains(substring-after(@url,'.wrl#'),'.x3d#')"
                           role="warning"
                           location="/X3D/Scene/Inline[4]">
      <svrl:text>&lt;Inline DEF='NodeUrlVRML.wrl.PrecedingX3D.x3d'/&gt; url array has .wrl scene reference before .x3d scene reference (url='"HelloWorld.wrl" "HelloWorld.x3d"') </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ExternProtoDeclare"/>
   <svrl:failed-assert test="//ProtoInstance[@name=$name]"
                       role="warning"
                       location="/X3D/Scene/ExternProtoDeclare[1]">
      <svrl:text>&lt;ExternProtoDeclare name="ExternProtoDeclareUrlVRML.wrl.PrecedingX3D.x3d"/&gt; has no corresponding ProtoInstance </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(@url) and not(contains(@url,'#'))"
                           role="warning"
                           location="/X3D/Scene/ExternProtoDeclare[1]">
      <svrl:text>&lt;ExternProtoDeclare name="ExternProtoDeclareUrlVRML.wrl.PrecedingX3D.x3d"/&gt; url array address(es) missing #ExternProtoDeclareUrlVRML.wrl.PrecedingX3D.x3d appended </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@url) and not(contains(@url,'http'))"
                           role="info"
                           location="/X3D/Scene/ExternProtoDeclare[1]">
      <svrl:text>&lt;ExternProtoDeclare name="ExternProtoDeclareUrlVRML.wrl.PrecedingX3D.x3d"/&gt; url array address(es) missing online http references </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Core'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/ExternProtoDeclare[1]">
      <svrl:text>&lt;ExternProtoDeclare DEF=''/&gt; requires at least &lt;component name='Core' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ExternProtoDeclare"/>
   <svrl:failed-assert test="//ProtoInstance[@name=$name]"
                       role="warning"
                       location="/X3D/Scene/ExternProtoDeclare[2]">
      <svrl:text>&lt;ExternProtoDeclare name="ExternProtoDeclareUrlVRML.wrl.MissingX3D.x3d"/&gt; has no corresponding ProtoInstance </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(@url) and not(contains(@url,'#'))"
                           role="warning"
                           location="/X3D/Scene/ExternProtoDeclare[2]">
      <svrl:text>&lt;ExternProtoDeclare name="ExternProtoDeclareUrlVRML.wrl.MissingX3D.x3d"/&gt; url array address(es) missing #ExternProtoDeclareUrlVRML.wrl.MissingX3D.x3d appended </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))"
                       role="warning"
                       location="/X3D/Scene/Shape[1]">
      <svrl:text>&lt;Shape DEF='NoChildAppearance'/&gt; found without child Appearance or Color </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))"
                       role="warning"
                       location="/X3D/Scene/Shape[2]">
      <svrl:text>&lt;Shape DEF='NoChildGeometry'/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Appearance"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or (Material | TwoSidedMaterial | PhysicalMaterial | UnlitMaterial | ImageTexture | LineProperties | PointProperties | MovieTexture | PixelTexture | MultiTexture | */Color | */ColorRGBA | ProtoInstance | IS | parent::ProtoBody | parent::field | parent::fieldValue)"
                       role="warning"
                       location="/X3D/Scene/Shape[2]/Appearance">
      <svrl:text>empty &lt;Appearance DEF='NoMaterialNoTexture'/&gt; found without child Material, TwoSidedMaterial, PhysicalMaterial, UnlitMaterial, FillProperties, LineProperties, PointProperties or texture node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:failed-assert test="$declarationFound"
                       role="error"
                       location="/X3D/Scene/Shape[6]/Appearance/ProtoInstance">
      <svrl:text>&lt;ProtoInstance DEF="" USE="" name="NodeSubstituteNoDeclaration"/&gt; has no ProtoDeclare or ExternProtoDeclare with same name </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Core'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/Shape[6]/Appearance/ProtoInstance">
      <svrl:text>&lt;ProtoInstance DEF=''/&gt; requires at least &lt;component name='Core' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Appearance"/>
   <svrl:failed-assert test="parent::Shape | parent::ProtoBody | parent::field | parent::fieldValue"
                       role="error"
                       location="/X3D/Scene/Appearance">
      <svrl:text>&lt;Appearance DEF='MissingParentShape'/&gt; found outside of a parent Shape, ProtoBody, field or fieldValue element </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or (Material | TwoSidedMaterial | PhysicalMaterial | UnlitMaterial | ImageTexture | LineProperties | PointProperties | MovieTexture | PixelTexture | MultiTexture | */Color | */ColorRGBA | ProtoInstance | IS | parent::ProtoBody | parent::field | parent::fieldValue)"
                       role="warning"
                       location="/X3D/Scene/Appearance">
      <svrl:text>empty &lt;Appearance DEF='MissingParentShape'/&gt; found without child Material, TwoSidedMaterial, PhysicalMaterial, UnlitMaterial, FillProperties, LineProperties, PointProperties or texture node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Shape"/>
   <svrl:successful-report test="(@USE) and (string-length(@USE) &gt; 0) and *"
                           role="error"
                           location="/X3D/Scene/Shape[7]">
      <svrl:text>&lt;Shape USE='USEwithChildElement'/&gt; USE elements cannot have any child nodes </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="not(@USE) or not(*)"
                       role="error"
                       location="/X3D/Scene/Shape[7]">
      <svrl:text>&lt;Shape USE='USEwithChildElement'&gt; &lt;Appearance/&gt; &lt;/Shape&gt; USE node must not contain any child nodes </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:successful-report test="(count(*)=1) and (ProtoInstance) and not(parent::ProtoBody) and not(parent::field) and not(parent::fieldValue) and not(IS)"
                           role="warning"
                           location="/X3D/Scene/Shape[8]">
      <svrl:text>&lt;Shape DEF='SingleProtoInstanceChild'/&gt; found with single ProtoInstance child, need to add Appearance or geometry node </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))"
                       role="warning"
                       location="/X3D/Scene/Shape[8]">
      <svrl:text>&lt;Shape DEF='SingleProtoInstanceChild'/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:failed-assert test="$declarationFound"
                       role="error"
                       location="/X3D/Scene/Shape[8]/ProtoInstance">
      <svrl:text>&lt;ProtoInstance DEF="" USE="" name="NodeSubstituteNoDeclaration"/&gt; has no ProtoDeclare or ExternProtoDeclare with same name </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and (local-name() = 'TimeSensor')"
                           role="warning"
                           location="/X3D/Scene/TimeSensor[2]">
      <svrl:text>&lt;TimeSensor DEF='NoOutputROUTE'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='NoOutputROUTE' fromField='fraction_changed' toNode='SomeInterpolatorDEFname' toField='set_fraction'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and (local-name() = 'TimeSensor')"
                           role="warning"
                           location="/X3D/Scene/TimeSensor[3]">
      <svrl:text>&lt;TimeSensor DEF='Clock'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='Clock' fromField='fraction_changed' toNode='SomeInterpolatorDEFname' toField='set_fraction'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ColorInterpolator"/>
   <svrl:failed-assert test="(@DEF) or (string-length(@USE) &gt; 0) or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect"
                       role="warning"
                       location="/X3D/Scene/ColorInterpolator[1]">
      <svrl:text>&lt;ColorInterpolator/&gt; must have DEF name in order to ROUTE input events </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not(contains(local-name(),'TouchSensor')) and not(string-length(@DEF) &gt; 0) and not(string-length(@USE) &gt; 0)"
                           role="warning"
                           location="/X3D/Scene/ColorInterpolator[1]">
      <svrl:text>&lt;ColorInterpolator/&gt; must have DEF name in order to ROUTE output events </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(string-length(normalize-space($key)) &gt; 0) or (@USE) or (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='key'])"
                       role="error"
                       location="/X3D/Scene/ColorInterpolator[1]">
      <svrl:text>&lt;ColorInterpolator DEF=''/&gt; missing key array </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(string-length(normalize-space($keyValue)) &gt; 0) or (@USE) or (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='keyValue'])"
                       role="error"
                       location="/X3D/Scene/ColorInterpolator[1]">
      <svrl:text>&lt;ColorInterpolator DEF=''/&gt; missing keyValue array </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or (3 * $keyCount)=$keyValueCount"
                       role="error"
                       location="/X3D/Scene/ColorInterpolator[1]">
      <svrl:text>&lt;ColorInterpolator DEF=''/&gt; key array (size=1) must match keyValue array (size=0.333333333333333333 sets of 3-tuple values) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ColorInterpolator"/>
   <svrl:successful-report test="((@DEF) and not(//ROUTE[@toNode=$DEF]) and not((local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect)) and (contains(local-name(),'Interpolator') or contains(local-name(),'Sequencer'))"
                           role="warning"
                           location="/X3D/Scene/ColorInterpolator[2]">
      <svrl:text>&lt;ColorInterpolator DEF='InterpolatorWithSingleKey'/&gt; is missing ROUTE to receive input events, for example &lt;ROUTE fromNode='SomeTimeSensorDEFname' fromField='fraction_changed' toNode='InterpolatorWithSingleKey' toField='set_fraction'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')"
                           role="warning"
                           location="/X3D/Scene/ColorInterpolator[2]">
      <svrl:text>&lt;ColorInterpolator DEF='InterpolatorWithSingleKey'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='InterpolatorWithSingleKey' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(string-length(normalize-space($keyValue)) &gt; 0) or (@USE) or (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='keyValue'])"
                       role="error"
                       location="/X3D/Scene/ColorInterpolator[2]">
      <svrl:text>&lt;ColorInterpolator DEF='InterpolatorWithSingleKey'/&gt; missing keyValue array </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(string-length($key) &gt; 0) and not($keyCount &gt;= 2)"
                           role="error"
                           location="/X3D/Scene/ColorInterpolator[2]">
      <svrl:text>&lt;ColorInterpolator DEF='InterpolatorWithSingleKey'/&gt; key array length 1 (and corresponding keyValue array length) needs to be 2 or greater </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or (3 * $keyCount)=$keyValueCount"
                       role="error"
                       location="/X3D/Scene/ColorInterpolator[2]">
      <svrl:text>&lt;ColorInterpolator DEF='InterpolatorWithSingleKey'/&gt; key array (size=1) must match keyValue array (size=0.333333333333333333 sets of 3-tuple values) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ColorInterpolator"/>
   <svrl:successful-report test="((@DEF) and not(//ROUTE[@toNode=$DEF]) and not((local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect)) and (contains(local-name(),'Interpolator') or contains(local-name(),'Sequencer'))"
                           role="warning"
                           location="/X3D/Scene/ColorInterpolator[3]">
      <svrl:text>&lt;ColorInterpolator DEF='ColorInterpolatorColorProblems'/&gt; is missing ROUTE to receive input events, for example &lt;ROUTE fromNode='SomeTimeSensorDEFname' fromField='fraction_changed' toNode='ColorInterpolatorColorProblems' toField='set_fraction'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')"
                           role="warning"
                           location="/X3D/Scene/ColorInterpolator[3]">
      <svrl:text>&lt;ColorInterpolator DEF='ColorInterpolatorColorProblems'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='ColorInterpolatorColorProblems' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length($key) &gt; 0) and not($keyCount &gt;= 2)"
                           role="error"
                           location="/X3D/Scene/ColorInterpolator[3]">
      <svrl:text>&lt;ColorInterpolator DEF='ColorInterpolatorColorProblems'/&gt; key array length 1 (and corresponding keyValue array length) needs to be 2 or greater </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($keyValue,'-')"
                           role="warning"
                           location="/X3D/Scene/ColorInterpolator[3]">
      <svrl:text>&lt;ColorInterpolator DEF='ColorInterpolatorColorProblems'/&gt; contains a negative color array value, keyValue='-1 1.2 0.3 0.4' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($keyValue,' 2') or contains($keyValue,' 3') or contains($keyValue,' 4') or contains($keyValue,' 5') or contains($keyValue,' 6') or contains($keyValue,' 7') or contains($keyValue,' 8') or contains($keyValue,' 9') or contains($keyValue,' 1.1') or contains($keyValue,' 1.2') or contains($keyValue,' 1.3') or contains($keyValue,' 1.4') or contains($keyValue,' 1.5') or contains($keyValue,' 1.6') or contains($keyValue,' 1.7') or contains($keyValue,' 1.8') or contains($keyValue,' 1.9')"
                           role="warning"
                           location="/X3D/Scene/ColorInterpolator[3]">
      <svrl:text>&lt;ColorInterpolator DEF='ColorInterpolatorColorProblems'/&gt; contains a color array value greater than 1, keyValue='-1 1.2 0.3 0.4' </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or (3 * $keyCount)=$keyValueCount"
                       role="error"
                       location="/X3D/Scene/ColorInterpolator[3]">
      <svrl:text>&lt;ColorInterpolator DEF='ColorInterpolatorColorProblems'/&gt; key array (size=1) must match keyValue array (size=1.333333333333333333 sets of 3-tuple values) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:successful-report test="((@DEF) and not(//ROUTE[@toNode=$DEF]) and not((local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect)) and (contains(local-name(),'Interpolator') or contains(local-name(),'Sequencer'))"
                           role="warning"
                           location="/X3D/Scene/PositionInterpolator">
      <svrl:text>&lt;PositionInterpolator DEF='NoROUTEsNoKeyValueArray'/&gt; is missing ROUTE to receive input events, for example &lt;ROUTE fromNode='SomeTimeSensorDEFname' fromField='fraction_changed' toNode='NoROUTEsNoKeyValueArray' toField='set_fraction'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')"
                           role="warning"
                           location="/X3D/Scene/PositionInterpolator">
      <svrl:text>&lt;PositionInterpolator DEF='NoROUTEsNoKeyValueArray'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='NoROUTEsNoKeyValueArray' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(string-length(normalize-space($keyValue)) &gt; 0) or (@USE) or (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='keyValue'])"
                       role="error"
                       location="/X3D/Scene/PositionInterpolator">
      <svrl:text>&lt;PositionInterpolator DEF='NoROUTEsNoKeyValueArray'/&gt; missing keyValue array </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or (3 * $keyCount)=$keyValueCount"
                       role="error"
                       location="/X3D/Scene/PositionInterpolator">
      <svrl:text>&lt;PositionInterpolator DEF='NoROUTEsNoKeyValueArray'/&gt; key array (size=2) must match keyValue array (size=0.333333333333333333 sets of 3-tuple values) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ScalarInterpolator"/>
   <svrl:successful-report test="(string-length($key) &gt; 0) and not($keyCount &gt;= 2)"
                           role="error"
                           location="/X3D/Scene/ScalarInterpolator[1]">
      <svrl:text>&lt;ScalarInterpolator DEF='MismatchedKeyArrays'/&gt; key array length 1 (and corresponding keyValue array length) needs to be 2 or greater </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or $keyCount=$keyValueCount"
                       role="error"
                       location="/X3D/Scene/ScalarInterpolator[1]">
      <svrl:text>&lt;ScalarInterpolator DEF='MismatchedKeyArrays'/&gt; key array (size=1) must match keyValue array (size=2 values) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="NormalInterpolator"/>
   <svrl:failed-assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or round($keyValueCount div $keyCount)=($keyValueCount div $keyCount)"
                       role="error"
                       location="/X3D/Scene/NormalInterpolator[1]">
      <svrl:text>&lt;NormalInterpolator DEF='MismatchedKeyArraysSFVec3f'/&gt; key array (size=2) does not evenly divide keyValue array (size=1.666666666666666667 sets of 3-tuple values) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:fired-rule context="BooleanSequencer"/>
   <svrl:failed-assert test="(@DEF) or (string-length(@USE) &gt; 0) or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect"
                       role="warning"
                       location="/X3D/Scene/BooleanSequencer[1]">
      <svrl:text>&lt;BooleanSequencer/&gt; must have DEF name in order to ROUTE input events </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not(contains(local-name(),'TouchSensor')) and not(string-length(@DEF) &gt; 0) and not(string-length(@USE) &gt; 0)"
                           role="warning"
                           location="/X3D/Scene/BooleanSequencer[1]">
      <svrl:text>&lt;BooleanSequencer/&gt; must have DEF name in order to ROUTE output events </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="$key and not($key=' ') and not (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='key'])"
                       role="error"
                       location="/X3D/Scene/BooleanSequencer[1]">
      <svrl:text>&lt;BooleanSequencer DEF=''/&gt; missing key array </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="$keyValue and not($keyValue=' ') and not (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='keyValue'])"
                       role="error"
                       location="/X3D/Scene/BooleanSequencer[1]">
      <svrl:text>&lt;BooleanSequencer DEF=''/&gt; missing keyValue array </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="BooleanSequencer"/>
   <svrl:successful-report test="((@DEF) and not(//ROUTE[@toNode=$DEF]) and not((local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect)) and (contains(local-name(),'Interpolator') or contains(local-name(),'Sequencer'))"
                           role="warning"
                           location="/X3D/Scene/BooleanSequencer[2]">
      <svrl:text>&lt;BooleanSequencer DEF='NoROUTEs'/&gt; is missing ROUTE to receive input events, for example &lt;ROUTE fromNode='SomeTimeSensorDEFname' fromField='fraction_changed' toNode='NoROUTEs' toField='set_fraction'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and not(contains(local-name(),'Interpolator')) and not(contains(local-name(),'Sensor'))"
                           role="warning"
                           location="/X3D/Scene/BooleanSequencer[2]">
      <svrl:text>&lt;BooleanSequencer DEF='NoROUTEs'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='NoROUTEs' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="IntegerTrigger | TimeTrigger"/>
   <svrl:failed-assert test="(@DEF) or (string-length(@USE) &gt; 0) or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect"
                       role="warning"
                       location="/X3D/Scene/IntegerTrigger[1]">
      <svrl:text>&lt;IntegerTrigger/&gt; must have DEF name in order to ROUTE input events </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not(contains(local-name(),'TouchSensor')) and not(string-length(@DEF) &gt; 0) and not(string-length(@USE) &gt; 0)"
                           role="warning"
                           location="/X3D/Scene/IntegerTrigger[1]">
      <svrl:text>&lt;IntegerTrigger/&gt; must have DEF name in order to ROUTE output events </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="IntegerTrigger | TimeTrigger"/>
   <svrl:successful-report test="((@DEF) and not(//ROUTE[@toNode=$DEF]) and not((local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect)) and not(contains(local-name(),'Interpolator') or contains(local-name(),'Sequencer'))"
                           role="warning"
                           location="/X3D/Scene/IntegerTrigger[2]">
      <svrl:text>&lt;IntegerTrigger DEF='NoROUTE'/&gt; is missing ROUTE to receive input events, for example &lt;ROUTE fromNode='SomeProducerDEFname' fromField='somethingElse_changed' toNode='NoROUTE' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and not(contains(local-name(),'Interpolator')) and not(contains(local-name(),'Sensor'))"
                           role="warning"
                           location="/X3D/Scene/IntegerTrigger[2]">
      <svrl:text>&lt;IntegerTrigger DEF='NoROUTE'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='NoROUTE' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="OrientationInterpolator"/>
   <svrl:successful-report test="((@DEF) and not(//ROUTE[@toNode=$DEF]) and not((local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect)) and (contains(local-name(),'Interpolator') or contains(local-name(),'Sequencer'))"
                           role="warning"
                           location="/X3D/Scene/OrientationInterpolator">
      <svrl:text>&lt;OrientationInterpolator DEF='OI'/&gt; is missing ROUTE to receive input events, for example &lt;ROUTE fromNode='SomeTimeSensorDEFname' fromField='fraction_changed' toNode='OI' toField='set_fraction'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')"
                           role="warning"
                           location="/X3D/Scene/OrientationInterpolator">
      <svrl:text>&lt;OrientationInterpolator DEF='OI'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='OI' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(string-length(normalize-space($key)) &gt; 0) or (@USE) or (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='key'])"
                       role="error"
                       location="/X3D/Scene/OrientationInterpolator">
      <svrl:text>&lt;OrientationInterpolator DEF='OI'/&gt; missing key array </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(string-length(normalize-space($keyValue)) &gt; 0) or (@USE) or (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='keyValue'])"
                       role="error"
                       location="/X3D/Scene/OrientationInterpolator">
      <svrl:text>&lt;OrientationInterpolator DEF='OI'/&gt; missing keyValue array </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or (4 * $keyCount)=$keyValueCount"
                       role="error"
                       location="/X3D/Scene/OrientationInterpolator">
      <svrl:text>&lt;OrientationInterpolator DEF='OI'/&gt; key array (size=1) must match keyValue array (size=0.25 sets of 4-tuple values) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="LoadSensor"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Sensor') and not(local-name() = 'TimeSensor')"
                           role="warning"
                           location="/X3D/Scene/LoadSensor[1]">
      <svrl:text>&lt;LoadSensor DEF='ChildrenIncorrectContainerField'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='ChildrenIncorrectContainerField' fromField='isActive/isOver/something_changed' toNode='SomeTargetDEFname' toField='set_enabled/set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="*[not(@containerField='watchList')][not(starts-with(local-name(),'Metadata'))]"
                           role="error"
                           location="/X3D/Scene/LoadSensor[1]">
      <svrl:text>&lt;LoadSensor DEF='ChildrenIncorrectContainerField'/&gt; children must have containerField='watchList' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Networking'][number(@level) ge 3] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/LoadSensor[1]">
      <svrl:text>&lt;LoadSensor DEF='ChildrenIncorrectContainerField'/&gt; requires at least &lt;component name='Networking' level='3'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$isX3D3 and (count(*[not(starts-with(local-name(),'Metadata')) and not(@containerField = 'watchList')]) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/LoadSensor[1]">
      <svrl:text>&lt;LoadSensor DEF='ChildrenIncorrectContainerField'/&gt; in X3D version='3.0' contains child node(s) not having containerField='watchList', which is only allowed value in X3D3 </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:successful-report test="contains(@url,'http:/') and not(contains(@url,'http://'))"
                           role="warning"
                           location="/X3D/Scene/LoadSensor[1]/ImageTexture">
      <svrl:text>&lt;ImageTexture DEF='textureContainerField'/&gt; url array contains http:/ rather than http:// (url='"http:/bogus" "https://www.web3d.org/x3d/content/examples/Basic/development/http:/bogus"') </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(local-name()='ImageTexture') and (string-length(@url) &gt; 2) and not(contains(@url,'.png')) and not(contains(@url,'.PNG')) and not(contains(@url,'.jpg')) and not(contains(@url,'.JPG'))and not(contains(@url,'.jpg')) and not(contains(@url,'.jpeg')) and not(contains(@url,'.JPEG')) and not(contains(@url,'.gif')) and not(contains(@url,'.GIF'))"
                           role="warning"
                           location="/X3D/Scene/LoadSensor[1]/ImageTexture">
      <svrl:text>&lt;ImageTexture DEF='textureContainerField'/&gt; url array does not contains link to .png .jpg or .gif image(s), browsers not required to support other formats (url='"http:/bogus" "https://www.web3d.org/x3d/content/examples/Basic/development/http:/bogus"') </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="LoadSensor"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Sensor') and not(local-name() = 'TimeSensor')"
                           role="warning"
                           location="/X3D/Scene/LoadSensor[2]">
      <svrl:text>&lt;LoadSensor DEF='ChildrenCorrectContainerField'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='ChildrenCorrectContainerField' fromField='isActive/isOver/something_changed' toNode='SomeTargetDEFname' toField='set_enabled/set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:failed-assert test="@USE or @url or boolean(IS/connect[@nodeField='url']) or (local-name()='Script') or contains(local-name(),'Shader')"
                       role="error"
                       location="/X3D/Scene/LoadSensor[2]/ImageTexture">
      <svrl:text>&lt;ImageTexture DEF='watchListContainerField'/&gt; has no value(s) in url='' array </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="LoadSensor"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Sensor') and not(local-name() = 'TimeSensor')"
                           role="warning"
                           location="/X3D/Scene/LoadSensor[3]">
      <svrl:text>&lt;LoadSensor DEF='IncorrectChildNodes'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='IncorrectChildNodes' fromField='isActive/isOver/something_changed' toNode='SomeTargetDEFname' toField='set_enabled/set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="*[not(@containerField='watchList')][not(starts-with(local-name(),'Metadata'))]"
                           role="error"
                           location="/X3D/Scene/LoadSensor[3]">
      <svrl:text>&lt;LoadSensor DEF='IncorrectChildNodes'/&gt; children must have containerField='watchList' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="*[not(starts-with(local-name(),'Metadata')) and not(contains(local-name(),'Texture')) and not(contains(local-name(),'Background')) and not(local-name()='Inline') and not(local-name()='AudioClip') and not(local-name()='Script') and not(local-name()='ProtoInstance')]"
                           role="error"
                           location="/X3D/Scene/LoadSensor[3]">
      <svrl:text>&lt;LoadSensor DEF='IncorrectChildNodes'/&gt; children must be X3DUrlObject node(s) </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$isX3D3 and (count(*[not(starts-with(local-name(),'Metadata')) and not(@containerField = 'watchList')]) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/LoadSensor[3]">
      <svrl:text>&lt;LoadSensor DEF='IncorrectChildNodes'/&gt; in X3D version='3.0' contains child node(s) not having containerField='watchList', which is only allowed value in X3D3 </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/LoadSensor[3]/Group">
      <svrl:text>&lt;Group DEF=''/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Anchor"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/LoadSensor[3]/Anchor">
      <svrl:text>&lt;Anchor DEF='IllegalChildForLoadSensor'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="@USE or @url or boolean(IS/connect[@nodeField='url']) or (local-name()='Script') or contains(local-name(),'Shader')"
                       role="error"
                       location="/X3D/Scene/LoadSensor[3]/Anchor">
      <svrl:text>&lt;Anchor DEF='IllegalChildForLoadSensor'/&gt; has no value(s) in url='' array </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(local-name()='Anchor') and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))"
                           role="warning"
                           location="/X3D/Scene/LoadSensor[3]/Anchor">
      <svrl:text>&lt;Anchor DEF='IllegalChildForLoadSensor'/&gt; is missing description which is important for accessibility and usability.  Example: description='Anchor link loads another scene...' or 'Anchor link goes to Viewpoint DEFname...' or 'Anchor link loads a Web page...' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Script"/>
   <svrl:successful-report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Scripting'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/Script[1]">
      <svrl:text>&lt;Script DEF='HasLegalCDATA'/&gt; requires at least &lt;component name='Scripting' level='1'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="(count(preceding-sibling::*[@name=$fieldName])!=0) and (local-name(..)='Script')"
                           role="error"
                           location="/X3D/Scene/Script[1]/field[2]">
      <svrl:text>&lt;Script DEF='HasLegalCDATA'&gt; has duplicate field declarations with the same name defined &lt;field name='duplicatedFieldName'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Script"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="not(@accessType) and not(local-name(..)='ProtoInstance')"
                           role="error"
                           location="/X3D/Scene/Script[2]/field[1]">
      <svrl:text>&lt;Script DEF='HasCDATAwithoutEcmascriptHeader' name=''&gt; &lt;field name='noAccessType'/&gt; field must have accessType defined </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="not(@type) and not(local-name(..)='ProtoInstance')"
                           role="error"
                           location="/X3D/Scene/Script[2]/field[2]">
      <svrl:text>&lt;Script DEF='HasCDATAwithoutEcmascriptHeader' name=''&gt; &lt;field name='noType'/&gt; field must have type defined </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:failed-assert test="@name" role="error" location="/X3D/Scene/Script[2]/field[3]">
      <svrl:text>&lt;Script DEF='HasCDATAwithoutEcmascriptHeader' name=''&gt; &lt;field type='noName' accessType='inputOnly'/&gt; field must have name defined </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="parent::Script and not(../@url) and ((@accessType='outputOnly') or (@accessType='inputOutput')) and not(starts-with(@type,'MF')) and not(contains($CDATAblock,concat(' ',@name,'='))) and not(contains($CDATAblock,concat(' ',@name,' ='))) and not(contains($CDATAblock,concat(' ',@name,'['))) and not(contains($CDATAblock,concat(' ',@name,' [')))"
                           role="warning"
                           location="/X3D/Scene/Script[2]/field[4]">
      <svrl:text>&lt;Script DEF='HasCDATAwithoutEcmascriptHeader'&gt; &lt;field name='neverSet' accessType='outputOnly'/&gt; does not send output event via assignment statement neverSet=___; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Script"/>
   <svrl:fired-rule context="Script"/>
   <svrl:failed-assert test="@url or @USE or boolean(IS/connect[@nodeField='url']) or (string-length($CDATAblock) gt 1)"
                       role="error"
                       location="/X3D/Scene/Script[4]">
      <svrl:text>&lt;Script DEF='NoUrlNoCDATA'/&gt; needs url or contained CDATA source </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Script"/>
   <svrl:successful-report test="not(local-name()='Anchor') and not(parent::field) and not(parent::fieldValue) and not(ancestor::ProtoDeclare) and not(ancestor::ExternProtoDeclare) and (string-length($normalizedStringUrl) &gt; 0) and preceding::*[normalize-space(@url) = $normalizedStringUrl] and (count(preceding::*[local-name()=$nodeName][normalize-space(@url) = $normalizedStringUrl]) &gt; 0)"
                           role="warning"
                           location="/X3D/Scene/Script[5]">
      <svrl:text>&lt;Script DEF='BothUrlAndCDATA'/&gt; url array address(es) duplicate the url definition found in a preceding node, consider DEF/USE to reduce download delays and memory requirements for url content (url='"TestSchematronDiagnostics.js" "https://www.web3d.org/x3d/content/examples/Basic/development/TestSchematronDiagnostics.js"') </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length($CDATAblock) &gt; 2) and (string-length(normalize-space(@url)) &gt; 2)"
                           role="warning"
                           location="/X3D/Scene/Script[5]">
      <svrl:text>&lt;Script DEF='BothUrlAndCDATA'/&gt; contains both external url reference and internal CDATA source; note that external url takes precedence, but will fall back to contained CDATA source if no external script is found </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="Script"/>
   <svrl:successful-report test="not(local-name()='Anchor') and not(parent::field) and not(parent::fieldValue) and not(ancestor::ProtoDeclare) and not(ancestor::ExternProtoDeclare) and (string-length($normalizedStringUrl) &gt; 0) and preceding::*[normalize-space(@url) = $normalizedStringUrl] and (count(preceding::*[local-name()=$nodeName][normalize-space(@url) = $normalizedStringUrl]) &gt; 0)"
                           role="warning"
                           location="/X3D/Scene/Script[6]">
      <svrl:text>&lt;Script DEF='RouteButNoFields'/&gt; url array address(es) duplicate the url definition found in a preceding node, consider DEF/USE to reduce download delays and memory requirements for url content (url='"TestSchematronDiagnostics.js" "https://www.web3d.org/x3d/content/examples/Basic/development/TestSchematronDiagnostics.js"') </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:successful-report test="not(//*[@DEF=$fromNode])"
                           role="error"
                           location="/X3D/Scene/ROUTE[3]">
      <svrl:text>&lt;ROUTE fromNode='NoFields' fromField='blah' toNode='NoFields' toField='blah'/&gt; has no corresponding fromNode with DEF='NoFields' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(//*[@DEF=$toNode ])"
                           role="error"
                           location="/X3D/Scene/ROUTE[3]">
      <svrl:text>&lt;ROUTE fromNode='NoFields' fromField='blah' toNode='NoFields' toField='blah'/&gt; has no corresponding toNode with DEF='NoFields' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(count(following::ROUTE[@fromNode=$fromNode][@fromField=$fromField][@toNode=$toNode][@toField=$toField]) &gt; 0) and (count(preceding::ROUTE[@fromNode=$fromNode][@fromField=$fromField][@toNode=$toNode][@toField=$toField]) = 0)"
                           role="error"
                           location="/X3D/Scene/ROUTE[3]">
      <svrl:text>&lt;ROUTE fromNode='NoFields' fromField='blah' toNode='NoFields' toField='blah'/&gt; has a total of 2 duplicate(s), remove copies while keeping the remaining ROUTE after fromNode and toNode targets </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@fromNode = @toNode) and (@fromField = @toField)"
                           role="error"
                           location="/X3D/Scene/ROUTE[3]">
      <svrl:text>&lt;ROUTE fromNode='NoFields' fromField='blah' toNode='NoFields' toField='blah'/&gt; incorrectly routes to itself </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:failed-assert test="$declarationFound"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[1]">
      <svrl:text>&lt;ProtoInstance DEF="" USE="" name="NoDeclaration"/&gt; has no ProtoDeclare or ExternProtoDeclare with same name </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ProtoDeclare"/>
   <svrl:failed-assert test="ProtoBody" role="error" location="/X3D/Scene/ProtoDeclare[1]">
      <svrl:text>&lt;ProtoDeclare name="MissingProtoBody"/&gt; must include ProtoBody </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="//ProtoInstance and not(//ProtoInstance[@name=$name])"
                           role="warning"
                           location="/X3D/Scene/ProtoDeclare[1]">
      <svrl:text>&lt;ProtoDeclare name="MissingProtoBody"/&gt; has no corresponding &lt;ProtoInstance name='MissingProtoBody'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Core'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/ProtoDeclare[1]">
      <svrl:text>&lt;ProtoDeclare DEF=''/&gt; requires at least &lt;component name='Core' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="ProtoDeclare"/>
   <svrl:failed-assert test="not(@DEF)" role="error" location="/X3D/Scene/ProtoDeclare[2]">
      <svrl:text>&lt;ProtoDeclare DEF='DuplicatedDeclaration'/&gt; element is not allowed to have a DEF attribute </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ProtoBody"/>
   <svrl:fired-rule context="Group"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/ProtoDeclare[2]/ProtoBody/Group">
      <svrl:text>&lt;Group DEF=''/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:successful-report test="(local-name()='Viewpoint') and not(/X3D[(@profile='Interchange') or (@profile='Interactive') or (@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Navigation'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/ProtoDeclare[2]/ProtoBody/Viewpoint">
      <svrl:text>&lt;Viewpoint DEF='ISconnectDescription'/&gt; requires at least &lt;component name='Navigation' level='1'/&gt; or &lt;X3D profile='Interchange'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:failed-assert test="boolean(ancestor::ProtoDeclare/ProtoInterface/field[@name = $protoField])"
                       role="error"
                       location="/X3D/Scene/ProtoDeclare[2]/ProtoBody/Viewpoint/IS/connect">
      <svrl:text>Not finding connect protoField: &lt;IS&gt; &lt;connect nodeField='description' protoField='description'/&gt; does not have a corresponding protoField declaration &lt;ProtoDeclare name='DoubleMixedDeclaration'&gt; &lt;ProtoInterface&gt; &lt;field name='description'&gt;</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:successful-report test="(string-length(@USE) &gt; 0) and (count(//*[@DEF=$USE]) = 1) and not($USEparentProtoName=$DEFparentProtoName) and (($USEparentProtoName) or ($DEFparentProtoName))"
                           role="error"
                           location="/X3D/Scene/ProtoDeclare[2]/ProtoBody/WorldInfo[1]">
      <svrl:text>&lt;WorldInfo USE='DEFoutsideProtoDeclareScope'/&gt; DEF and USE must both be outside ProtoDeclare or within same ProtoDeclare scope ($USEparentProtoName=DoubleMixedDeclaration, $DEFparentProtoName=) </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:successful-report test="(string-length(@USE) &gt; 0) and (count(//*[@DEF=$USE]) = 1) and not($USEparentProtoName=$DEFparentProtoName) and (($USEparentProtoName) or ($DEFparentProtoName))"
                           role="error"
                           location="/X3D/Scene/WorldInfo[10]">
      <svrl:text>&lt;WorldInfo USE='USEoutsideProtoDeclareScope'/&gt; DEF and USE must both be outside ProtoDeclare or within same ProtoDeclare scope ($USEparentProtoName=, $DEFparentProtoName=DoubleMixedDeclaration) </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ExternProtoDeclare"/>
   <svrl:successful-report test="(@url) and contains(@url,'#') and not(contains(@url,concat('#',$name)))"
                           role="info"
                           location="/X3D/Scene/ExternProtoDeclare[3]">
      <svrl:text>&lt;ExternProtoDeclare name="DoubleMixedDeclaration"/&gt; url array references remote prototype name different from #DoubleMixedDeclaration</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:failed-assert test="$doubleDeclaration"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[2]">
      <svrl:text>&lt;ProtoInstance DEF="DoubleDeclaration2" USE="" name="DoubleMixedDeclaration"/&gt; has both ProtoDeclare and ExternProtoDeclare with same name </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:failed-assert test="not(@name) or not($protoFound) or //ProtoDeclare[@name=$prototypeName]/ProtoInterface/field[@name=$fieldValueName]"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[2]/fieldValue[1]">
      <svrl:text>&lt;ProtoInstance name='DoubleMixedDeclaration' DEF='DoubleDeclaration2'&gt; &lt;fieldValue name='duplicatedFieldValueName'/&gt; has no matching &lt;field name='duplicatedFieldValueName'/&gt; in corresponding &lt;ProtoDeclare/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="not(@name) or not($externProtoFound) or //ExternProtoDeclare[@name=$prototypeName]/field[@name=$fieldValueName]"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[2]/fieldValue[1]">
      <svrl:text>&lt;ProtoInstance name='DoubleMixedDeclaration' DEF='DoubleDeclaration2'&gt; &lt;fieldValue name='duplicatedFieldValueName'/&gt; has no matching &lt;field name='duplicatedFieldValueName'/&gt; in corresponding &lt;ExternProtoDeclare/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="$protoFound and not( $protoFieldFound)"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[2]/fieldValue[1]">
      <svrl:text>&lt;ProtoInstance name='DoubleMixedDeclaration' DEF='DoubleDeclaration2'&gt; &lt;fieldValue name='duplicatedFieldValueName' value='blah'/&gt; has matching ProtoDeclare with same name, but no corresponding field match for this fieldValue name='DoubleMixedDeclaration' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$externProtoFound and not($externProtoFieldFound)"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[2]/fieldValue[1]">
      <svrl:text>&lt;ProtoInstance name='DoubleMixedDeclaration' DEF='DoubleDeclaration2'&gt; &lt;fieldValue name='duplicatedFieldValueName' value='blah'/&gt; has matching ExternProtoDeclare with same name, but no corresponding field match for this fieldValue name='DoubleMixedDeclaration' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:failed-assert test="boolean(parent::ProtoInstance) and (string-length(@value) gt 0) or (count(*) gt 0) or ($type='SFString') or starts-with($type,'MF')"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[2]/fieldValue[2]">
      <svrl:text>&lt;ProtoInstance DEF='DoubleDeclaration2' name='DoubleMixedDeclaration'&gt; &lt;fieldValue name='duplicatedFieldValueName'/&gt; fieldValue with corresponding type='' must have initialization value </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="count(preceding-sibling::*[@name=$fieldValueName])=0"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[2]/fieldValue[2]">
      <svrl:text>&lt;ProtoInstance name='DoubleMixedDeclaration' DEF='DoubleDeclaration2'&gt; has duplicate fieldValue declarations with the same name defined &lt;fieldValue name='duplicatedFieldValueName'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="not(@name) or not($protoFound) or //ProtoDeclare[@name=$prototypeName]/ProtoInterface/field[@name=$fieldValueName]"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[2]/fieldValue[2]">
      <svrl:text>&lt;ProtoInstance name='DoubleMixedDeclaration' DEF='DoubleDeclaration2'&gt; &lt;fieldValue name='duplicatedFieldValueName'/&gt; has no matching &lt;field name='duplicatedFieldValueName'/&gt; in corresponding &lt;ProtoDeclare/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="not(@name) or not($externProtoFound) or //ExternProtoDeclare[@name=$prototypeName]/field[@name=$fieldValueName]"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[2]/fieldValue[2]">
      <svrl:text>&lt;ProtoInstance name='DoubleMixedDeclaration' DEF='DoubleDeclaration2'&gt; &lt;fieldValue name='duplicatedFieldValueName'/&gt; has no matching &lt;field name='duplicatedFieldValueName'/&gt; in corresponding &lt;ExternProtoDeclare/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="$protoFound and not( $protoFieldFound)"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[2]/fieldValue[2]">
      <svrl:text>&lt;ProtoInstance name='DoubleMixedDeclaration' DEF='DoubleDeclaration2'&gt; &lt;fieldValue name='duplicatedFieldValueName' value=''/&gt; has matching ProtoDeclare with same name, but no corresponding field match for this fieldValue name='DoubleMixedDeclaration' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$externProtoFound and not($externProtoFieldFound)"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[2]/fieldValue[2]">
      <svrl:text>&lt;ProtoInstance name='DoubleMixedDeclaration' DEF='DoubleDeclaration2'&gt; &lt;fieldValue name='duplicatedFieldValueName' value=''/&gt; has matching ExternProtoDeclare with same name, but no corresponding field match for this fieldValue name='DoubleMixedDeclaration' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:failed-assert test="boolean(parent::ProtoInstance) and (string-length(@name) gt 0)"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[2]/fieldValue[3]">
      <svrl:text>fieldValue must have name defined for &lt;ProtoInstance&gt; &lt;fieldValue value='noName'&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="$protoFound and not( $protoFieldFound)"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[2]/fieldValue[3]">
      <svrl:text>&lt;ProtoInstance name='DoubleMixedDeclaration' DEF='DoubleDeclaration2'&gt; &lt;fieldValue name='' value='noName'/&gt; has matching ProtoDeclare with same name, but no corresponding field match for this fieldValue name='DoubleMixedDeclaration' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$externProtoFound and not($externProtoFieldFound)"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[2]/fieldValue[3]">
      <svrl:text>&lt;ProtoInstance name='DoubleMixedDeclaration' DEF='DoubleDeclaration2'&gt; &lt;fieldValue name='' value='noName'/&gt; has matching ExternProtoDeclare with same name, but no corresponding field match for this fieldValue name='DoubleMixedDeclaration' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ProtoDeclare"/>
   <svrl:failed-assert test="ProtoBody" role="error" location="/X3D/Scene/ProtoDeclare[3]">
      <svrl:text>&lt;ProtoDeclare name="DoubleProtoDeclaration"/&gt; must include ProtoBody </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="//ProtoInstance and not(//ProtoInstance[@name=$name])"
                           role="warning"
                           location="/X3D/Scene/ProtoDeclare[3]">
      <svrl:text>&lt;ProtoDeclare name="DoubleProtoDeclaration"/&gt; has no corresponding &lt;ProtoInstance name='DoubleProtoDeclaration'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ProtoDeclare"/>
   <svrl:failed-assert test="ProtoBody" role="error" location="/X3D/Scene/ProtoDeclare[4]">
      <svrl:text>&lt;ProtoDeclare name="DoubleProtoDeclaration"/&gt; must include ProtoBody </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="//ProtoInstance and not(//ProtoInstance[@name=$name])"
                           role="warning"
                           location="/X3D/Scene/ProtoDeclare[4]">
      <svrl:text>&lt;ProtoDeclare name="DoubleProtoDeclaration"/&gt; has no corresponding &lt;ProtoInstance name='DoubleProtoDeclaration'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$priorProtoFound"
                           role="error"
                           location="/X3D/Scene/ProtoDeclare[4]">
      <svrl:text>&lt;ProtoDeclare name="DoubleProtoDeclaration"/&gt; has multiple ProtoDeclare definitions with same name </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ExternProtoDeclare"/>
   <svrl:failed-assert test="//ProtoInstance[@name=$name]"
                       role="warning"
                       location="/X3D/Scene/ExternProtoDeclare[4]">
      <svrl:text>&lt;ExternProtoDeclare name="DoubleDeclarationUrlMissingPoundProtoName"/&gt; has no corresponding ProtoInstance </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(@url) and not(contains(@url,'#'))"
                           role="warning"
                           location="/X3D/Scene/ExternProtoDeclare[4]">
      <svrl:text>&lt;ExternProtoDeclare name="DoubleDeclarationUrlMissingPoundProtoName"/&gt; url array address(es) missing #DoubleDeclarationUrlMissingPoundProtoName appended </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains(@url,':///')"
                           role="warning"
                           location="/X3D/Scene/ExternProtoDeclare[4]">
      <svrl:text>&lt;ExternProtoDeclare name="DoubleDeclarationUrlMissingPoundProtoName"/&gt; url array contains triple forward-slash :/// characters </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ExternProtoDeclare"/>
   <svrl:failed-assert test="//ProtoInstance[@name=$name]"
                       role="warning"
                       location="/X3D/Scene/ExternProtoDeclare[5]">
      <svrl:text>&lt;ExternProtoDeclare name="DoubleDeclarationUrlMissingPoundProtoName"/&gt; has no corresponding ProtoInstance </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="$priorExternProtoNameFound"
                           role="error"
                           location="/X3D/Scene/ExternProtoDeclare[5]">
      <svrl:text>&lt;ExternProtoDeclare name="DoubleDeclarationUrlMissingPoundProtoName"/&gt; has multiple ExternProtoDeclare declarations with same name </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@url) and not(contains(@url,'#'))"
                           role="warning"
                           location="/X3D/Scene/ExternProtoDeclare[5]">
      <svrl:text>&lt;ExternProtoDeclare name="DoubleDeclarationUrlMissingPoundProtoName"/&gt; url array address(es) missing #DoubleDeclarationUrlMissingPoundProtoName appended </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains(@url,'http:/') and not(contains(@url,'http://'))"
                           role="warning"
                           location="/X3D/Scene/ExternProtoDeclare[5]">
      <svrl:text>&lt;ExternProtoDeclare name="DoubleDeclarationUrlMissingPoundProtoName"/&gt; url array contains http:/ rather than http:// (url='"http:/bogus" "https://www.web3d.org/x3d/content/examples/Basic/development/http:/bogus"') </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ProtoDeclare"/>
   <svrl:successful-report test="//ProtoInstance and not(//ProtoInstance[@name=$name])"
                           role="warning"
                           location="/X3D/Scene/ProtoDeclare[5]">
      <svrl:text>&lt;ProtoDeclare name="EmptyProtoInterfaceEmptyProtoBody"/&gt; has no corresponding &lt;ProtoInstance name='EmptyProtoInterfaceEmptyProtoBody'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ProtoInterface"/>
   <svrl:failed-assert test="*"
                       role="error"
                       location="/X3D/Scene/ProtoDeclare[5]/ProtoInterface">
      <svrl:text>&lt;ProtoDeclare name='EmptyProtoInterfaceEmptyProtoBody'&gt; ProtoInterface, if used, must contain one or more field declarations </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ProtoBody"/>
   <svrl:failed-assert test="node()"
                       role="error"
                       location="/X3D/Scene/ProtoDeclare[5]/ProtoBody">
      <svrl:text>&lt;ProtoDeclare name='EmptyProtoInterfaceEmptyProtoBody'&gt; ProtoBody must contain at least one node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ProtoDeclare"/>
   <svrl:successful-report test="//ProtoInstance and not(//ProtoInstance[@name=$name])"
                           role="warning"
                           location="/X3D/Scene/ProtoDeclare[6]">
      <svrl:text>&lt;ProtoDeclare name="IllegalProtoInterface"/&gt; has no corresponding &lt;ProtoInstance name='IllegalProtoInterface'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ProtoInterface"/>
   <svrl:failed-assert test="count(*)=count(field)"
                       role="error"
                       location="/X3D/Scene/ProtoDeclare[6]/ProtoInterface">
      <svrl:text>&lt;ProtoDeclare name='IllegalProtoInterface'&gt; ProtoInterface can only contain field declarations or comments </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Group"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/ProtoDeclare[6]/ProtoInterface/Group">
      <svrl:text>&lt;Group DEF='OnlyFieldDeclarationsAllowedInProtoInterface'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ProtoBody"/>
   <svrl:fired-rule context="Group"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/ProtoDeclare[6]/ProtoBody/Group">
      <svrl:text>&lt;Group DEF=''/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ExternProtoDeclare"/>
   <svrl:successful-report test="(@url) and not(contains(@url,'#'))"
                           role="warning"
                           location="/X3D/Scene/ExternProtoDeclare[6]">
      <svrl:text>&lt;ExternProtoDeclare name="ExternProtoDeclareBeforeInstance"/&gt; url array address(es) missing #ExternProtoDeclareBeforeInstance appended </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:successful-report test="$declarationFound and not($protoFound) and $externProtoFound and not($precedingExternProtoFound)"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[4]">
      <svrl:text>&lt;ProtoInstance DEF="" USE="" name="ExternProtoDeclareAfterInstance"/&gt; precedes &lt;ExternProtoDeclare name='ExternProtoDeclareAfterInstance</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ExternProtoDeclare"/>
   <svrl:successful-report test="(@url) and not(contains(@url,'#'))"
                           role="warning"
                           location="/X3D/Scene/ExternProtoDeclare[7]">
      <svrl:text>&lt;ExternProtoDeclare name="ExternProtoDeclareAfterInstance"/&gt; url array address(es) missing #ExternProtoDeclareAfterInstance appended </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ProtoDeclare"/>
   <svrl:fired-rule context="ProtoBody"/>
   <svrl:fired-rule context="Group"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/ProtoDeclare[7]/ProtoBody/Group">
      <svrl:text>&lt;Group DEF=''/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:successful-report test="$declarationFound and not($externProtoFound) and $protoFound and not($precedingProtoFound)"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[6]">
      <svrl:text>&lt;ProtoInstance DEF="" USE="" name="ProtoDeclareAfterInstance"/&gt; precedes &lt;ProtoDeclare name='ProtoDeclareAfterInstance</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ProtoDeclare"/>
   <svrl:fired-rule context="ProtoBody"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:failed-assert test="boolean(ancestor::ProtoDeclare/ProtoInterface/field[@name = $protoField])"
                       role="error"
                       location="/X3D/Scene/ProtoDeclare[8]/ProtoBody/Group/IS/connect">
      <svrl:text>Not finding connect protoField: &lt;IS&gt; &lt;connect nodeField='danglingConnectNodeField' protoField='danglingConnectProtoField'/&gt; does not have a corresponding protoField declaration &lt;ProtoDeclare name='ProtoDeclareAfterInstance'&gt; &lt;ProtoInterface&gt; &lt;field name='danglingConnectProtoField'&gt;</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:failed-assert test="ancestor::ProtoDeclare"
                       role="error"
                       location="/X3D/Scene/Group[1]/IS">
      <svrl:text>&lt;Group DEF='ContainsISchildButNoParentProtoDeclare'&gt; &lt;IS/&gt; must have ancestor::ProtoDeclare </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:successful-report test="not(ancestor::ProtoBody)"
                           role="error"
                           location="/X3D/Scene/Group[1]/IS/connect">
      <svrl:text>&lt;connect nodeField='isolatedConnectNodeField' protoField='isolatedConnectProtoField'/&gt; is not within a ProtoBody </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(ancestor::ProtoDeclare)"
                           role="error"
                           location="/X3D/Scene/Group[1]/IS/connect">
      <svrl:text>&lt;connect nodeField='isolatedConnectNodeField' protoField='isolatedConnectProtoField'/&gt; is not within a ProtoDeclare </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="boolean(ancestor::ProtoDeclare/ProtoInterface/field[@name = $protoField])"
                       role="error"
                       location="/X3D/Scene/Group[1]/IS/connect">
      <svrl:text>Not finding connect protoField: &lt;IS&gt; &lt;connect nodeField='isolatedConnectNodeField' protoField='isolatedConnectProtoField'/&gt; does not have a corresponding protoField declaration &lt;ProtoDeclare name=''&gt; &lt;ProtoInterface&gt; &lt;field name='isolatedConnectProtoField'&gt;</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="string-length($bboxCenterResidue) = 0"
                       role="error"
                       location="/X3D/Scene/Shape[9]">
      <svrl:text>&lt;Shape DEF='BadBoundingBoxValues'/&gt; has illegal character abc in bboxCenter field </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="($bboxSize = '-1 -1 -1') or ($bboxSize = '-1. -1. -1.') or ($bboxSize = '-1.0 -1.0 -1.0') or ($bboxSize = '-1E0 -1E0 -1E0') or ($bboxSize = '-1.0E0 -1.0E0 -1.0E0') or not(contains($bboxSize,'-')) or contains($bboxSize,'E-')"
                       role="error"
                       location="/X3D/Scene/Shape[9]">
      <svrl:text>&lt;Shape DEF='BadBoundingBoxValues'/&gt; bboxSize='-1 -2 -3' must not include negative values unless using sentinel value '-1 -1 -1' (which indicates that no bounding box hint provided, X3D player can compute value)</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Extrusion"/>
   <svrl:failed-assert test="(($crossSectionCount mod 2) = 0)"
                       role="warning"
                       location="/X3D/Scene/Shape[9]/Extrusion">
      <svrl:text>&lt;Extrusion DEF='ExtrusionCrossSectionMiscountSpineMismatchCrossSectionMiscount'/&gt; crossSection array size 1.5 does not have legal number of MFVec2f values, must be evenly divisible by 2 (crossSection='1 2 3') </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="($scaleCount = 0) or ($scaleCount = 2) or (($scaleCount div 2) = ($spineCount div 3))"
                       role="warning"
                       location="/X3D/Scene/Shape[9]/Extrusion">
      <svrl:text>&lt;Extrusion DEF='ExtrusionCrossSectionMiscountSpineMismatchCrossSectionMiscount'/&gt; scale array size 6 (scale='1 1 1 1 1 1 1 1 1 1 1 1') must match spine array size 2</svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="($orientationCount = 0) or ($orientationCount = 4) or (($orientationCount div 4) = ($spineCount div 3))"
                       role="warning"
                       location="/X3D/Scene/Shape[9]/Extrusion">
      <svrl:text>&lt;Extrusion DEF='ExtrusionCrossSectionMiscountSpineMismatchCrossSectionMiscount'/&gt; orientation array size 3 (orientation='0 0 1 0 0 0 1 0 0 0 1 0') must match spine array size 2</svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Geometry3D'][number(@level) ge 4] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/Shape[9]/Extrusion">
      <svrl:text>&lt;Extrusion DEF='ExtrusionCrossSectionMiscountSpineMismatchCrossSectionMiscount'/&gt; requires at least &lt;component name='Geometry3D' level='4'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Appearance"/>
   <svrl:failed-assert test="(($DEF!='AS') and ($DEF!='component') and ($DEF!='DEF') and ($DEF!='EXPORT') and ($DEF!='FALSE') and ($DEF!='false') and ($DEF!='') and ($DEF!='head') and ($DEF!='IMPORT') and ($DEF!='initializeOnly') and ($DEF!='inputOnly') and ($DEF!='outputOnly') and ($DEF!='inputOutput') and ($DEF!='IS') and ($DEF!='meta') and ($DEF!='NULL') and ($DEF!='PROTO') and ($DEF!='ROUTE') and ($DEF!='Scene') and ($DEF!='TO') and ($DEF!='TRUE') and ($DEF!='true') and ($DEF!='USE') and ($DEF!='X3D')) or not(@DEF)"
                       role="error"
                       location="/X3D/Scene/Shape[9]/Appearance">
      <svrl:text>&lt;Appearance DEF='DEF'/&gt; has DEF name that illegally overrides a reserved word from the X3D Specification </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="TwoSidedMaterial"/>
   <svrl:failed-assert test="(/X3D/@version='3.2') or (/X3D/@version='3.3') or (/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/Scene/Shape[9]/Appearance/TwoSidedMaterial">
      <svrl:text>&lt;TwoSidedMaterial DEF='separateBackColorWrong'/&gt; requires X3D version='3.2' or greater, but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Shape'][number(@level) ge 4]) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/Shape[9]/Appearance/TwoSidedMaterial">
      <svrl:text>&lt;TwoSidedMaterial DEF='separateBackColorWrong'/&gt; requires at least &lt;component name='Shape' level='4'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(@separateBackColor='true') or ((@backDiffuseColor='' or @backDiffuseColor ='0.8 0.8 0.8') and (@backEmissiveColor='' or @backEmissiveColor='0.8 0.8 0.8') and (@backSpecularColor='' or @backSpecularColor ='0.8 0.8 0.8') and (@backAmbientIntensity='' or @backAmbientIntensity='0.2') and (@backTransparency='' or @backTransparency='0.0' or @backTransparency='0') and (@backShininess='' or @backShininess='0.2'))"
                       role="warning"
                       location="/X3D/Scene/Shape[9]/Appearance/TwoSidedMaterial">
      <svrl:text>&lt;TwoSidedMaterial DEF='separateBackColorWrong'/&gt; needs separateBackColor='true' or else the provided backside Material values are ignored </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:successful-report test="contains(@fromField,'set_')"
                           role="error"
                           location="/X3D/Scene/ROUTE[4]">
      <svrl:text>&lt;ROUTE fromNode='blah' fromField='set_blah' toNode='bleah' toField='bleah_changed'/&gt; should not have 'set_' in event-source fromField name </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(//*[@DEF=$fromNode])"
                           role="error"
                           location="/X3D/Scene/ROUTE[4]">
      <svrl:text>&lt;ROUTE fromNode='blah' fromField='set_blah' toNode='bleah' toField='bleah_changed'/&gt; has no corresponding fromNode with DEF='blah' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(//*[@DEF=$toNode ])"
                           role="error"
                           location="/X3D/Scene/ROUTE[4]">
      <svrl:text>&lt;ROUTE fromNode='blah' fromField='set_blah' toNode='bleah' toField='bleah_changed'/&gt; has no corresponding toNode with DEF='bleah' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:successful-report test="(preceding-sibling::HAnimHumanoid or following-sibling::HAnimHumanoid) and (not(@centerOfRotation) or (string-length(@centerOfRotation)=0) or (@centerOfRotation = '0 0 0') or (@centerOfRotation = '0.0 0.0 0.0'))"
                           role="warning"
                           location="/X3D/Scene/Viewpoint[1]">
      <svrl:text>&lt;Viewpoint DEF='OKviewpoint'/&gt; centerOfRotation='0 0 0', consider setting centerOfRotation to value of sibling &lt;HAnimHumanoid DEF='OKviewpoint' name='HumanoidRoot' center='0 0 0 0 0 0'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:failed-assert test="not(@description = @DEF) or (string-length(@description) = 0)"
                       role="hint"
                       location="/X3D/Scene/Viewpoint[2]">
      <svrl:text>&lt;Viewpoint DEF='DEFdescriptionMatch'/&gt; description should be different than DEF, provide a descriptive phrase for description instead </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(preceding-sibling::HAnimHumanoid or following-sibling::HAnimHumanoid) and (not(@centerOfRotation) or (string-length(@centerOfRotation)=0) or (@centerOfRotation = '0 0 0') or (@centerOfRotation = '0.0 0.0 0.0'))"
                           role="warning"
                           location="/X3D/Scene/Viewpoint[2]">
      <svrl:text>&lt;Viewpoint DEF='DEFdescriptionMatch'/&gt; centerOfRotation='0 0 0', consider setting centerOfRotation to value of sibling &lt;HAnimHumanoid DEF='DEFdescriptionMatch' name='HumanoidRoot' center='0 0 0 0 0 0'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:failed-assert test="contains(@description,' ') or (string-length(@description) &lt; 14) or (@description = @DEF) or contains(//meta[@name='title']/@content, @description) or ((local-name() ='Anchor') and contains(@url,@description))"
                       role="hint"
                       location="/X3D/Scene/OrthoViewpoint">
      <svrl:text>&lt;OrthoViewpoint DEF='NoSpacesInDescription'/&gt; description='NeedToPutSpacesInDescription' can include space characters in description </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(local-name()='OrthoViewpoint') and not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Navigation'][number(@level) ge 3])) or (count(preceding::*[local-name()='OrthoViewpoint']) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/OrthoViewpoint">
      <svrl:text>&lt;OrthoViewpoint DEF='NoSpacesInDescription'/&gt; requires at least &lt;component name='Navigation' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(preceding-sibling::HAnimHumanoid or following-sibling::HAnimHumanoid) and (not(@centerOfRotation) or (string-length(@centerOfRotation)=0) or (@centerOfRotation = '0 0 0') or (@centerOfRotation = '0.0 0.0 0.0'))"
                           role="warning"
                           location="/X3D/Scene/OrthoViewpoint">
      <svrl:text>&lt;OrthoViewpoint DEF='NoSpacesInDescription'/&gt; centerOfRotation='', consider setting centerOfRotation to value of sibling &lt;HAnimHumanoid DEF='NoSpacesInDescription' name='HumanoidRoot' center='0 0 0 0 0 0'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(local-name()='OrthoViewpoint') and not(/X3D[ (@profile='Full')] or /X3D/head/component[@name='Navigation'][number(@level) ge 3] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/OrthoViewpoint">
      <svrl:text>&lt;OrthoViewpoint DEF='NoSpacesInDescription'/&gt; requires at least &lt;component name='Navigation' level='3'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[@name='Geospatial'][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/GeoViewpoint">
      <svrl:text>&lt;GeoViewpoint DEF='IllegalFields'/&gt; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='Geospatial' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="GeoMetadata"/>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[@name='Geospatial'][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/GeoMetadata">
      <svrl:text>&lt;GeoMetadata DEF='BadChild'/&gt; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='Geospatial' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="starts-with(local-name(..),'Geo') or starts-with(local-name(..),'field')"
                       role="error"
                       location="/X3D/Scene/GeoMetadata">
      <svrl:text>&lt;GeoMetadata DEF='BadChild'/&gt; parent Scene is not a geospatial node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="*[(@containerField='metadata') or (@containerField='data')]"
                       role="error"
                       location="/X3D/Scene/GeoMetadata">
      <svrl:text>&lt;GeoMetadata DEF='BadChild'/&gt; contains node &lt;GeoViewpoint DEF='BadContainerField'/&gt; with incorrect containerField (allowed values are 'metadata' and 'data') </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="GeoViewpoint"/>
   <svrl:fired-rule context="ProtoDeclare"/>
   <svrl:failed-assert test="((@name!='AS') and (@name!='component') and (@name!='DEF') and (@name!='EXPORT') and (@name!='FALSE') and (@name!='false') and (@name!='') and (@name!='head') and (@name!='IMPORT') and (@name!='initializeOnly') and (@name!='inputOnly') and (@name!='outputOnly') and (@name!='inputOutput') and (@name!='IS') and (@name!='meta') and (@name!='NULL') and (@name!='PROTO') and (@name!='ROUTE') and (@name!='Scene') and (@name!='TO') and (@name!='TRUE') and (@name!='true') and (@name!='USE') and (@name!='X3D'))"
                       role="error"
                       location="/X3D/Scene/ProtoDeclare[9]">
      <svrl:text>&lt;ProtoDeclare name='X3D' DEF=''/&gt; has name that illegally overrides a reserved word from the X3D Specification </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ProtoBody"/>
   <svrl:fired-rule context="Group"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/ProtoDeclare[9]/ProtoBody/Group">
      <svrl:text>&lt;Group DEF='PrototypeRootNode'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ExternProtoDeclare"/>
   <svrl:failed-assert test="((@name!='AS') and (@name!='component') and (@name!='DEF') and (@name!='EXPORT') and (@name!='FALSE') and (@name!='false') and (@name!='') and (@name!='head') and (@name!='IMPORT') and (@name!='initializeOnly') and (@name!='inputOnly') and (@name!='outputOnly') and (@name!='inputOutput') and (@name!='IS') and (@name!='meta') and (@name!='NULL') and (@name!='PROTO') and (@name!='ROUTE') and (@name!='Scene') and (@name!='TO') and (@name!='TRUE') and (@name!='true') and (@name!='USE') and (@name!='X3D'))"
                       role="error"
                       location="/X3D/Scene/ExternProtoDeclare[8]">
      <svrl:text>&lt;ExternProtoDeclare name='X3D' DEF=''/&gt; has name that illegally overrides a reserved word from the X3D Specification </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="@url"
                       role="error"
                       location="/X3D/Scene/ExternProtoDeclare[8]">
      <svrl:text>&lt;ExternProtoDeclare name="X3D"/&gt; must contain url array address(es) to find external prototype declaration </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="@url"
                       role="warning"
                       location="/X3D/Scene/ExternProtoDeclare[8]">
      <svrl:text>&lt;ExternProtoDeclare name="X3D"/&gt; author warning: url correctness cannot be checked by X3D Schematron, be sure to confirm correct reference to external file! </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:failed-assert test="not(@name) or ((@name!='AS') and (@name!='component') and (@name!='DEF') and (@name!='EXPORT') and (@name!='FALSE') and (@name!='false') and (@name!='') and (@name!='head') and (@name!='IMPORT') and (@name!='initializeOnly') and (@name!='inputOnly') and (@name!='outputOnly') and (@name!='inputOutput') and (@name!='IS') and (@name!='meta') and (@name!='NULL') and (@name!='PROTO') and (@name!='ROUTE') and (@name!='Scene') and (@name!='TO') and (@name!='TRUE') and (@name!='true') and (@name!='USE') and (@name!='X3D'))"
                       role="error"
                       location="/X3D/Scene/ExternProtoDeclare[8]/field">
      <svrl:text>&lt;ExternProtoDeclare name="X3D" DEF=""&gt; &lt;field name="X3D"/&gt; has name that illegally overrides a reserved word from the X3D Specification </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:failed-assert test="$doubleDeclaration"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[7]">
      <svrl:text>&lt;ProtoInstance DEF="BadNameBadFieldValueNameMissingInitialization" USE="" name="X3D"/&gt; has both ProtoDeclare and ExternProtoDeclare with same name </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:failed-assert test="not(@name) or ((@name!='AS') and (@name!='component') and (@name!='DEF') and (@name!='EXPORT') and (@name!='FALSE') and (@name!='false') and (@name!='') and (@name!='head') and (@name!='IMPORT') and (@name!='initializeOnly') and (@name!='inputOnly') and (@name!='outputOnly') and (@name!='inputOutput') and (@name!='IS') and (@name!='meta') and (@name!='NULL') and (@name!='PROTO') and (@name!='ROUTE') and (@name!='Scene') and (@name!='TO') and (@name!='TRUE') and (@name!='true') and (@name!='USE') and (@name!='X3D'))"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[7]/fieldValue">
      <svrl:text>&lt;ProtoInstance name="X3D" DEF="BadNameBadFieldValueNameMissingInitialization"&gt; &lt;fieldValue name="X3D"/&gt; has name that illegally overrides a reserved word from the X3D Specification </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="boolean(parent::ProtoInstance) and (string-length(@value) gt 0) or (count(*) gt 0) or ($type='SFString') or starts-with($type,'MF')"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[7]/fieldValue">
      <svrl:text>&lt;ProtoInstance DEF='BadNameBadFieldValueNameMissingInitialization' name='X3D'&gt; &lt;fieldValue name='X3D'/&gt; fieldValue with corresponding type='SFBool' must have initialization value </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="not(@name) or not($protoFound) or //ProtoDeclare[@name=$prototypeName]/ProtoInterface/field[@name=$fieldValueName]"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[7]/fieldValue">
      <svrl:text>&lt;ProtoInstance name='X3D' DEF='BadNameBadFieldValueNameMissingInitialization'&gt; &lt;fieldValue name='X3D'/&gt; has no matching &lt;field name='X3D'/&gt; in corresponding &lt;ProtoDeclare/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="$inputOutputOnly"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[7]/fieldValue">
      <svrl:text>&lt;ProtoInstance name='X3D' DEF='BadNameBadFieldValueNameMissingInitialization'&gt; &lt;fieldValue name='X3D'/&gt; initialization not allowed for accessType inputOnly/outputOnly </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="($type='SFBool') and not(@value='true' or @value='false')"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[7]/fieldValue">
      <svrl:text>&lt;ProtoInstance name='X3D' DEF='BadNameBadFieldValueNameMissingInitialization'&gt; &lt;fieldValue name='X3D' type='' accessType='' value=''/&gt; SFBool field must have value='true' or value='false' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$protoFound and not( $protoFieldFound)"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[7]/fieldValue">
      <svrl:text>&lt;ProtoInstance name='X3D' DEF='BadNameBadFieldValueNameMissingInitialization'&gt; &lt;fieldValue name='X3D' value=''/&gt; has matching ProtoDeclare with same name, but no corresponding field match for this fieldValue name='X3D' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:failed-assert test="$doubleDeclaration"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[8]">
      <svrl:text>&lt;ProtoInstance DEF="" USE="" name="X3D"/&gt; has both ProtoDeclare and ExternProtoDeclare with same name </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:failed-assert test="not(@name) or ((@name!='AS') and (@name!='component') and (@name!='DEF') and (@name!='EXPORT') and (@name!='FALSE') and (@name!='false') and (@name!='') and (@name!='head') and (@name!='IMPORT') and (@name!='initializeOnly') and (@name!='inputOnly') and (@name!='outputOnly') and (@name!='inputOutput') and (@name!='IS') and (@name!='meta') and (@name!='NULL') and (@name!='PROTO') and (@name!='ROUTE') and (@name!='Scene') and (@name!='TO') and (@name!='TRUE') and (@name!='true') and (@name!='USE') and (@name!='X3D'))"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[8]/fieldValue">
      <svrl:text>&lt;ProtoInstance name="X3D" DEF=""&gt; &lt;fieldValue name="X3D"/&gt; has name that illegally overrides a reserved word from the X3D Specification </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="not(@name) or not($protoFound) or //ProtoDeclare[@name=$prototypeName]/ProtoInterface/field[@name=$fieldValueName]"
                       role="error"
                       location="/X3D/Scene/ProtoInstance[8]/fieldValue">
      <svrl:text>&lt;ProtoInstance name='X3D' DEF=''&gt; &lt;fieldValue name='X3D'/&gt; has no matching &lt;field name='X3D'/&gt; in corresponding &lt;ProtoDeclare/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="@value and *"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[8]/fieldValue">
      <svrl:text>&lt;ProtoInstance name='X3D' name='X3D'/&gt; cannot have both attribute value='doubleInitialization' and contained node content </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$inputOutputOnly"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[8]/fieldValue">
      <svrl:text>&lt;ProtoInstance name='X3D' DEF=''&gt; &lt;fieldValue name='X3D'/&gt; initialization not allowed for accessType inputOnly/outputOnly </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="($type='SFBool') and not(@value='true' or @value='false')"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[8]/fieldValue">
      <svrl:text>&lt;ProtoInstance name='X3D' DEF=''&gt; &lt;fieldValue name='X3D' type='' accessType='' value='doubleInitialization'/&gt; SFBool field must have value='true' or value='false' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$protoFound and not( $protoFieldFound)"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[8]/fieldValue">
      <svrl:text>&lt;ProtoInstance name='X3D' DEF=''&gt; &lt;fieldValue name='X3D' value='doubleInitialization'/&gt; has matching ProtoDeclare with same name, but no corresponding field match for this fieldValue name='X3D' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/ProtoInstance[8]/fieldValue/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))"
                       role="warning"
                       location="/X3D/Scene/ProtoInstance[8]/fieldValue/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="LOD"/>
   <svrl:successful-report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Navigation'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/LOD">
      <svrl:text>&lt;LOD DEF=''/&gt; requires at least &lt;component name='Navigation' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Background"/>
   <svrl:successful-report test="(ancestor::LOD) and not(ends-with(local-name(),'Viewpoint'))"
                           role="error"
                           location="/X3D/Scene/LOD/Background">
      <svrl:text>&lt;Background DEF='BackgroundWithParentLOD'/&gt; description='' behavior not guaranteed as child (or descendant) of LOD node, avoid this design pattern </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Fog"/>
   <svrl:successful-report test="(ancestor::LOD) and not(ends-with(local-name(),'Viewpoint'))"
                           role="error"
                           location="/X3D/Scene/LOD/Fog">
      <svrl:text>&lt;Fog DEF='FogWithParentLOD'/&gt; description='' behavior not guaranteed as child (or descendant) of LOD node, avoid this design pattern </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='EnvironmentalEffects'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/LOD/Fog">
      <svrl:text>&lt;Fog DEF='FogWithParentLOD'/&gt; requires at least &lt;component name='EnvironmentalEffects' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="NavigationInfo"/>
   <svrl:successful-report test="(ancestor::LOD) and not(ends-with(local-name(),'Viewpoint'))"
                           role="error"
                           location="/X3D/Scene/LOD/NavigationInfo">
      <svrl:text>&lt;NavigationInfo DEF='NavigationInfoWithParentLOD'/&gt; description='' behavior not guaranteed as child (or descendant) of LOD node, avoid this design pattern </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(/X3D[(@profile='Interchange') or (@profile='Interactive') or (@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Navigation'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/LOD/NavigationInfo">
      <svrl:text>&lt;NavigationInfo DEF='NavigationInfoWithParentLOD'/&gt; requires at least &lt;component name='Navigation' level='1'/&gt; or &lt;X3D profile='Interchange'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:successful-report test="(ancestor::LOD) and ends-with(local-name(),'Viewpoint')"
                           role="error"
                           location="/X3D/Scene/LOD/Viewpoint">
      <svrl:text>&lt;Viewpoint DEF='ViewpointWithParentLOD'/&gt; description='' behavior not guaranteed as child (or descendant) of LOD node, avoid this design pattern or use ViewpointGroup instead of LOD </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains(local-name(),'Viewpoint') and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))"
                           role="warning"
                           location="/X3D/Scene/LOD/Viewpoint">
      <svrl:text>&lt;Viewpoint DEF='ViewpointWithParentLOD'/&gt; is missing description which is important for accessibility and usability.  Example: description='initial view, rotate to examine object' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(local-name()='OrthoViewpoint') and not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Navigation'][number(@level) ge 3])) or (count(preceding::*[local-name()='OrthoViewpoint']) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/LOD/Viewpoint">
      <svrl:text>&lt;Viewpoint DEF='ViewpointWithParentLOD'/&gt; requires at least &lt;component name='Navigation' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ViewpointGroup"/>
   <svrl:failed-assert test="(/X3D/@version='3.2') or (/X3D/@version='3.3') or (/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/Scene/ViewpointGroup">
      <svrl:text>&lt;ViewpointGroup DEF='IllegalViewpointGroupChild'/&gt; requires X3D version='3.2' or greater, but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="contains(local-name(),'Viewpoint') and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))"
                           role="warning"
                           location="/X3D/Scene/ViewpointGroup">
      <svrl:text>&lt;ViewpointGroup DEF='IllegalViewpointGroupChild'/&gt; is missing description which is important for accessibility and usability.  Example: description='initial view, rotate to examine object' </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="not(*) or *[(local-name()='Viewpoint') or (local-name()='ViewpointGroup') or (local-name()='ProtoInstance') or (local-name()='IS') or starts-with(local-name(),'Metadata')]"
                       role="error"
                       location="/X3D/Scene/ViewpointGroup">
      <svrl:text>&lt;ViewpointGroup DEF='IllegalViewpointGroupChild'/&gt; can only contain Viewpoint, ViewpointGroup, ProtoInstance or Metadata nodes </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((/X3D[@profile='Full']) or (/X3D/head/component[@name='Navigation'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/ViewpointGroup">
      <svrl:text>ViewpointGroup requires at least &lt;component name='Navigation' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Transform"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/ViewpointGroup/Transform">
      <svrl:text>&lt;Transform DEF=''/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="PixelTexture"/>
   <svrl:successful-report test="not(@USE) and ($defaultImage)"
                           role="warning"
                           location="/X3D/Scene/Shape[10]/Appearance/PixelTexture">
      <svrl:text>&lt;PixelTexture DEF='NoImageData' image='0 0 0'/&gt; has empty or default image array values </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="PixelTexture"/>
   <svrl:failed-assert test="not(@image) or $defaultImage or ($height ge 0)"
                       role="error"
                       location="/X3D/Scene/Shape[11]/Appearance/PixelTexture">
      <svrl:text>&lt;PixelTexture DEF='IllegalImageData'/&gt; illegal value for image height: NaN</svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="not(@image) or $defaultImage or (($components gt 0) and ($components le 4))"
                       role="error"
                       location="/X3D/Scene/Shape[11]/Appearance/PixelTexture">
      <svrl:text>&lt;PixelTexture DEF='IllegalImageData'/&gt; illegal value for image component count: NaN (must be 0..4) </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="($valueCount = ($width * $height)) or (($height=0) and ($width=0) and ($valueCount=0))"
                       role="error"
                       location="/X3D/Scene/Shape[11]/Appearance/PixelTexture">
      <svrl:text>&lt;PixelTexture DEF='IllegalImageData'/&gt; illegal number of image values (expected zero or NaN values after initial 3 array-size parameters, found 2) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="PixelTexture"/>
   <svrl:successful-report test="not(@USE) and ($defaultImage)"
                           role="warning"
                           location="/X3D/Scene/Shape[12]/Appearance/PixelTexture">
      <svrl:text>&lt;PixelTexture DEF='DefaultImageData' image='0 0 0'/&gt; has empty or default image array values </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="PixelTexture"/>
   <svrl:successful-report test="not(@USE) and ($defaultImage)"
                           role="warning"
                           location="/X3D/Scene/Shape[13]/Appearance/PixelTexture">
      <svrl:text>&lt;PixelTexture DEF='DuplicateImageData' image='0 0 0'/&gt; has empty or default image array values </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="PixelTexture"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:successful-report test="@DEF and @USE"
                           role="error"
                           location="/X3D/Scene/WorldInfo[11]">
      <svrl:text>&lt;WorldInfo DEF='USEandDEFtogether' USE='USEandDEFtogether'/&gt; cannot contain both DEF and USE in single node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:successful-report test="(@USE) and (string-length($USE) &gt; 0) and (count(//*[@DEF=$USE]) = 1) and (count(following::*[@DEF=$USE]) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/WorldInfo[12]">
      <svrl:text>&lt;WorldInfo USE='USEprecedesDEF'/&gt; found USE node that precedes matching DEF node, count(preceding::*[@DEF=$USE])=1</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:successful-report test="(@USE) and (string-length($USE) &gt; 0) and (count(//*[@DEF=$USE]) = 0)"
                           role="error"
                           location="/X3D/Scene/WorldInfo[14]">
      <svrl:text>&lt;WorldInfo USE='noDEFforUSE'/&gt; USE node has no matching DEF node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:successful-report test="(@USE) and (string-length(@USE) &gt; 0) and *"
                           role="error"
                           location="/X3D/Scene/WorldInfo[16]">
      <svrl:text>&lt;WorldInfo USE='noChildNodeforUSE'/&gt; USE elements cannot have any child nodes </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="not(@USE) or not(*)"
                       role="error"
                       location="/X3D/Scene/WorldInfo[16]">
      <svrl:text>&lt;WorldInfo USE='noChildNodeforUSE'&gt; &lt;MetadataSet/&gt; &lt;/WorldInfo&gt; USE node must not contain any child nodes </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="MetadataSet"/>
   <svrl:failed-assert test="(string-length($name) &gt; 0) or (string-length(@USE) &gt; 0) or IS/connect or ($nodeName = 'HAnimMotion')"
                       role="error"
                       location="/X3D/Scene/WorldInfo[16]/MetadataSet">
      <svrl:text>&lt;MetadataSet DEF=''/&gt; name field is required </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="$isX3D3 and (count(*[(@containerField='metadata') or (string-length(@containerField) = 0)]) = 1) and not(*[@containerField='value'])"
                           role="warning"
                           location="/X3D/Scene/WorldInfo[16]/MetadataSet">
      <svrl:text>&lt;MetadataSet DEF='' name=''/&gt; contains a Metadata* node with default containerField='metadata' or containerField='' where typically such nodes have containerField='value' (X3D3 rule) </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="Group"/>
   <svrl:successful-report test="(@USE) and (string-length($USE) &gt; 0) and (ancestor::*[@DEF=$USE]) and (local-name(..)!='field') and (local-name(..)!='fieldValue')"
                           role="error"
                           location="/X3D/Scene/Group[2]/Group">
      <svrl:text>&lt;Group USE='DEFcontainsUSEcopyOfSelf'/&gt; To avoid recursive referencing, USE node cannot have matching DEF node as direct ancestor or parent, instead must be in different branches of directed acyclic graph </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="not(@USE) or (local-name(../..)='Script' and local-name(..)='field') or (count(ancestor::*[@DEF=$USE]) = 0)"
                       role="error"
                       location="/X3D/Scene/Group[2]/Group">
      <svrl:text>&lt;Group USE='DEFcontainsUSEcopyOfSelf'/&gt; USE node cannot be contained child descendant of its DEF node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="WorldInfo"/>
   <svrl:fired-rule context="Group"/>
   <svrl:successful-report test="(@USE) and (not($nodeName=$DEFNodeName) and (string-length($nodeName) &gt; 0) and (string-length($DEFNodeName) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/Group[3]">
      <svrl:text>&lt;Group USE='USEmismatchDEFnodeType'/&gt; node type must match node type of original &lt;WorldInfo DEF='USEmismatchDEFnodeType'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="LocalFog"/>
   <svrl:failed-assert test="(/X3D/@version='3.1') or (/X3D/@version='3.2') or (/X3D/@version='3.3') or (/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/Scene/LocalFog">
      <svrl:text>&lt;LocalFog DEF='NoLocalFogV3.0'/&gt; requires X3D version='3.1' or greater, but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((/X3D[@profile='Full']) or (/X3D/head/component[@name='EnvironmentalEffects'][number(@level) ge 4]) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/LocalFog">
      <svrl:text>&lt;LocalFog DEF='NoLocalFogV3.0'/&gt; requires at least &lt;component name='EnvironmentalEffects' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="DirectionalLight | PointLight | SpotLight"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:successful-report test="contains(@creaseAngle,'-')"
                           role="info"
                           location="/X3D/Scene/Shape[15]/IndexedFaceSet">
      <svrl:text>&lt;IndexedFaceSet DEF='CountTests'/&gt; creaseAngle='-1.234' cannot be negative </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="Color and ColorRGBA"
                           role="error"
                           location="/X3D/Scene/Shape[15]/IndexedFaceSet">
      <svrl:text>&lt;IndexedFaceSet DEF='CountTests'/&gt; contains both Color and ColorRGBA nodes, no more than one is allowed </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="TextureCoordinate and TextureCoordinateGenerator"
                           role="error"
                           location="/X3D/Scene/Shape[15]/IndexedFaceSet">
      <svrl:text>&lt;IndexedFaceSet DEF='CountTests'/&gt; contains both TextureCoordinate and TextureCoordinateGenerator nodes, no more than one is allowed </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:successful-report test="(string-length(normalize-space($point)) &gt; 0) and (($pointCount div 3)!=round($pointCount div 3))"
                           role="warning"
                           location="/X3D/Scene/Shape[15]/IndexedFaceSet/Coordinate">
      <svrl:text>&lt;Coordinate DEF=''/&gt; point array has 3.333333333333333333 triples, likely has incorrect number of values or missing whitespace (point='0 0 0 0 1 0 1 0 0 5') </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Color"/>
   <svrl:successful-report test="contains($color,'-')"
                           role="warning"
                           location="/X3D/Scene/Shape[15]/IndexedFaceSet/Color">
      <svrl:text>&lt;Color DEF='IllegalValuesColor'/&gt; contains a negative color array value, color='-1 2 3' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($color,' 2') or contains($color,' 3') or contains($color,' 4') or contains($color,' 5') or contains($color,' 6') or contains($color,' 7') or contains($color,' 8') or contains($color,' 9') or contains($color,' 1.1') or contains($color,' 1.2') or contains($color,' 1.3') or contains($color,' 1.4') or contains($color,' 1.5') or contains($color,' 1.6') or contains($color,' 1.7') or contains($color,' 1.8') or contains($color,' 1.9')"
                           role="warning"
                           location="/X3D/Scene/Shape[15]/IndexedFaceSet/Color">
      <svrl:text>&lt;Color DEF='IllegalValuesColor'/&gt; contains a color array value greater than 1, color='-1 2 3' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ColorRGBA"/>
   <svrl:successful-report test="contains($color,'-')"
                           role="warning"
                           location="/X3D/Scene/Shape[15]/IndexedFaceSet/ColorRGBA">
      <svrl:text>&lt;ColorRGBA DEF='IllegalValuesColorRGBA'/&gt; contains a negative color array value, color='-1 1.2 0.3 0.4' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($color,' 2') or contains($color,' 3') or contains($color,' 4') or contains($color,' 5') or contains($color,' 6') or contains($color,' 7') or contains($color,' 8') or contains($color,' 9') or contains($color,' 1.1') or contains($color,' 1.2') or contains($color,' 1.3') or contains($color,' 1.4') or contains($color,' 1.5') or contains($color,' 1.6') or contains($color,' 1.7') or contains($color,' 1.8') or contains($color,' 1.9')"
                           role="warning"
                           location="/X3D/Scene/Shape[15]/IndexedFaceSet/ColorRGBA">
      <svrl:text>&lt;ColorRGBA DEF='IllegalValuesColorRGBA'/&gt; contains a color array value greater than 1, color='-1 1.2 0.3 0.4' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:failed-assert test="@point or (@USE) or boolean(IS/connect[@nodeField='point'])"
                       role="warning"
                       location="/X3D/Scene/Shape[15]/IndexedFaceSet/TextureCoordinate">
      <svrl:text>&lt;TextureCoordinate DEF=''/&gt; contains no data in point array </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="TextureCoordinateGenerator"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Text"/>
   <svrl:successful-report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&#34;')) and ($lastCharacter='&#34;')"
                           role="error"
                           location="/X3D/Scene/Shape[16]/Text">
      <svrl:text>&lt;Text DEF='CharacterBeforeQuotes' string='x " "'/&gt; array of string values needs to begin with quote mark " </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Text'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/Shape[16]/Text">
      <svrl:text>&lt;Text DEF='CharacterBeforeQuotes'/&gt; requires at least &lt;component name='Text' level='1'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:successful-report test="(@family) and not(contains(@family,'SANS')) and not(contains(@family,'SERIF')) and not(contains(@family,'TYPEWRITER'))"
                           role="warning"
                           location="/X3D/Scene/Shape[16]/Text/FontStyle">
      <svrl:text>&lt;FontStyle DEF=''/&gt; array family='"unquotedFontFamilyName"' does not contain any of the guaranteed-support fonts ("SANS" "SERIF" or "TYPEWRITER") </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$justifyIllegalValue"
                           role="error"
                           location="/X3D/Scene/Shape[16]/Text/FontStyle">
      <svrl:text>&lt;FontStyle DEF=''/&gt; array justify='"unquotedIllegalJustification"' has illegal value, need to include 2 legal values: "BEGIN" "END" "FIRST" "MIDDLE" </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Text'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/Shape[16]/Text/FontStyle">
      <svrl:text>&lt;FontStyle DEF=''/&gt; requires at least &lt;component name='Text' level='1'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Text"/>
   <svrl:successful-report test="not(@USE) and contains($normalizedString,'&#34;&#34;') and not(contains($normalizedString,'\&#34;&#34;') or contains($normalizedString,'&#34;\&#34;') or contains($normalizedString,'&#34;&#34; &#34;') or contains($normalizedString,'&#34; &#34;&#34;'))"
                           role="error"
                           location="/X3D/Scene/Shape[17]/Text">
      <svrl:text>&lt;Text DEF='ThreeUnescapedQuoteMarksMissingSpaceEndsApostrophe' string='"" x" ''/&gt; string array has questionable line-break "" quote marks </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and (@string) and (contains(@string,'&#34;')) and (($quoteCount div 2)!=round($quoteCount div 2)) and not(contains(@string,'\&#34;'))"
                           role="error"
                           location="/X3D/Scene/Shape[17]/Text">
      <svrl:text>&lt;Text DEF='ThreeUnescapedQuoteMarksMissingSpaceEndsApostrophe' string='"" x" ''/&gt; string array has 3 unescaped "quote marks" but instead needs to have an even number of matched pairs </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and ($normalizedString) and (starts-with($normalizedString,'&#34;')) and not($lastCharacter='&#34;')"
                           role="error"
                           location="/X3D/Scene/Shape[17]/Text">
      <svrl:text>&lt;Text DEF='ThreeUnescapedQuoteMarksMissingSpaceEndsApostrophe' string='"" x" ''/&gt; array of string values needs to end with quote mark " </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:successful-report test="contains(@family, ' ') and not(contains(@family, '&#34; &#34;'))"
                           role="error"
                           location="/X3D/Scene/Shape[17]/Text/FontStyle">
      <svrl:text>&lt;FontStyle DEF='familyValuesMissingIntermediateQuotes'/&gt; array family='"SANS SERIF"' values must each be quoted </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Text"/>
   <svrl:successful-report test="not(@USE) and (@string) and (contains(@string,'\&#34;'))"
                           role="warning"
                           location="/X3D/Scene/Shape[18]/Text">
      <svrl:text>&lt;Text DEF='EscapedQuoteMarkWarning' string='"here is a single escaped \" quote mark character"'/&gt; has 3 quote marks with at least one escaped quote mark \" so double-check to ensure paired "quote marks" for each line are matched </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:successful-report test="$justifyIllegalValue"
                           role="error"
                           location="/X3D/Scene/Shape[18]/Text/FontStyle">
      <svrl:text>&lt;FontStyle DEF=''/&gt; array justify='"IllegalValue"' has illegal value, need to include 2 legal values: "BEGIN" "END" "FIRST" "MIDDLE" </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Text"/>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Text"/>
   <svrl:successful-report test="not(@USE) and (@string) and (contains(@string,'\&#34;'))"
                           role="warning"
                           location="/X3D/Scene/Shape[20]/Text">
      <svrl:text>&lt;Text DEF='EmbeddedQuoteMarksOK' string='"plain text with \"quote marks\" embedded"'/&gt; has 4 quote marks with at least one escaped quote mark \" so double-check to ensure paired "quote marks" for each line are matched </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="FontStyle"/>
   <svrl:successful-report test="contains(@language, '&#34;')"
                           role="error"
                           location="/X3D/Scene/Shape[20]/Text/FontStyle">
      <svrl:text>&lt;FontStyle DEF='FontStyleFieldsContainIllegalQuotes'/&gt; language='"noquo"' is erroneous since the contained enumeration value must not include "quotation marks" </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains(@style, '&#34;')"
                           role="error"
                           location="/X3D/Scene/Shape[20]/Text/FontStyle">
      <svrl:text>&lt;FontStyle DEF='FontStyleFieldsContainIllegalQuotes'/&gt; style='"PLAIN"' is erroneous since the contained enumeration value must not include "quotation marks" </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="IndexedQuadSet"/>
   <svrl:failed-assert test="(/X3D/@version='3.1') or (/X3D/@version='3.2') or (/X3D/@version='3.3') or (/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/Scene/Shape[21]/IndexedQuadSet">
      <svrl:text>&lt;IndexedQuadSet DEF='MissingIndex'/&gt; requires X3D version='3.1' or greater, but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="$coordIndexMissing and (Coordinate/@point) and not(IS/connect[@nodeField='coordIndex']) and not(starts-with(local-name(),'IndexedTriangle'))"
                           role="error"
                           location="/X3D/Scene/Shape[21]/IndexedQuadSet">
      <svrl:text>&lt;IndexedQuadSet DEF='MissingIndex'/&gt; missing coordIndex array for contained Coordinate node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:successful-report test="(string-length(normalize-space($point)) &gt; 0) and (($pointCount div 3)!=round($pointCount div 3))"
                           role="warning"
                           location="/X3D/Scene/Shape[21]/IndexedQuadSet/Coordinate">
      <svrl:text>&lt;Coordinate DEF='DuplicatedCoordinatePointArray'/&gt; point array has 3.333333333333333333 triples, likely has incorrect number of values or missing whitespace (point='0 0 0 0 1 0 1 0 0 5') </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="NormalInterpolator"/>
   <svrl:successful-report test="((@DEF) and not(//ROUTE[@toNode=$DEF]) and not((local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect)) and (contains(local-name(),'Interpolator') or contains(local-name(),'Sequencer'))"
                           role="warning"
                           location="/X3D/Scene/NormalInterpolator[2]">
      <svrl:text>&lt;NormalInterpolator DEF='NormalPath'/&gt; is missing ROUTE to receive input events, for example &lt;ROUTE fromNode='SomeTimeSensorDEFname' fromField='fraction_changed' toNode='NormalPath' toField='set_fraction'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')"
                           role="warning"
                           location="/X3D/Scene/NormalInterpolator[2]">
      <svrl:text>&lt;NormalInterpolator DEF='NormalPath'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='NormalPath' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or round($keyValueCount div $keyCount)=($keyValueCount div $keyCount)"
                       role="error"
                       location="/X3D/Scene/NormalInterpolator[2]">
      <svrl:text>&lt;NormalInterpolator DEF='NormalPath'/&gt; key array (size=3) does not evenly divide keyValue array (size=12.333333333333333333 sets of 3-tuple values) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="GeoLocation"/>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[@name='Geospatial'][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/GeoLocation">
      <svrl:text>&lt;GeoLocation DEF='LegalGeoSystem'/&gt; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='Geospatial' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ProtoDeclare"/>
   <svrl:fired-rule context="ProtoInterface"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="(string-length($value) &gt; 0) and ((@type='SFVec4f') or (@type='SFVec4d') or (@type='SFRotation') or (@type='SFColorRGBA')) and ($embeddedWhiteSpaceCount!=3)"
                           role="error"
                           location="/X3D/Scene/ProtoDeclare[10]/ProtoInterface/field[2]">
      <svrl:text>&lt;ProtoInterface name='' DEF=''&gt; &lt;field name='incorrectInitializationSFColorRGBA' value='1 1 1'/&gt; has illegal number of values (3) for 4-tuple type SFColorRGBA</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="boolean(parent::ProtoInterface) and boolean(ancestor::ProtoDeclare) and (count(ancestor::ProtoDeclare/ProtoBody//IS/connect[@protoField = $fieldName]) = 0)"
                           role="warning"
                           location="/X3D/Scene/ProtoDeclare[10]/ProtoInterface/field[2]">
      <svrl:text>Missing connection for field in ProtoBody: &lt;ProtoDeclare name='ReferenceTest'&gt; &lt;ProtoInterface&gt; &lt;field name='incorrectInitializationSFColorRGBA' accessType='initializeOnly' type='SFColorRGBA'/&gt; is unused with no &lt;ProtoDeclare name='ReferenceTest'&gt; &lt;ProtoBody&gt; ... &lt;IS&gt; &lt;connect protoField='incorrectInitializationSFColorRGBA' nodeField='someParentNodeFieldName'/&gt; found in corresponding ProtoBody content </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ProtoBody"/>
   <svrl:fired-rule context="Script"/>
   <svrl:successful-report test="contains(@url,':///')"
                           role="warning"
                           location="/X3D/Scene/ProtoDeclare[10]/ProtoBody/Script">
      <svrl:text>&lt;Script DEF=''/&gt; url array contains triple forward-slash :/// characters (url='"http:///bogus"') </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="fieldValue"
                           role="error"
                           location="/X3D/Scene/ProtoDeclare[10]/ProtoBody/Script">
      <svrl:text>&lt;Script DEF=''/&gt; contains &lt;fieldValue name='shouldBeField/&gt; but instead should be &lt;field name='shouldBeField/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@url) &gt; 2) and not(contains(@url,'ecmascript:')) and not(contains(@url,'.js')) and not(contains(@url,'.class')) and not(contains(@url,'.jar'))"
                           role="warning"
                           location="/X3D/Scene/ProtoDeclare[10]/ProtoBody/Script">
      <svrl:text>&lt;Script DEF=''/&gt; url array does not contains link to .js .class or .jar scripts, browsers not required to support other scripting languages (url='"http:///bogus"') </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="(@type='SFBool') and $valueRequired and not(local-name(..)='ExternProtoDeclare') and not(@value='true' or @value='false')"
                           role="error"
                           location="/X3D/Scene/ProtoDeclare[10]/ProtoBody/Script/field[1]">
      <svrl:text>&lt;Script name='' DEF=''&gt; &lt;field name='missingInitializationValue1' value=''/&gt; SFBool field must have value='true' or value='false' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="(string-length($value) &gt; 0) and ((@type='SFVec3f') or (@type='SFVec3d') or (@type='SFColor')) and ($embeddedWhiteSpaceCount!=2)"
                           role="error"
                           location="/X3D/Scene/ProtoDeclare[10]/ProtoBody/Script/field[3]">
      <svrl:text>&lt;Script name='' DEF=''&gt; &lt;field name='incorrectInitializationSFVec3f' value='0.0'/&gt; has illegal number of values (1) for 3-tuple type SFVec3f</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="(string-length($value) &gt; 0) and ((@type='MFVec3f') or (@type='MFVec3d') or (@type='MFColor')) and ((($embeddedWhiteSpaceCount + 1) mod 3) != 0)"
                           role="error"
                           location="/X3D/Scene/ProtoDeclare[10]/ProtoBody/Script/field[4]">
      <svrl:text>&lt;Script name='' DEF=''&gt; &lt;field name='incorrectInitializationMFColor' value='1 2 3 4 5 6 7'/&gt; has illegal number of values (2.333333333333333333) for array of singleton SF values found in this 3-tuple type MFColor</svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:successful-report test="(string-length($value) &gt; 0) and $hasIS"
                           role="error"
                           location="/X3D/Scene/ProtoDeclare[10]/ProtoBody/Script/field[5]">
      <svrl:text>&lt;Script name='' DEF=''&gt; &lt;field name='missingInitializationValueHasIS' value='true'/&gt; field initialization not allowed when IS/connect is also defined </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:failed-assert test="parent::ProtoInstance"
                       role="error"
                       location="/X3D/Scene/ProtoDeclare[10]/ProtoBody/Script/fieldValue">
      <svrl:text>fieldValue initialization must have parent ProtoInstance, instead found parent &lt;Script DEF='' name=''&gt; &lt;fieldValue value=''&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="boolean(parent::ProtoInstance) and (string-length(@name) gt 0)"
                       role="error"
                       location="/X3D/Scene/ProtoDeclare[10]/ProtoBody/Script/fieldValue">
      <svrl:text>fieldValue must have name defined for &lt;Script&gt; &lt;fieldValue value=''&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="boolean(parent::ProtoInstance) and (string-length(@value) gt 0) or (count(*) gt 0) or ($type='SFString') or starts-with($type,'MF')"
                       role="error"
                       location="/X3D/Scene/ProtoDeclare[10]/ProtoBody/Script/fieldValue">
      <svrl:text>&lt;Script DEF='' name=''&gt; &lt;fieldValue name='shouldBeField'/&gt; fieldValue with corresponding type='' must have initialization value </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="IS | *[(upper-case(local-name()) = 'IS')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:fired-rule context="connect | *[(lower-case(local-name()) = 'connect')]"/>
   <svrl:failed-assert test="boolean(ancestor::ProtoDeclare/ProtoInterface/field[@name = $protoField])"
                       role="error"
                       location="/X3D/Scene/ProtoDeclare[10]/ProtoBody/Script/IS/connect[2]">
      <svrl:text>Not finding connect protoField: &lt;IS&gt; &lt;connect nodeField='missingInitializationValueHasIS' protoField='test'/&gt; does not have a corresponding protoField declaration &lt;ProtoDeclare name='ReferenceTest'&gt; &lt;ProtoInterface&gt; &lt;field name='test'&gt;</svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ProtoInstance"/>
   <svrl:successful-report test="field" role="error" location="/X3D/Scene/ProtoInstance[9]">
      <svrl:text>&lt;ProtoInstance DEF="" USE="" name="ReferenceTest"/&gt; has field instead of fieldValue, replace &lt;field name='shouldBeFieldValue'/&gt; with &lt;fieldValue name='shouldBeFieldValue'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:successful-report test="(string-length($value) &gt; 0) and $protoFound and (@value=(//ProtoDeclare[@name = $prototypeName]/ProtoInterface/field[@name = $fieldValueName]/@value))"
                           role="hint"
                           location="/X3D/Scene/ProtoInstance[9]/fieldValue[1]">
      <svrl:text>&lt;ProtoInstance name='ReferenceTest' DEF=''&gt; &lt;fieldValue name='defaultTest' value='78'/&gt; with defined type='SInt32' accessType='initializeOnly' has default value and so this fieldValue is optional </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$protoFound and not( $protoFieldFound)"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[9]/fieldValue[1]">
      <svrl:text>&lt;ProtoInstance name='ReferenceTest' DEF=''&gt; &lt;fieldValue name='defaultTest' value='78'/&gt; has matching ProtoDeclare with same name, but no corresponding field match for this fieldValue name='ReferenceTest' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]"/>
   <svrl:successful-report test="(string-length($value) &gt; 0) and (($type='SFVec4f') or ($type='SFVec4d') or ($type='SFRotation') or ($type='SFColorRGBA')) and ($embeddedWhiteSpaceCount!=3)"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[9]/fieldValue[2]">
      <svrl:text>&lt;ProtoInstance name='ReferenceTest' DEF=''&gt; &lt;fieldValue name='incorrectInitializationSFColorRGBA' value='1 1 1 1 1'/&gt; with defined type='SFColorRGBA' accessType='initializeOnly' has illegal number of values (5) for 4-tuple type SFColorRGBA</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$protoFound and not( $protoFieldFound)"
                           role="error"
                           location="/X3D/Scene/ProtoInstance[9]/fieldValue[2]">
      <svrl:text>&lt;ProtoInstance name='ReferenceTest' DEF=''&gt; &lt;fieldValue name='incorrectInitializationSFColorRGBA' value='1 1 1 1 1'/&gt; has matching ProtoDeclare with same name, but no corresponding field match for this fieldValue name='ReferenceTest' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="field | *[(lower-case(local-name()) = 'field')]"/>
   <svrl:fired-rule context="Transform"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/Transform">
      <svrl:text>&lt;Transform DEF='ZeroMagnitudeRotationAxes'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="starts-with(normalize-space(@scaleOrientation),'0 0 0 ') or starts-with(normalize-space(@scaleOrientation),'0.0 0.0 0.0 ')"
                           role="error"
                           location="/X3D/Scene/Transform">
      <svrl:text>&lt;Transform DEF='ZeroMagnitudeRotationAxes'/&gt; scaleOrientation='0 0 0 0' has illegal zero-magnitude axis values (can omit if expecting default value) </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:failed-assert test="parent::Collision or parent::Shape or parent::ProtoBody or parent::field or parent::fieldValue"
                       role="error"
                       location="/X3D/Scene/Box">
      <svrl:text>&lt;Box DEF='GeometryNodeNeedsShapeParent'/&gt; geometry node must have Shape node as parent </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Collision"/>
   <svrl:successful-report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Navigation'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/Collision">
      <svrl:text>&lt;Collision DEF='IllegalGeometryProxyNode'/&gt; requires at least &lt;component name='Navigation' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Box | Cone | Cylinder | Sphere"/>
   <svrl:successful-report test="parent::Collision"
                           role="warning"
                           location="/X3D/Scene/Collision/Box">
      <svrl:text>&lt;Box DEF='GeometryNodeCollisionParentNeedsParentShapeWithProxyContainerField'/&gt; containerField='proxy' cannot be proxy for parent &lt;Collision DEF='IllegalGeometryProxyNode'&gt; node, insert intermediate parent node &lt;Shape containerField='proxy'&gt; between them </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="NavigationInfo"/>
   <svrl:successful-report test="not(@USE) and (@type) and not(contains(@type,'&#34;'))"
                           role="error"
                           location="/X3D/Scene/NavigationInfo[1]">
      <svrl:text>&lt;NavigationInfo DEF='UnquotedTypeAndTransitionTypeErrors'/&gt; array type='OTHER' needs to begin and end with "quote" "marks".  Corrected example: &lt;NavigationInfo DEF='UnquotedTypeAndTransitionTypeErrors' type='"OTHER"'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and ($normalizedString) and not($quoteCount = (2 * $embeddedWhiteSpaceCount) + 2)"
                           role="error"
                           location="/X3D/Scene/NavigationInfo[1]">
      <svrl:text>&lt;NavigationInfo DEF='UnquotedTypeAndTransitionTypeErrors'/&gt; array type='OTHER' has mismatched white space and quote mark " characters, check quoting </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and (@type) and ((/X3D/@version = '3.0') or (/X3D/@version = '3.1') or (/X3D/@version = '3.2')) and not(contains(@type,'EXAMINE')) and not(contains(@type,'ANY')) and not(contains(@type,'WALK')) and not(contains(@type,'FLY')) and not(contains(@type,'LOOKAT')) and not(contains(@type,'NONE'))"
                           role="warning"
                           location="/X3D/Scene/NavigationInfo[1]">
      <svrl:text>&lt;NavigationInfo DEF='UnquotedTypeAndTransitionTypeErrors'/&gt; array type='OTHER' does not contain any of the guaranteed-support values ("EXAMINE" "ANY" or "WALK" "FLY" "LOOKAT" "NONE") </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and (@transitionType) and not(contains(@transitionType,'LINEAR')) and not(contains(@transitionType,'TELEPORT')) and not(contains(@transitionType,'ANIMATE'))"
                           role="warning"
                           location="/X3D/Scene/NavigationInfo[1]">
      <svrl:text>&lt;NavigationInfo DEF='UnquotedTypeAndTransitionTypeErrors'/&gt; array transitionType='"ALTERNATE"' does not contain any of the guaranteed-support values (default "LINEAR" or "TELEPORT" "ANIMATE") </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="NavigationInfo"/>
   <svrl:successful-report test="not(@USE) and (@type) and (contains(@type,'ALL'))"
                           role="warning"
                           location="/X3D/Scene/NavigationInfo[2]">
      <svrl:text>&lt;NavigationInfo DEF='NavigationInfoWithTypeALL'/&gt; array type='"ALL"' has illegal value "ALL", replace with "ANY" </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and (@type) and ((/X3D/@version = '3.0') or (/X3D/@version = '3.1') or (/X3D/@version = '3.2')) and not(contains(@type,'EXAMINE')) and not(contains(@type,'ANY')) and not(contains(@type,'WALK')) and not(contains(@type,'FLY')) and not(contains(@type,'LOOKAT')) and not(contains(@type,'NONE'))"
                           role="warning"
                           location="/X3D/Scene/NavigationInfo[2]">
      <svrl:text>&lt;NavigationInfo DEF='NavigationInfoWithTypeALL'/&gt; array type='"ALL"' does not contain any of the guaranteed-support values ("EXAMINE" "ANY" or "WALK" "FLY" "LOOKAT" "NONE") </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="Group"/>
   <svrl:successful-report test="(@USE) and (string-length($USE) &gt; 0) and (ancestor::*[@DEF=$USE]) and (local-name(..)!='field') and (local-name(..)!='fieldValue')"
                           role="error"
                           location="/X3D/Scene/Group[4]/Group">
      <svrl:text>&lt;Group USE='IllegalParentChild-DEF-USE'/&gt; To avoid recursive referencing, USE node cannot have matching DEF node as direct ancestor or parent, instead must be in different branches of directed acyclic graph </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="not(@USE) or (local-name(../..)='Script' and local-name(..)='field') or (count(ancestor::*[@DEF=$USE]) = 0)"
                       role="error"
                       location="/X3D/Scene/Group[4]/Group">
      <svrl:text>&lt;Group USE='IllegalParentChild-DEF-USE'/&gt; USE node cannot be contained child descendant of its DEF node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="CADLayer"/>
   <svrl:failed-assert test="(/X3D/@version='3.1') or (/X3D/@version='3.2') or (/X3D/@version='3.3') or (/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/Scene/CADLayer[1]">
      <svrl:text>&lt;CADLayer DEF=''/&gt; requires X3D version='3.1' or greater, but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/CADLayer[1]">
      <svrl:text>&lt;CADLayer DEF='' name='contains whitespace and incorrect boolean value'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(string-length($MFBoolValueResidue) gt 0)"
                           role="error"
                           location="/X3D/Scene/CADLayer[1]">
      <svrl:text>&lt;CADLayer DEF='' name='contains whitespace and incorrect boolean value'/&gt; MFBool visible field must only include values of true or false </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))"
                       role="warning"
                       location="/X3D/Scene/Shape[22]">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child Appearance or Color </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:failed-assert test="@USE or @url or boolean(IS/connect[@nodeField='url']) or (local-name()='Script') or contains(local-name(),'Shader')"
                       role="error"
                       location="/X3D/Scene/Shape[22]/ImageTexture">
      <svrl:text>&lt;ImageTexture DEF='IllegalParent1'/&gt; has no value(s) in url='' array </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(parent::Shape)"
                           role="error"
                           location="/X3D/Scene/Shape[22]/ImageTexture">
      <svrl:text>&lt;ImageTexture DEF='IllegalParent1'/&gt; has parent Shape node, but must be contained by Appearance node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:failed-assert test="@USE or @url or boolean(IS/connect[@nodeField='url']) or (local-name()='Script') or contains(local-name(),'Shader')"
                       role="error"
                       location="/X3D/Scene/Shape[22]/MovieTexture">
      <svrl:text>&lt;MovieTexture DEF='IllegalParent2'/&gt; has no value(s) in url='' array </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(local-name()='MovieTexture') and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))"
                           role="warning"
                           location="/X3D/Scene/Shape[22]/MovieTexture">
      <svrl:text>&lt;MovieTexture DEF='IllegalParent2'/&gt; is missing description which is important for accessibility and usability.  Example: description='MovieTexture video/sound of ___ is playing...' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(parent::Shape)"
                           role="error"
                           location="/X3D/Scene/Shape[22]/MovieTexture">
      <svrl:text>&lt;MovieTexture DEF='IllegalParent2'/&gt; has parent Shape node, but must be contained by Appearance node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(local-name()='MovieTexture') and not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Texturing'][number(@level) ge 3] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/Shape[22]/MovieTexture">
      <svrl:text>&lt;MovieTexture DEF='IllegalParent2'/&gt; requires at least &lt;component name='Texturing' level='3'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="PixelTexture"/>
   <svrl:successful-report test="(parent::Shape)"
                           role="error"
                           location="/X3D/Scene/Shape[22]/PixelTexture">
      <svrl:text>&lt;PixelTexture DEF='IllegalParent3'/&gt; has parent Shape node, but must be contained by Appearance node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and ($defaultImage)"
                           role="warning"
                           location="/X3D/Scene/Shape[22]/PixelTexture">
      <svrl:text>&lt;PixelTexture DEF='IllegalParent3' image='0 0 0'/&gt; has empty or default image array values </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))"
                       role="warning"
                       location="/X3D/Scene/Shape[23]">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child Appearance or Color </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="TextureTransform"/>
   <svrl:successful-report test="not(@USE) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../ImageTexture) and not(../MovieTexture) and not(../PixelTexture) and not(../MultiTexture)"
                           role="warning"
                           location="/X3D/Scene/Shape[23]/TextureTransform">
      <svrl:text>&lt;TextureTransform DEF='TextureTransformWithNoSiblingTextureNode'/&gt; has no accompanying ImageTexture, MovieTexture, PixelTexture or MultiTexture node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))"
                       role="warning"
                       location="/X3D/Scene/Shape[24]">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Appearance"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or (Material | TwoSidedMaterial | PhysicalMaterial | UnlitMaterial | ImageTexture | LineProperties | PointProperties | MovieTexture | PixelTexture | MultiTexture | */Color | */ColorRGBA | ProtoInstance | IS | parent::ProtoBody | parent::field | parent::fieldValue)"
                       role="warning"
                       location="/X3D/Scene/Shape[24]/Appearance">
      <svrl:text>empty &lt;Appearance DEF=''/&gt; found without child Material, TwoSidedMaterial, PhysicalMaterial, UnlitMaterial, FillProperties, LineProperties, PointProperties or texture node </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(count(*[contains(local-name(),'Texture') and not(contains(local-name(),'TextureTransform'))]) &gt; 1)"
                           role="error"
                           location="/X3D/Scene/Shape[24]/Appearance">
      <svrl:text>&lt;Appearance DEF=''/&gt; contains more than one *Texture nodes </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TextureTransform"/>
   <svrl:successful-report test="(string-length(@USE) &gt; 0) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../ImageTexture) and not(../MovieTexture) and not(../PixelTexture) and not(../MultiTexture)"
                           role="warning"
                           location="/X3D/Scene/Shape[24]/Appearance/TextureTransform">
      <svrl:text>&lt;TextureTransform USE='TextureTransformWithNoSiblingTextureNode' has no accompanying ImageTexture, MovieTexture, PixelTexture or MultiTexture node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TextureCoordinateGenerator"/>
   <svrl:successful-report test="not(string-length(normalize-space(@USE)) &gt; 0) and (string-length(normalize-space(@mode)) &gt; 0) and not((@mode='SPHERE') or (@mode='CAMERASPACENORMAL') or (@mode='CAMERASPACEPOSITION') or (@mode='CAMERASPACEREFLECTIONVECTOR') or (@mode='SPHERE-LOCAL') or (@mode='COORD') or (@mode='COORD-EYE') or (@mode='NOISE') or (@mode='NOISE-EYE') or (@mode='SPHERE-REFLECT') or (@mode='SPHERE-REFLECT-LOCAL'))"
                           role="error"
                           location="/X3D/Scene/Shape[24]/Appearance/TextureCoordinateGenerator[1]">
      <svrl:text>&lt;TextureCoordinateGenerator DEF='TextureCoordinateGeneratorIllegalMode' mode='Bogus'/&gt; mode attribute has illegal enumeration value, mode must be one of SPHERE CAMERASPACENORMAL CAMERASPACEPOSITION CAMERASPACEREFLECTIONVECTOR SPHERE-LOCAL COORD COORD-EYE NOISE NOISE-EYE SPHERE-REFLECT or SPHERE-REFLECT-LOCAL </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../Coordinate) and not(../CoordinateDouble) and not(local-name(..)='ElevationGrid') and not(local-name(..)='GeoElevationGrid') and not(local-name(..)='MultiTextureCoordinate')"
                           role="warning"
                           location="/X3D/Scene/Shape[24]/Appearance/TextureCoordinateGenerator[1]">
      <svrl:text>&lt;TextureCoordinateGenerator DEF='TextureCoordinateGeneratorIllegalMode'/&gt; has no accompanying Coordinate (or CoordinateDouble) node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TextureCoordinateGenerator"/>
   <svrl:successful-report test="not(@USE) and (@mode='NOISE') and (string-length(normalize-space(@parameter)) &gt; 0) and ($parameterSpaceCount != 2)"
                           role="warning"
                           location="/X3D/Scene/Shape[24]/Appearance/TextureCoordinateGenerator[2]">
      <svrl:text>&lt;TextureCoordinateGenerator DEF='TextureCoordinateGeneratorIllegalParameterCount' mode='NOISE' parameter='1 2 3 4'/&gt; parameter count is 4 instead of 6 (for scale and translation x y z values) in this mode </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../Coordinate) and not(../CoordinateDouble) and not(local-name(..)='ElevationGrid') and not(local-name(..)='GeoElevationGrid') and not(local-name(..)='MultiTextureCoordinate')"
                           role="warning"
                           location="/X3D/Scene/Shape[24]/Appearance/TextureCoordinateGenerator[2]">
      <svrl:text>&lt;TextureCoordinateGenerator DEF='TextureCoordinateGeneratorIllegalParameterCount'/&gt; has no accompanying Coordinate (or CoordinateDouble) node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))"
                       role="warning"
                       location="/X3D/Scene/Shape[25]">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="MultiTexture"/>
   <svrl:successful-report test="not(ImageTexture) and not(MovieTexture) and not(PixelTexture) and not(ProtoInstance)"
                           role="warning"
                           location="/X3D/Scene/Shape[25]/Appearance/MultiTexture">
      <svrl:text>&lt;MultiTexture DEF='NoTextureChildren'/&gt; does not contain any texture nodes </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(@USE) or not(@mode) or ($modeQuoteCount = 2) or ($modeQuoteCount = 4) or ($modeQuoteCount = 6)"
                       role="warning"
                       location="/X3D/Scene/Shape[25]/Appearance/MultiTexture">
      <svrl:text>&lt;MultiTexture DEF='NoTextureChildren' mode='"BogusMode1Value" BogusMode2Value"'/&gt; mode attribute has illegal number of "quotation marks" </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not(@USE) and (string-length(normalize-space($mode1)) &gt; 0) and not($mode1='MODULATE') and not($mode1='REPLACE') and not($mode1='MODULATE2X') and not($mode1='MODULATE4X') and not($mode1='ADD') and not($mode1='ADDSIGNED') and not($mode1='ADDSIGNED2X') and not($mode1='SUBTRACT') and not($mode1='ADDSMOOTH ') and not($mode1='BLENDDIFFUSEALPHA') and not($mode1='BLENDTEXTUREALPHA') and not($mode1='BLENDFACTORALPHA') and not($mode1='BLENDCURRENTALPHA') and not($mode1='MODULATEALPHA_ADDCOLOR') and not($mode1='MODULATEINVALPHA_ADDCOLOR') and not($mode1='MODULATEINVCOLOR_ADDALPHA') and not($mode1='OFF') and not($mode1='SELECTARG1') and not($mode1='SELECTARG2') and not($mode1='DOTPRODUCT3')"
                           role="error"
                           location="/X3D/Scene/Shape[25]/Appearance/MultiTexture">
      <svrl:text>&lt;MultiTexture DEF='NoTextureChildren' mode='"BogusMode1Value" BogusMode2Value"'/&gt; initial mode attribute "" has illegal enumeration value, must be one of MODULATE REPLACE MODULATE2X MODULATE4X ADD ADDSIGNED ADDSIGNED2X SUBTRACT ADDSMOOTH  BLENDDIFFUSEALPHA BLENDTEXTUREALPHA BLENDFACTORALPHA BLENDCURRENTALPHA MODULATEALPHA_ADDCOLOR MODULATEINVALPHA_ADDCOLOR MODULATEINVCOLOR_ADDALPHA OFF SELECTARG1 SELECTARG2 DOTPRODUCT3 </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and (string-length(normalize-space($mode2)) &gt; 0) and not($mode2='MODULATE') and not($mode2='REPLACE') and not($mode2='MODULATE2X') and not($mode2='MODULATE4X') and not($mode2='ADD') and not($mode2='ADDSIGNED') and not($mode2='ADDSIGNED2X') and not($mode2='SUBTRACT') and not($mode2='ADDSMOOTH ') and not($mode2='BLENDDIFFUSEALPHA') and not($mode2='BLENDTEXTUREALPHA') and not($mode2='BLENDFACTORALPHA') and not($mode2='BLENDCURRENTALPHA') and not($mode2='MODULATEALPHA_ADDCOLOR') and not($mode2='MODULATEINVALPHA_ADDCOLOR') and not($mode2='MODULATEINVCOLOR_ADDALPHA') and not($mode2='OFF') and not($mode2='SELECTARG1') and not($mode2='SELECTARG2') and not($mode2='DOTPRODUCT3')"
                           role="error"
                           location="/X3D/Scene/Shape[25]/Appearance/MultiTexture">
      <svrl:text>&lt;MultiTexture DEF='NoTextureChildren' mode='"BogusMode1Value" BogusMode2Value"'/&gt; secondary mode attribute "" has illegal enumeration value, must be one of MODULATE REPLACE MODULATE2X MODULATE4X ADD ADDSIGNED ADDSIGNED2X SUBTRACT ADDSMOOTH  BLENDDIFFUSEALPHA BLENDTEXTUREALPHA BLENDFACTORALPHA BLENDCURRENTALPHA MODULATEALPHA_ADDCOLOR MODULATEINVALPHA_ADDCOLOR MODULATEINVCOLOR_ADDALPHA OFF SELECTARG1 SELECTARG2 DOTPRODUCT3 </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and (string-length(normalize-space(@source)) &gt; 0) and not(@source='DIFFUSE') and not(@source='SPECULAR') and not(@source='FACTOR')"
                           role="error"
                           location="/X3D/Scene/Shape[25]/Appearance/MultiTexture">
      <svrl:text>&lt;MultiTexture DEF='NoTextureChildren' mode='"BogusMode1Value" BogusMode2Value"' source='"BogusSourceValue"'/&gt; source attribute has illegal enumeration value, source must be empty, DIFFUSE, SPECULAR or FACTOR </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(@USE) or not(@function) or ($functionQuoteCount = 2) or ($functionQuoteCount = 4)"
                       role="warning"
                       location="/X3D/Scene/Shape[25]/Appearance/MultiTexture">
      <svrl:text>&lt;MultiTexture DEF='NoTextureChildren' function='"BogusFunction1Value" "BogusFunction2Value" "'/&gt; function attribute has illegal number of "quotation marks" </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not(@USE) and (string-length(normalize-space($function1)) &gt; 0) and not($function1='COMPLEMENT') and not($function1='ALPHAREPLICATE')"
                           role="error"
                           location="/X3D/Scene/Shape[25]/Appearance/MultiTexture">
      <svrl:text>&lt;MultiTexture DEF='NoTextureChildren' mode='"BogusMode1Value" BogusMode2Value" function='"BogusFunction1Value" "BogusFunction2Value" "'/&gt; initial function attribute "" has illegal enumeration value, must be empty, COMPLEMENT or ALPHAREPLICATE </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and (string-length(normalize-space($function2)) &gt; 0) and not($function2='COMPLEMENT') and not($function2='ALPHAREPLICATE')"
                           role="error"
                           location="/X3D/Scene/Shape[25]/Appearance/MultiTexture">
      <svrl:text>&lt;MultiTexture DEF='NoTextureChildren' mode='"BogusMode1Value" BogusMode2Value" function='"BogusFunction1Value" "BogusFunction2Value" "'/&gt; secondary function attribute "" has illegal enumeration value, must be empty, COMPLEMENT or ALPHAREPLICATE </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Background"/>
   <svrl:failed-assert test="not(*) or (IS and (count(*) = 1)) or (*[starts-with(name(),'Metadata')] and (count(*) = 1)) or (IS and *[starts-with(name(),'Metadata')] and (count(*) = 2)) or (ProtoInstance and (count(*) = 1)) or ((local-name='GeoPositionInterpolator') and *[not(starts-with(name(),'Metadata')) and not(local-name='GeoOrigin')])"
                       role="error"
                       location="/X3D/Scene/Background[1]">
      <svrl:text>&lt;Background DEF='NoBackgroundChildrenAllowed'/&gt; element has illegal child node (only single Metadata* node is allowed) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:failed-assert test="@USE or @url or boolean(IS/connect[@nodeField='url']) or (local-name()='Script') or contains(local-name(),'Shader')"
                       role="error"
                       location="/X3D/Scene/Background[1]/ImageTexture">
      <svrl:text>&lt;ImageTexture DEF='IllegalBackgroundChild'/&gt; has no value(s) in url='' array </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(local-name()='ImageTexture') and not(parent::Shape) and not(parent::Appearance) and not(parent::LoadSensor) and not(parent::MultiTexture) and not(parent::TextureBackground) and not(parent::ComposedCubeMapTexture) and not(parent::field) and not(parent::fieldValue)"
                           role="error"
                           location="/X3D/Scene/Background[1]/ImageTexture">
      <svrl:text>&lt;ImageTexture DEF='IllegalBackgroundChild'/&gt; has parent Background node, but must be contained by Appearance, LoadSensor, MultiTexture, TextureBackground or ComposedCubeMapTexture node (or else within field declaration or fieldValue initialization) </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TextureBackground"/>
   <svrl:successful-report test="(*[@containerField='texture'])"
                           role="error"
                           location="/X3D/Scene/TextureBackground">
      <svrl:text>&lt;TextureBackground DEF=''/&gt; child node with default containerField='texture' attribute needs to be uniquely renamed containerField='frontTexture' or backTexture, leftTexture, rightTexture, topTexture or bottomTexture </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(*[@containerField='frontUrl'])"
                           role="error"
                           location="/X3D/Scene/TextureBackground">
      <svrl:text>&lt;TextureBackground DEF=''/&gt; child node with containerField='frontUrl' attribute needs to be renamed containerField='frontTexture' </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="((/X3D[@profile='Full']) or (/X3D/head/component[@name='EnvironmentalEffects'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/TextureBackground">
      <svrl:text>&lt;TextureBackground DEF=''/&gt; requires at least &lt;component name='EnvironmentalEffects' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:failed-assert test="@USE or @url or boolean(IS/connect[@nodeField='url']) or (local-name()='Script') or contains(local-name(),'Shader')"
                       role="error"
                       location="/X3D/Scene/TextureBackground/ImageTexture[1]">
      <svrl:text>&lt;ImageTexture DEF='LegalChild1'/&gt; has no value(s) in url='' array </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:failed-assert test="@USE or @url or boolean(IS/connect[@nodeField='url']) or (local-name()='Script') or contains(local-name(),'Shader')"
                       role="error"
                       location="/X3D/Scene/TextureBackground/MovieTexture">
      <svrl:text>&lt;MovieTexture DEF='LegalChild2'/&gt; has no value(s) in url='' array </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(local-name()='MovieTexture') and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))"
                           role="warning"
                           location="/X3D/Scene/TextureBackground/MovieTexture">
      <svrl:text>&lt;MovieTexture DEF='LegalChild2'/&gt; is missing description which is important for accessibility and usability.  Example: description='MovieTexture video/sound of ___ is playing...' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="PixelTexture"/>
   <svrl:successful-report test="not(@USE) and ($defaultImage)"
                           role="warning"
                           location="/X3D/Scene/TextureBackground/PixelTexture">
      <svrl:text>&lt;PixelTexture DEF='LegalChild3' image='0 0 0'/&gt; has empty or default image array values </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/TextureBackground/Group">
      <svrl:text>&lt;Group DEF='IllegalTextureBackgroundChild'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ImageTexture | MovieTexture"/>
   <svrl:failed-assert test="@USE or @url or boolean(IS/connect[@nodeField='url']) or (local-name()='Script') or contains(local-name(),'Shader')"
                       role="error"
                       location="/X3D/Scene/TextureBackground/ImageTexture[2]">
      <svrl:text>&lt;ImageTexture DEF='IllegalTextureBackgroundChildContainerField'/&gt; has no value(s) in url='' array </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Group"/>
   <svrl:failed-assert test="not(contains($DEF,' '))"
                       role="error"
                       location="/X3D/Scene/Group[5]">
      <svrl:text>&lt;Group DEF='Embedded Blanks DEF'/&gt; has embedded space character(s) in DEF name </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/Group[5]">
      <svrl:text>&lt;Group DEF='Embedded Blanks DEF'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Group"/>
   <svrl:failed-assert test="not(contains($USE,' '))"
                       role="error"
                       location="/X3D/Scene/Group[6]">
      <svrl:text>&lt;Group USE='Embedded Blanks USE'/&gt;  has embedded space character(s) in USE name </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(@USE) and (string-length($USE) &gt; 0) and (count(//*[@DEF=$USE]) = 0)"
                           role="error"
                           location="/X3D/Scene/Group[6]">
      <svrl:text>&lt;Group USE='Embedded Blanks USE'/&gt; USE node has no matching DEF node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:failed-assert test="not(contains($DEF,'&#34;'))"
                       role="error"
                       location="/X3D/Scene/Group[7]">
      <svrl:text>&lt;Group DEF='"QuotedDEF"'/&gt; has embedded quotation mark(s) in DEF name </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/Group[7]">
      <svrl:text>&lt;Group DEF='"QuotedDEF"'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Group"/>
   <svrl:failed-assert test="not(contains($USE,'&#34;'))"
                       role="error"
                       location="/X3D/Scene/Group[8]">
      <svrl:text>&lt;Group USE='"QuotedUSE"'/&gt; has embedded quotation mark(s) in USE name </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(@USE) and (string-length($USE) &gt; 0) and (count(//*[@DEF=$USE]) = 0)"
                           role="error"
                           location="/X3D/Scene/Group[8]">
      <svrl:text>&lt;Group USE='"QuotedUSE"'/&gt; USE node has no matching DEF node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="MetadataSet"/>
   <svrl:failed-assert test="(string-length($name) &gt; 0) or (string-length(@USE) &gt; 0) or IS/connect or ($nodeName = 'HAnimMotion')"
                       role="error"
                       location="/X3D/Scene/MetadataSet">
      <svrl:text>&lt;MetadataSet DEF=''/&gt; name field is required </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="MetadataBoolean"/>
   <svrl:failed-assert test="(string-length($name) &gt; 0) or (string-length(@USE) &gt; 0) or IS/connect or ($nodeName = 'HAnimMotion')"
                       role="error"
                       location="/X3D/Scene/MetadataSet/MetadataBoolean">
      <svrl:text>&lt;MetadataBoolean DEF=''/&gt; name field is required </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(/X3D/@version='3.3') or (/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/Scene/MetadataSet/MetadataBoolean">
      <svrl:text>&lt;MetadataBoolean DEF=''/&gt; requires X3D version='3.3' or greater, but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="MetadataFloat | MetadataDouble"/>
   <svrl:failed-assert test="(string-length($name) &gt; 0) or (string-length(@USE) &gt; 0) or IS/connect or ($nodeName = 'HAnimMotion')"
                       role="error"
                       location="/X3D/Scene/MetadataSet/MetadataFloat">
      <svrl:text>&lt;MetadataFloat DEF=''/&gt; name field is required </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="MetadataFloat | MetadataDouble"/>
   <svrl:failed-assert test="(string-length($name) &gt; 0) or (string-length(@USE) &gt; 0) or IS/connect or ($nodeName = 'HAnimMotion')"
                       role="error"
                       location="/X3D/Scene/MetadataSet/MetadataDouble">
      <svrl:text>&lt;MetadataDouble DEF=''/&gt; name field is required </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(@containerField='metadata') or ( @containerField='value') or not(@containerField) or (string-length(@containerField) = 0)"
                       role="error"
                       location="/X3D/Scene/MetadataSet/MetadataDouble">
      <svrl:text>&lt;MetadataDouble DEF='' name=''/&gt; containerField='illegalName' but must be containerField='metadata' (default), or else containerField='value' when parent node is MetadataSet </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(parent::MetadataSet) and not((@containerField='metadata') or (@containerField='value') or not(@containerField) or (string-length(@containerField) = 0))"
                           role="error"
                           location="/X3D/Scene/MetadataSet/MetadataDouble">
      <svrl:text>&lt;MetadataDouble DEF='' name=''/&gt; containerField='illegalName' can only have containerField='metadata' or containerField='value' when parent node is MetadataSet </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="MetadataString"/>
   <svrl:failed-assert test="(string-length($name) &gt; 0) or (string-length(@USE) &gt; 0) or IS/connect or ($nodeName = 'HAnimMotion')"
                       role="error"
                       location="/X3D/Scene/MetadataString">
      <svrl:text>&lt;MetadataString DEF='IllegalMetadataContainerField'/&gt; name field is required </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not(parent::MetadataSet) and (@containerField='value')"
                           role="error"
                           location="/X3D/Scene/MetadataString">
      <svrl:text>&lt;MetadataString DEF='IllegalMetadataContainerField' name=''/&gt; containerField='value' is only allowed when parent node is MetadataSet </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ScalarInterpolator"/>
   <svrl:successful-report test="((@DEF) and not(//ROUTE[@toNode=$DEF]) and not((local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect)) and (contains(local-name(),'Interpolator') or contains(local-name(),'Sequencer'))"
                           role="warning"
                           location="/X3D/Scene/ScalarInterpolator[2]">
      <svrl:text>&lt;ScalarInterpolator DEF='IllegalDecimalPointsTest'/&gt; is missing ROUTE to receive input events, for example &lt;ROUTE fromNode='SomeTimeSensorDEFname' fromField='fraction_changed' toNode='IllegalDecimalPointsTest' toField='set_fraction'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')"
                           role="warning"
                           location="/X3D/Scene/ScalarInterpolator[2]">
      <svrl:text>&lt;ScalarInterpolator DEF='IllegalDecimalPointsTest'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='IllegalDecimalPointsTest' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or $keyCount=$keyValueCount"
                       role="error"
                       location="/X3D/Scene/ScalarInterpolator[2]">
      <svrl:text>&lt;ScalarInterpolator DEF='IllegalDecimalPointsTest'/&gt; key array (size=2) must match keyValue array (size=3 values) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ScalarInterpolator"/>
   <svrl:successful-report test="((@DEF) and not(//ROUTE[@toNode=$DEF]) and not((local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect)) and (contains(local-name(),'Interpolator') or contains(local-name(),'Sequencer'))"
                           role="warning"
                           location="/X3D/Scene/ScalarInterpolator[3]">
      <svrl:text>&lt;ScalarInterpolator DEF='IllegalMinusSignsTest'/&gt; is missing ROUTE to receive input events, for example &lt;ROUTE fromNode='SomeTimeSensorDEFname' fromField='fraction_changed' toNode='IllegalMinusSignsTest' toField='set_fraction'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')"
                           role="warning"
                           location="/X3D/Scene/ScalarInterpolator[3]">
      <svrl:text>&lt;ScalarInterpolator DEF='IllegalMinusSignsTest'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='IllegalMinusSignsTest' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or $keyCount=$keyValueCount"
                       role="error"
                       location="/X3D/Scene/ScalarInterpolator[3]">
      <svrl:text>&lt;ScalarInterpolator DEF='IllegalMinusSignsTest'/&gt; key array (size=3) must match keyValue array (size=2 values) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Group"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/Group[9]">
      <svrl:text>&lt;Group DEF='EmptyGroup'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Switch"/>
   <svrl:failed-assert test="(/X3D[(@profile='Interactive') or (@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Grouping'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/Switch[1]">
      <svrl:text>&lt;Switch DEF=''/&gt; requires at least &lt;component name='Grouping' level='2'/&gt; or &lt;X3D profile='Interactive'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="Switch"/>
   <svrl:successful-report test="ROUTE" role="warning" location="/X3D/Scene/Switch[2]">
      <svrl:text>&lt;Switch DEF='EmptySwitchContainsROUTE'/&gt; child element ROUTE  is ambiguous since it is not a node and not a switchable child... </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="ROUTE" role="hint" location="/X3D/Scene/Switch[2]">
      <svrl:text>&lt;ROUTE fromNode='NoFields' fromField='blah' toNode='NoFields' toField='blah'/&gt; cannot be contained inside of &lt;Switch DEF='EmptySwitchContainsROUTE'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:successful-report test="not(//*[@DEF=$fromNode])"
                           role="error"
                           location="/X3D/Scene/Switch[2]/ROUTE">
      <svrl:text>&lt;ROUTE fromNode='NoFields' fromField='blah' toNode='NoFields' toField='blah'/&gt; has no corresponding fromNode with DEF='NoFields' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(//*[@DEF=$toNode ])"
                           role="error"
                           location="/X3D/Scene/Switch[2]/ROUTE">
      <svrl:text>&lt;ROUTE fromNode='NoFields' fromField='blah' toNode='NoFields' toField='blah'/&gt; has no corresponding toNode with DEF='NoFields' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@fromNode = @toNode) and (@fromField = @toField)"
                           role="error"
                           location="/X3D/Scene/Switch[2]/ROUTE">
      <svrl:text>&lt;ROUTE fromNode='NoFields' fromField='blah' toNode='NoFields' toField='blah'/&gt; incorrectly routes to itself </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="CADLayer"/>
   <svrl:failed-assert test="(/X3D/@version='3.1') or (/X3D/@version='3.2') or (/X3D/@version='3.3') or (/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/Scene/CADLayer[2]">
      <svrl:text>&lt;CADLayer DEF=''/&gt; requires X3D version='3.1' or greater, but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="CADAssembly"/>
   <svrl:failed-assert test="(/X3D/@version='3.1') or (/X3D/@version='3.2') or (/X3D/@version='3.3') or (/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/Scene/CADLayer[2]/CADAssembly">
      <svrl:text>&lt;CADAssembly DEF=''/&gt; requires X3D version='3.1' or greater, but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="CADPart"/>
   <svrl:failed-assert test="(/X3D/@version='3.1') or (/X3D/@version='3.2') or (/X3D/@version='3.3') or (/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/Scene/CADLayer[2]/CADAssembly/CADPart">
      <svrl:text>&lt;CADPart DEF=''/&gt; requires X3D version='3.1' or greater, but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="CADFace"/>
   <svrl:failed-assert test="(/X3D/@version='3.1') or (/X3D/@version='3.2') or (/X3D/@version='3.3') or (/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/Scene/CADLayer[2]/CADAssembly/CADPart/CADFace[1]">
      <svrl:text>&lt;CADFace DEF='CADFaceOneShapeChild'/&gt; requires X3D version='3.1' or greater, but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/CADLayer[2]/CADAssembly/CADPart/CADFace[1]/Transform/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))"
                       role="warning"
                       location="/X3D/Scene/CADLayer[2]/CADAssembly/CADPart/CADFace[1]/Transform/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child Appearance or Color </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))"
                       role="warning"
                       location="/X3D/Scene/CADLayer[2]/CADAssembly/CADPart/CADFace[1]/Transform/Shape">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="CADFace"/>
   <svrl:failed-assert test="(/X3D/@version='3.1') or (/X3D/@version='3.2') or (/X3D/@version='3.3') or (/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/Scene/CADLayer[2]/CADAssembly/CADPart/CADFace[2]">
      <svrl:text>&lt;CADFace DEF='CADFaceMultipleShapeChildren'/&gt; requires X3D version='3.1' or greater, but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="Transform[not(@containerField='shape')]"
                           role="error"
                           location="/X3D/Scene/CADLayer[2]/CADAssembly/CADPart/CADFace[2]">
      <svrl:text>&lt;CADFace DEF='CADFaceMultipleShapeChildren' name=''/&gt; contains Transform node that has incorrect containerField='', should be containerField='shape' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Transform"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/CADLayer[2]/CADAssembly/CADPart/CADFace[2]/Transform/Shape[1]">
      <svrl:text>&lt;Shape DEF=''/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))"
                       role="warning"
                       location="/X3D/Scene/CADLayer[2]/CADAssembly/CADPart/CADFace[2]/Transform/Shape[1]">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child Appearance or Color </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))"
                       role="warning"
                       location="/X3D/Scene/CADLayer[2]/CADAssembly/CADPart/CADFace[2]/Transform/Shape[1]">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/CADLayer[2]/CADAssembly/CADPart/CADFace[2]/Transform/Shape[2]">
      <svrl:text>&lt;Shape DEF=''/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))"
                       role="warning"
                       location="/X3D/Scene/CADLayer[2]/CADAssembly/CADPart/CADFace[2]/Transform/Shape[2]">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child Appearance or Color </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))"
                       role="warning"
                       location="/X3D/Scene/CADLayer[2]/CADAssembly/CADPart/CADFace[2]/Transform/Shape[2]">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="GeoOrigin"/>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[@name='Geospatial'][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/GeoOrigin">
      <svrl:text>&lt;GeoOrigin DEF='DeprecatedNodeUnquotedGeoSystem'/&gt; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='Geospatial' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="($geoSystem1='') or ($geoSystem1='GD') or ($geoSystem1='UTM') or ($geoSystem1='GC')"
                       role="error"
                       location="/X3D/Scene/GeoOrigin">
      <svrl:text>&lt;GeoOrigin DEF='DeprecatedNodeUnquotedGeoSystem'/&gt; geoSystem='"GD WE"' has illegal value (allowed values are GD, UTM, GC) </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="2*($length - string-length(translate($value, ' ', '')) + 1) != ($length - string-length(translate(@geoSystem, '&#34;', '')))"
                           role="error"
                           location="/X3D/Scene/GeoOrigin">
      <svrl:text>&lt;GeoOrigin DEF='DeprecatedNodeUnquotedGeoSystem'/&gt; geoSystem='"GD WE"' has incorrectly quoted values, example value is geoSystem='"GD" "WE"' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="((@geoCoords='0 0 0') or (@geoCoords='0.0 0.0 0.0')) and not(@USE)"
                           role="warning"
                           location="/X3D/Scene/GeoOrigin">
      <svrl:text>&lt;GeoOrigin DEF='DeprecatedNodeUnquotedGeoSystem'/&gt; geoCoords='0 0 0', instead needs actual location value </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:successful-report test="contains(local-name(),'Viewpoint') and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))"
                           role="warning"
                           location="/X3D/Scene/Viewpoint[3]">
      <svrl:text>&lt;Viewpoint DEF='ViewHumanoidMissingCenterOfRotation'/&gt; is missing description which is important for accessibility and usability.  Example: description='initial view, rotate to examine object' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(local-name()='OrthoViewpoint') and not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Navigation'][number(@level) ge 3])) or (count(preceding::*[local-name()='OrthoViewpoint']) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/Viewpoint[3]">
      <svrl:text>&lt;Viewpoint DEF='ViewHumanoidMissingCenterOfRotation'/&gt; requires at least &lt;component name='Navigation' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(preceding-sibling::HAnimHumanoid or following-sibling::HAnimHumanoid) and (not(@centerOfRotation) or (string-length(@centerOfRotation)=0) or (@centerOfRotation = '0 0 0') or (@centerOfRotation = '0.0 0.0 0.0'))"
                           role="warning"
                           location="/X3D/Scene/Viewpoint[3]">
      <svrl:text>&lt;Viewpoint DEF='ViewHumanoidMissingCenterOfRotation'/&gt; centerOfRotation='0 0 0', consider setting centerOfRotation to value of sibling &lt;HAnimHumanoid DEF='ViewHumanoidMissingCenterOfRotation' name='HumanoidRoot' center='0 0 0 0 0 0'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))"
                       role="warning"
                       location="/X3D/Scene/Shape[27]">
      <svrl:text>&lt;Shape DEF=''/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Appearance"/>
   <svrl:fired-rule context="Material"/>
   <svrl:successful-report test="contains($diffuseColor,'-')"
                           role="warning"
                           location="/X3D/Scene/Shape[27]/Appearance/Material">
      <svrl:text>&lt;Material DEF='IllegalColorValuesMaterial'/&gt; diffuseColor='-1 1.2 0.3 0.4' contains a negative value </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($diffuseColor,' 2') or contains($diffuseColor,' 3') or contains($diffuseColor,' 4') or contains($diffuseColor,' 5') or contains($diffuseColor,' 6') or contains($diffuseColor,' 7') or contains($diffuseColor,' 8') or contains($diffuseColor,' 9') or contains($diffuseColor,' 1.1') or contains($diffuseColor,' 1.2') or contains($diffuseColor,' 1.3') or contains($diffuseColor,' 1.4') or contains($diffuseColor,' 1.5') or contains($diffuseColor,' 1.6') or contains($diffuseColor,' 1.7') or contains($diffuseColor,' 1.8') or contains($diffuseColor,' 1.9')"
                           role="warning"
                           location="/X3D/Scene/Shape[27]/Appearance/Material">
      <svrl:text>&lt;Material DEF='IllegalColorValuesMaterial'/&gt; diffuseColor='-1 1.2 0.3 0.4' contains a value greater than 1 </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(normalize-space($diffuseColor)) &gt; 0) and ($diffuseColorCount != 3)"
                           role="warning"
                           location="/X3D/Scene/Shape[27]/Appearance/Material">
      <svrl:text>&lt;Material DEF='IllegalColorValuesMaterial'/&gt; diffuseColor='-1 1.2 0.3 0.4' has 4 values instead of 3 </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($emissiveColor,'-')"
                           role="warning"
                           location="/X3D/Scene/Shape[27]/Appearance/Material">
      <svrl:text>&lt;Material DEF='IllegalColorValuesMaterial'/&gt; emissiveColor='-1 1.2 0.3 0.4' contains a negative value </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($emissiveColor,' 2') or contains($emissiveColor,' 3') or contains($emissiveColor,' 4') or contains($emissiveColor,' 5') or contains($emissiveColor,' 6') or contains($emissiveColor,' 7') or contains($emissiveColor,' 8') or contains($emissiveColor,' 9') or contains($emissiveColor,' 1.1') or contains($emissiveColor,' 1.2') or contains($emissiveColor,' 1.3') or contains($emissiveColor,' 1.4') or contains($emissiveColor,' 1.5') or contains($emissiveColor,' 1.6') or contains($emissiveColor,' 1.7') or contains($emissiveColor,' 1.8') or contains($emissiveColor,' 1.9')"
                           role="warning"
                           location="/X3D/Scene/Shape[27]/Appearance/Material">
      <svrl:text>&lt;Material DEF='IllegalColorValuesMaterial'/&gt; emissiveColor='-1 1.2 0.3 0.4' contains a value greater than 1 </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(normalize-space($emissiveColor)) &gt; 0) and ($emissiveColorCount != 3)"
                           role="warning"
                           location="/X3D/Scene/Shape[27]/Appearance/Material">
      <svrl:text>&lt;Material DEF='IllegalColorValuesMaterial'/&gt; emissiveColor='-1 1.2 0.3 0.4' has 4 values instead of 3 </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($specularColor,'-')"
                           role="warning"
                           location="/X3D/Scene/Shape[27]/Appearance/Material">
      <svrl:text>&lt;Material DEF='IllegalColorValuesMaterial'/&gt; specularColor='-1 1.2 0.3 0.4' contains a negative value </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($specularColor,' 2') or contains($specularColor,' 3') or contains($specularColor,' 4') or contains($specularColor,' 5') or contains($specularColor,' 6') or contains($specularColor,' 7') or contains($specularColor,' 8') or contains($specularColor,' 9') or contains($specularColor,' 1.1') or contains($specularColor,' 1.2') or contains($specularColor,' 1.3') or contains($specularColor,' 1.4') or contains($specularColor,' 1.5') or contains($specularColor,' 1.6') or contains($specularColor,' 1.7') or contains($specularColor,' 1.8') or contains($specularColor,' 1.9')"
                           role="warning"
                           location="/X3D/Scene/Shape[27]/Appearance/Material">
      <svrl:text>&lt;Material DEF='IllegalColorValuesMaterial'/&gt; specularColor='-1 1.2 0.3 0.4' contains a value greater than 1 </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(normalize-space($specularColor)) &gt; 0) and ($specularColorCount != 3)"
                           role="warning"
                           location="/X3D/Scene/Shape[27]/Appearance/Material">
      <svrl:text>&lt;Material DEF='IllegalColorValuesMaterial'/&gt; specularColor='-1 1.2 0.3 0.4' has 4 values instead of 3 </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Background"/>
   <svrl:successful-report test="contains($skyColor,'-')"
                           role="warning"
                           location="/X3D/Scene/Background[2]">
      <svrl:text>&lt;Background DEF='BackgroundColorProblems'/&gt; contains a negative skyColor array value, skyColor='-1 1.2 0.3 0.4' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($skyColor,' 2') or contains($skyColor,' 3') or contains($skyColor,' 4') or contains($skyColor,' 5') or contains($skyColor,' 6') or contains($skyColor,' 7') or contains($skyColor,' 8') or contains($skyColor,' 9') or contains($skyColor,' 1.1') or contains($skyColor,' 1.2') or contains($skyColor,' 1.3') or contains($skyColor,' 1.4') or contains($skyColor,' 1.5') or contains($skyColor,' 1.6') or contains($skyColor,' 1.7') or contains($skyColor,' 1.8') or contains($skyColor,' 1.9')"
                           role="warning"
                           location="/X3D/Scene/Background[2]">
      <svrl:text>&lt;Background DEF='BackgroundColorProblems'/&gt; skyColor='-1 1.2 0.3 0.4' contains a value greater than 1 </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(normalize-space($skyColor)) &gt; 0) and (($skyColorCount div 3)!=round($skyColorCount div 3))"
                           role="warning"
                           location="/X3D/Scene/Background[2]">
      <svrl:text>&lt;Background DEF='BackgroundColorProblems'/&gt; skyColor array has 1.333333333333333333 triples, likely has incorrect number of values or missing whitespace </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($groundColor,'-')"
                           role="warning"
                           location="/X3D/Scene/Background[2]">
      <svrl:text>&lt;Background DEF='BackgroundColorProblems'/&gt; contains a negative groundColor array value, groundColor='-1 1.2 0.3 0.4' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($groundColor,' 2') or contains($groundColor,' 3') or contains($groundColor,' 4') or contains($groundColor,' 5') or contains($groundColor,' 6') or contains($groundColor,' 7') or contains($groundColor,' 8') or contains($groundColor,' 9') or contains($groundColor,' 1.1') or contains($groundColor,' 1.2') or contains($groundColor,' 1.3') or contains($groundColor,' 1.4') or contains($groundColor,' 1.5') or contains($groundColor,' 1.6') or contains($groundColor,' 1.7') or contains($groundColor,' 1.8') or contains($groundColor,' 1.9')"
                           role="warning"
                           location="/X3D/Scene/Background[2]">
      <svrl:text>&lt;Background DEF='BackgroundColorProblems'/&gt; groundColor='-1 1.2 0.3 0.4' contains a value greater than 1 </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(normalize-space($groundColor)) &gt; 0) and (($groundColorCount div 3)!=round($groundColorCount div 3))"
                           role="warning"
                           location="/X3D/Scene/Background[2]">
      <svrl:text>&lt;Background DEF='BackgroundColorProblems'/&gt; groundColor array has 1.333333333333333333 triples, likely has incorrect number of values or missing whitespace </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Fog"/>
   <svrl:successful-report test="contains($color,'-')"
                           role="warning"
                           location="/X3D/Scene/Fog">
      <svrl:text>&lt;Fog DEF='FogColorProblems'/&gt; contains a negative color array value, color='-1 1.2 0.3 0.4' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($color,' 2') or contains($color,' 3') or contains($color,' 4') or contains($color,' 5') or contains($color,' 6') or contains($color,' 7') or contains($color,' 8') or contains($color,' 9') or contains($color,' 1.1') or contains($color,' 1.2') or contains($color,' 1.3') or contains($color,' 1.4') or contains($color,' 1.5') or contains($color,' 1.6') or contains($color,' 1.7') or contains($color,' 1.8') or contains($color,' 1.9')"
                           role="warning"
                           location="/X3D/Scene/Fog">
      <svrl:text>&lt;Fog DEF='FogColorProblems'/&gt; contains a color array value greater than 1, color='-1 1.2 0.3 0.4' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(normalize-space($color)) &gt; 0) and ($colorCount != 3)"
                           role="warning"
                           location="/X3D/Scene/Fog">
      <svrl:text>&lt;Fog DEF='FogColorProblems'/&gt; color='-1 1.2 0.3 0.4' has 4 values instead of 3 </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="DirectionalLight | PointLight | SpotLight"/>
   <svrl:successful-report test="contains($color,'-')"
                           role="warning"
                           location="/X3D/Scene/DirectionalLight">
      <svrl:text>&lt;DirectionalLight DEF='DirectionalLightColorProblems'/&gt; contains a negative color array value, color='-1 1.2 0.3 0.4' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($color,' 2') or contains($color,' 3') or contains($color,' 4') or contains($color,' 5') or contains($color,' 6') or contains($color,' 7') or contains($color,' 8') or contains($color,' 9') or contains($color,' 1.1') or contains($color,' 1.2') or contains($color,' 1.3') or contains($color,' 1.4') or contains($color,' 1.5') or contains($color,' 1.6') or contains($color,' 1.7') or contains($color,' 1.8') or contains($color,' 1.9')"
                           role="warning"
                           location="/X3D/Scene/DirectionalLight">
      <svrl:text>&lt;DirectionalLight DEF='DirectionalLightColorProblems'/&gt; contains a color array value greater than 1, color='-1 1.2 0.3 0.4' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(normalize-space($color)) &gt; 0) and ($colorCount != 3)"
                           role="warning"
                           location="/X3D/Scene/DirectionalLight">
      <svrl:text>&lt;DirectionalLight DEF='DirectionalLightColorProblems'/&gt; color='-1 1.2 0.3 0.4' has 4 values instead of 3 </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="DirectionalLight | PointLight | SpotLight"/>
   <svrl:successful-report test="contains($color,'-')"
                           role="warning"
                           location="/X3D/Scene/PointLight[2]">
      <svrl:text>&lt;PointLight DEF='PointLightColorProblems'/&gt; contains a negative color array value, color='-1 1.2 0.3 0.4' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($color,' 2') or contains($color,' 3') or contains($color,' 4') or contains($color,' 5') or contains($color,' 6') or contains($color,' 7') or contains($color,' 8') or contains($color,' 9') or contains($color,' 1.1') or contains($color,' 1.2') or contains($color,' 1.3') or contains($color,' 1.4') or contains($color,' 1.5') or contains($color,' 1.6') or contains($color,' 1.7') or contains($color,' 1.8') or contains($color,' 1.9')"
                           role="warning"
                           location="/X3D/Scene/PointLight[2]">
      <svrl:text>&lt;PointLight DEF='PointLightColorProblems'/&gt; contains a color array value greater than 1, color='-1 1.2 0.3 0.4' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(normalize-space($color)) &gt; 0) and ($colorCount != 3)"
                           role="warning"
                           location="/X3D/Scene/PointLight[2]">
      <svrl:text>&lt;PointLight DEF='PointLightColorProblems'/&gt; color='-1 1.2 0.3 0.4' has 4 values instead of 3 </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="DirectionalLight | PointLight | SpotLight"/>
   <svrl:successful-report test="contains($color,'-')"
                           role="warning"
                           location="/X3D/Scene/SpotLight">
      <svrl:text>&lt;SpotLight DEF='SpotLightColorProblems'/&gt; contains a negative color array value, color='-1 1.2 0.3 0.4' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($color,' 2') or contains($color,' 3') or contains($color,' 4') or contains($color,' 5') or contains($color,' 6') or contains($color,' 7') or contains($color,' 8') or contains($color,' 9') or contains($color,' 1.1') or contains($color,' 1.2') or contains($color,' 1.3') or contains($color,' 1.4') or contains($color,' 1.5') or contains($color,' 1.6') or contains($color,' 1.7') or contains($color,' 1.8') or contains($color,' 1.9')"
                           role="warning"
                           location="/X3D/Scene/SpotLight">
      <svrl:text>&lt;SpotLight DEF='SpotLightColorProblems'/&gt; contains a color array value greater than 1, color='-1 1.2 0.3 0.4' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(normalize-space($color)) &gt; 0) and ($colorCount != 3)"
                           role="warning"
                           location="/X3D/Scene/SpotLight">
      <svrl:text>&lt;SpotLight DEF='SpotLightColorProblems'/&gt; color='-1 1.2 0.3 0.4' has 4 values instead of 3 </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ClipPlane"/>
   <svrl:failed-assert test="(/X3D/@version='3.2') or (/X3D/@version='3.3') or (/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/Scene/ClipPlane">
      <svrl:text>&lt;ClipPlane DEF='IllegalPlaneEquationValues'/&gt; requires X3D version='3.2' or greater, but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(string-length(normalize-space(@plane)) &gt; 0) and ($planeCount != 4)"
                           role="warning"
                           location="/X3D/Scene/ClipPlane">
      <svrl:text>&lt;ClipPlane DEF='IllegalPlaneEquationValues'/&gt; plane attribute has 5 values, 4 are required for a valid plane equation </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="contains($plane,' 2') or contains($plane,' 3') or contains($plane,' 4') or contains($plane,' 5') or contains($plane,' 6') or contains($plane,' 7') or contains($plane,' 8') or contains($plane,' 9') or contains($plane,' 1.1') or contains($plane,' 1.2') or contains($plane,' 1.3') or contains($plane,' 1.4') or contains($plane,' 1.5') or contains($plane,' 1.6') or contains($plane,' 1.7') or contains($plane,' 1.8') or contains($plane,' 1.9')"
                           role="warning"
                           location="/X3D/Scene/ClipPlane">
      <svrl:text>&lt;ClipPlane DEF='IllegalPlaneEquationValues'/&gt; contains a plane equation value greater than 1, plane='1 2 3 4 5' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Rendering'][number(@level) ge 5]) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/ClipPlane">
      <svrl:text>&lt;ClipPlane DEF='IllegalPlaneEquationValues'/&gt; requires at least &lt;component name='Rendering' level='5'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimHumanoid"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])"
                           role="warning"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1'/&gt; has the same name='JimDandy' as a following HAnimHumanoid node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@DEF) &gt; 0) and (string-length(@name) &gt; 0) and not(contains(@DEF,concat('_',@name)))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; DEF value does not contain correctly modified version of name value (for example, DEF='myPrefix_nameValue' e.g. DEF='myPrefix_JimDandy') - see HAnim section C.2 Humanoid, VRML Binding </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[(@name='HAnim') or (@name='H-Anim')][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1'/&gt; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='HAnim' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="@USE or (@name and (string-length(@name) &gt; 0) and not(preceding::*[local-name() = $nodeName][@name = $nameAttribute]) and not(following::*[local-name() = $nodeName][@name = $nameAttribute]))"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1'/&gt; name='JimDandy' is not unique </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; version='1.1' with X3D version='3.0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@version = '1.0') and not(@version = '2.0') and not(string-length(@USE) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; version='1.1' is illegal, only HAnimHumanoid version='2.0; (for X3D version 4) or HAnimHumanoid version='1.0; (for X3D version 3) is allowed </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($isHAnim1) and not($isHAnim2)"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; $hanimVersion='1.1' is illegal, only HAnimHumanoid version='2.0; (for X3D version 4) or HAnimHumanoid version='1.0; (for X3D version 3) is allowed </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(count(preceding-sibling::HAnimHumanoid) = 0) and (count(following-sibling::HAnimHumanoid) &gt; 0)"
                           role="warning"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; HAnim specification section E.4 recommends a common parent &lt;Group DEF='HumanoidGroup'/&gt; when multiple HAnimHumanoid models are present in a single scene </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>==================================================================================================================== </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; node count(HAnimJoint)           within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; node count(HAnimSegment)         within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; node count(HAnimSite)            within HAnimHumanoid             = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; node count(HAnimSite//Viewpoint) within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; node count(HAnimDisplacer)       within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; node count(&lt;HAnimJoint   USE='*' containerField = 'joints'/&gt;)     = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; node count(&lt;HAnimSegment USE='*' containerField = 'segments'/&gt;)   = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; node count(&lt;HAnimSite    USE='*' containerField = 'sites'/&gt;)      = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName1' name='JimDandy'/&gt; node count(&lt;HAnimSite    DEF='*' name ends with '_view'/&gt;)        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[1]">
      <svrl:text>==================================================================================================================== </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimHumanoid"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])"
                           role="warning"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2'/&gt; has the same name='JimDandy' as a preceding HAnimHumanoid node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@DEF) &gt; 0) and (string-length(@name) &gt; 0) and not(contains(@DEF,concat('_',@name)))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; DEF value does not contain correctly modified version of name value (for example, DEF='myPrefix_nameValue' e.g. DEF='myPrefix_JimDandy') - see HAnim section C.2 Humanoid, VRML Binding </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="@USE or (@name and (string-length(@name) &gt; 0) and not(preceding::*[local-name() = $nodeName][@name = $nameAttribute]) and not(following::*[local-name() = $nodeName][@name = $nameAttribute]))"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2'/&gt; name='JimDandy' is not unique </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; version='2.0' with X3D version='3.0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(starts-with(@version,'2')) and starts-with(ancestor::X3D/@version,'3')"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; version='2.0' requires X3D version 4. Either upgrade model from X3D version='3.0' to 4.0 or downgrade HAnimHumanoid to  version='1' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="descendant::*[local-name()='HAnimHumanoid']"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; cannot contain another &lt;HAnimHumanoid DEF="incorrectlyNestedHumanoidMissingNameAttribute" name=""/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$childrenNodes"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; cannot contain any containerField='children' nodes:  &lt;Group DEF="HumanoidCannotContainChildrenNodes" name="IllegalGroupChildrenNode" containerField="children"/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(count(*[starts-with(local-name(),'Coordinate')]) &gt; 1)"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; contains more than one Coordinate/CoordinateDouble node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(count(Coordinate[@containerField != 'skinCoord']) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; contains &lt;Coordinate DEF='HAnimCoordinateIncorrectContainerField' containerField='coord'/&gt; node with incorrect containerField value, must be containerField='skinCoord' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(count(CoordinateDouble[@containerField != 'skinCoord']) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; contains &lt;CoordinateDouble DEF='HAnimCoordinateDoubleIncorrectContainerField' containerField='coord'/&gt; node with incorrect containerField value, must be containerField='skinCoord' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(count(Normal[@containerField != 'skinNormal']) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; contains &lt;Normal DEF='HAnimNormalIncorrectContainerField' containerField='normal'/&gt; node with incorrect containerField value, must be containerField='skinNormal' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>==================================================================================================================== </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; node count(HAnimJoint)           within skeleton hierarchy        = 13</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; node count(HAnimSegment)         within skeleton hierarchy        = 2</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; node count(HAnimSite)            within HAnimHumanoid             = 3</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; node count(HAnimSite//Viewpoint) within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; node count(HAnimDisplacer)       within skeleton hierarchy        = 1</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; node count(&lt;HAnimJoint   USE='*' containerField = 'joints'/&gt;)     = 9</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; node count(&lt;HAnimSegment USE='*' containerField = 'segments'/&gt;)   = 3</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; node count(&lt;HAnimSite    USE='*' containerField = 'sites'/&gt;)      = 3</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; node count(&lt;HAnimSite    DEF='*' name ends with '_view'/&gt;)        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonJoints = $countUSEjoints)"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; has mismatched HAnimJoint    node counts, 13 within skeleton hierarchy and 9 USE nodes in joints field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not($countSkeletonSegments = $countUSEsegments)"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>&lt;HAnimHumanoid DEF='notUniqueName2' name='JimDandy'/&gt; has mismatched HAnimSegment  node counts, 2 within skeleton hierarchy and 3 USE nodes in segments field </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]">
      <svrl:text>==================================================================================================================== </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]/Group">
      <svrl:text>&lt;Group DEF='HumanoidCannotContainChildrenNodes'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[(@name='HAnim') or (@name='H-Anim')][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]">
      <svrl:text>&lt;HAnimJoint DEF=''/&gt; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='HAnim' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="$childrenNodes"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]">
      <svrl:text>&lt;HAnimJoint DEF='' name='HumanoidRoot'/&gt; cannot contain any containerField='children' nodes:  &lt;PositionInterpolator DEF="JointInterpolator" name="" containerField="children"/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="*[not((local-name()='HAnimJoint') or (local-name()='HAnimSegment') or (local-name()='HAnimSite') or (local-name()='HAnimDisplacer') or (local-name()='ProtoInstance'))]"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]">
      <svrl:text>&lt;HAnimJoint DEF='' name='HumanoidRoot'/&gt; HAnimJoint can only contain HAnimJoint, HAnimSegment, HAnimSite, HAnimDisplacer </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or (@name='humanoid_root') or (@name='sacroiliac') or (@name='l_hip') or (@name='l_knee') or (@name='l_talocrural') or (@name='l_talocalcaneonavicular') or (@name='l_cuneonavicular_1') or (@name='l_tarsometatarsal_1') or (@name='l_metatarsophalangeal_1') or (@name='l_tarsal_interphalangeal_1') or (@name='l_cuneonavicular_2') or (@name='l_tarsometatarsal_2') or (@name='l_metatarsophalangeal_2') or (@name='l_tarsal_proximal_interphalangeal_2') or (@name='l_tarsal_distal_interphalangeal_2') or (@name='l_cuneonavicular_3') or (@name='l_tarsometatarsal_3') or (@name='l_metatarsophalangeal_3') or (@name='l_tarsal_proximal_interphalangeal_3') or (@name='l_tarsal_distal_interphalangeal_3') or (@name='l_calcaneocuboid') or (@name='l_transversetarsal') or (@name='l_tarsometatarsal_4') or (@name='l_metatarsophalangeal_4') or (@name='l_tarsal_proximal_interphalangeal_4') or (@name='l_tarsal_distal_interphalangeal_4') or (@name='l_tarsometatarsal_5') or (@name='l_metatarsophalangeal_5') or (@name='l_tarsal_proximal_interphalangeal_5') or (@name='l_tarsal_distal_interphalangeal_5') or (@name='r_hip') or (@name='r_knee') or (@name='r_talocrural') or (@name='r_talocalcaneonavicular') or (@name='r_cuneonavicular_1') or (@name='r_tarsometatarsal_1') or (@name='r_metatarsophalangeal_1') or (@name='r_tarsal_interphalangeal_1') or (@name='r_cuneonavicular_2') or (@name='r_tarsometatarsal_2') or (@name='r_metatarsophalangeal_2') or (@name='r_tarsal_proximal_interphalangeal_2') or (@name='r_tarsal_distal_interphalangeal_2') or (@name='r_cuneonavicular_3') or (@name='r_tarsometatarsal_3') or (@name='r_metatarsophalangeal_3') or (@name='r_tarsal_proximal_interphalangeal_3') or (@name='r_tarsal_distal_interphalangeal_3') or (@name='r_calcaneocuboid') or (@name='r_transversetarsal') or (@name='r_tarsometatarsal_4') or (@name='r_metatarsophalangeal_4') or (@name='r_tarsal_proximal_interphalangeal_4') or (@name='r_tarsal_distal_interphalangeal_4') or (@name='r_tarsometatarsal_5') or (@name='r_metatarsophalangeal_5') or (@name='r_tarsal_proximal_interphalangeal_5') or (@name='r_tarsal_distal_interphalangeal_5') or (@name='vl5') or (@name='vl4') or (@name='vl3') or (@name='vl2') or (@name='vl1') or (@name='vt12') or (@name='vt11') or (@name='vt10') or (@name='vt9') or (@name='vt8') or (@name='vt7') or (@name='vt6') or (@name='vt5') or (@name='vt4') or (@name='vt3') or (@name='vt2') or (@name='vt1') or (@name='vc7') or (@name='vc6') or (@name='vc5') or (@name='vc4') or (@name='vc3') or (@name='vc2') or (@name='vc1') or (@name='skullbase') or (@name='l_eyelid_joint') or (@name='r_eyelid_joint') or (@name='l_eyeball_joint') or (@name='r_eyeball_joint') or (@name='l_eyebrow_joint') or (@name='r_eyebrow_joint') or (@name='temporomandibular') or (@name='l_sternoclavicular') or (@name='l_acromioclavicular') or (@name='l_shoulder') or (@name='l_elbow') or (@name='l_radiocarpal') or (@name='l_midcarpal_1') or (@name='l_carpometacarpal_1') or (@name='l_metacarpophalangeal_1') or (@name='l_carpal_interphalangeal_1') or (@name='l_midcarpal_2') or (@name='l_carpometacarpal_2') or (@name='l_metacarpophalangeal_2') or (@name='l_carpal_proximal_interphalangeal_2') or (@name='l_carpal_distal_interphalangeal_2') or (@name='l_midcarpal_3') or (@name='l_carpometacarpal_3') or (@name='l_metacarpophalangeal_3') or (@name='l_carpal_proximal_interphalangeal_3') or (@name='l_carpal_distal_interphalangeal_3') or (@name='l_midcarpal_4_5') or (@name='l_carpometacarpal_4') or (@name='l_metacarpophalangeal_4') or (@name='l_carpal_proximal_interphalangeal_4') or (@name='l_carpal_distal_interphalangeal_4') or (@name='l_carpometacarpal_5') or (@name='l_metacarpophalangeal_5') or (@name='l_carpal_proximal_interphalangeal_5') or (@name='l_carpal_distal_interphalangeal_5') or (@name='r_sternoclavicular') or (@name='r_acromioclavicular') or (@name='r_shoulder') or (@name='r_elbow') or (@name='r_radiocarpal') or (@name='r_midcarpal_1') or (@name='r_carpometacarpal_1') or (@name='r_metacarpophalangeal_1') or (@name='r_carpal_interphalangeal_1') or (@name='r_midcarpal_2') or (@name='r_carpometacarpal_2') or (@name='r_metacarpophalangeal_2') or (@name='r_carpal_proximal_interphalangeal_2') or (@name='r_carpal_distal_interphalangeal_2') or (@name='r_midcarpal_3') or (@name='r_carpometacarpal_3') or (@name='r_metacarpophalangeal_3') or (@name='r_carpal_proximal_interphalangeal_3') or (@name='r_carpal_distal_interphalangeal_3') or (@name='r_midcarpal_4_5') or (@name='r_carpometacarpal_4') or (@name='r_metacarpophalangeal_4') or (@name='r_carpal_proximal_interphalangeal_4') or (@name='r_carpal_distal_interphalangeal_4') or (@name='r_carpometacarpal_5') or (@name='r_metacarpophalangeal_5') or (@name='r_carpal_proximal_interphalangeal_5') or (@name='r_carpal_distal_interphalangeal_5')"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]">
      <svrl:text>&lt;HAnimJoint DEF='' name='HumanoidRoot'/&gt; is not a recognized name for HAnim2 HAnimJoint </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:failed-assert test="(string-length($name) &gt; 0) or (string-length(@USE) &gt; 0) or IS/connect or ($nodeName = 'HAnimMotion')"
                       role="error"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]">
      <svrl:text>&lt;HAnimJoint DEF='MissingComponentH-AnimLevel1'/&gt; name field is required </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[(@name='HAnim') or (@name='H-Anim')][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]">
      <svrl:text>&lt;HAnimJoint DEF='MissingComponentH-AnimLevel1'/&gt; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='HAnim' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="$childrenNodes"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]">
      <svrl:text>&lt;HAnimJoint DEF='MissingComponentH-AnimLevel1' name=''/&gt; cannot contain any containerField='children' nodes:  &lt;HAnimHumanoid DEF="incorrectlyNestedHumanoidMissingNameAttribute" name="" containerField="children"/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="*[not((local-name()='HAnimJoint') or (local-name()='HAnimSegment') or (local-name()='HAnimSite') or (local-name()='HAnimDisplacer') or (local-name()='ProtoInstance'))]"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]">
      <svrl:text>&lt;HAnimJoint DEF='MissingComponentH-AnimLevel1' name=''/&gt; HAnimJoint can only contain HAnimJoint, HAnimSegment, HAnimSite, HAnimDisplacer </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and not(string-length(@USE) &gt; 0) and (not(@center) or (@center='0 0 0') or (@center='0.0 0.0 0.0')) and not(@name='HumanoidRoot') and not(@containerField='skeleton')"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]">
      <svrl:text>&lt;HAnimJoint DEF='MissingComponentH-AnimLevel1' name=''/&gt; has a missing (or default zero) offset field: center='0 0 0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="HAnimHumanoid"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]">
      <svrl:text>&lt;HAnimJoint DEF='MissingComponentH-AnimLevel1' name=''/&gt; cannot contain another &lt;HAnimHumanoid DEF="incorrectlyNestedHumanoidMissingNameAttribute" name=""/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or (@name='humanoid_root') or (@name='sacroiliac') or (@name='l_hip') or (@name='l_knee') or (@name='l_talocrural') or (@name='l_talocalcaneonavicular') or (@name='l_cuneonavicular_1') or (@name='l_tarsometatarsal_1') or (@name='l_metatarsophalangeal_1') or (@name='l_tarsal_interphalangeal_1') or (@name='l_cuneonavicular_2') or (@name='l_tarsometatarsal_2') or (@name='l_metatarsophalangeal_2') or (@name='l_tarsal_proximal_interphalangeal_2') or (@name='l_tarsal_distal_interphalangeal_2') or (@name='l_cuneonavicular_3') or (@name='l_tarsometatarsal_3') or (@name='l_metatarsophalangeal_3') or (@name='l_tarsal_proximal_interphalangeal_3') or (@name='l_tarsal_distal_interphalangeal_3') or (@name='l_calcaneocuboid') or (@name='l_transversetarsal') or (@name='l_tarsometatarsal_4') or (@name='l_metatarsophalangeal_4') or (@name='l_tarsal_proximal_interphalangeal_4') or (@name='l_tarsal_distal_interphalangeal_4') or (@name='l_tarsometatarsal_5') or (@name='l_metatarsophalangeal_5') or (@name='l_tarsal_proximal_interphalangeal_5') or (@name='l_tarsal_distal_interphalangeal_5') or (@name='r_hip') or (@name='r_knee') or (@name='r_talocrural') or (@name='r_talocalcaneonavicular') or (@name='r_cuneonavicular_1') or (@name='r_tarsometatarsal_1') or (@name='r_metatarsophalangeal_1') or (@name='r_tarsal_interphalangeal_1') or (@name='r_cuneonavicular_2') or (@name='r_tarsometatarsal_2') or (@name='r_metatarsophalangeal_2') or (@name='r_tarsal_proximal_interphalangeal_2') or (@name='r_tarsal_distal_interphalangeal_2') or (@name='r_cuneonavicular_3') or (@name='r_tarsometatarsal_3') or (@name='r_metatarsophalangeal_3') or (@name='r_tarsal_proximal_interphalangeal_3') or (@name='r_tarsal_distal_interphalangeal_3') or (@name='r_calcaneocuboid') or (@name='r_transversetarsal') or (@name='r_tarsometatarsal_4') or (@name='r_metatarsophalangeal_4') or (@name='r_tarsal_proximal_interphalangeal_4') or (@name='r_tarsal_distal_interphalangeal_4') or (@name='r_tarsometatarsal_5') or (@name='r_metatarsophalangeal_5') or (@name='r_tarsal_proximal_interphalangeal_5') or (@name='r_tarsal_distal_interphalangeal_5') or (@name='vl5') or (@name='vl4') or (@name='vl3') or (@name='vl2') or (@name='vl1') or (@name='vt12') or (@name='vt11') or (@name='vt10') or (@name='vt9') or (@name='vt8') or (@name='vt7') or (@name='vt6') or (@name='vt5') or (@name='vt4') or (@name='vt3') or (@name='vt2') or (@name='vt1') or (@name='vc7') or (@name='vc6') or (@name='vc5') or (@name='vc4') or (@name='vc3') or (@name='vc2') or (@name='vc1') or (@name='skullbase') or (@name='l_eyelid_joint') or (@name='r_eyelid_joint') or (@name='l_eyeball_joint') or (@name='r_eyeball_joint') or (@name='l_eyebrow_joint') or (@name='r_eyebrow_joint') or (@name='temporomandibular') or (@name='l_sternoclavicular') or (@name='l_acromioclavicular') or (@name='l_shoulder') or (@name='l_elbow') or (@name='l_radiocarpal') or (@name='l_midcarpal_1') or (@name='l_carpometacarpal_1') or (@name='l_metacarpophalangeal_1') or (@name='l_carpal_interphalangeal_1') or (@name='l_midcarpal_2') or (@name='l_carpometacarpal_2') or (@name='l_metacarpophalangeal_2') or (@name='l_carpal_proximal_interphalangeal_2') or (@name='l_carpal_distal_interphalangeal_2') or (@name='l_midcarpal_3') or (@name='l_carpometacarpal_3') or (@name='l_metacarpophalangeal_3') or (@name='l_carpal_proximal_interphalangeal_3') or (@name='l_carpal_distal_interphalangeal_3') or (@name='l_midcarpal_4_5') or (@name='l_carpometacarpal_4') or (@name='l_metacarpophalangeal_4') or (@name='l_carpal_proximal_interphalangeal_4') or (@name='l_carpal_distal_interphalangeal_4') or (@name='l_carpometacarpal_5') or (@name='l_metacarpophalangeal_5') or (@name='l_carpal_proximal_interphalangeal_5') or (@name='l_carpal_distal_interphalangeal_5') or (@name='r_sternoclavicular') or (@name='r_acromioclavicular') or (@name='r_shoulder') or (@name='r_elbow') or (@name='r_radiocarpal') or (@name='r_midcarpal_1') or (@name='r_carpometacarpal_1') or (@name='r_metacarpophalangeal_1') or (@name='r_carpal_interphalangeal_1') or (@name='r_midcarpal_2') or (@name='r_carpometacarpal_2') or (@name='r_metacarpophalangeal_2') or (@name='r_carpal_proximal_interphalangeal_2') or (@name='r_carpal_distal_interphalangeal_2') or (@name='r_midcarpal_3') or (@name='r_carpometacarpal_3') or (@name='r_metacarpophalangeal_3') or (@name='r_carpal_proximal_interphalangeal_3') or (@name='r_carpal_distal_interphalangeal_3') or (@name='r_midcarpal_4_5') or (@name='r_carpometacarpal_4') or (@name='r_metacarpophalangeal_4') or (@name='r_carpal_proximal_interphalangeal_4') or (@name='r_carpal_distal_interphalangeal_4') or (@name='r_carpometacarpal_5') or (@name='r_metacarpophalangeal_5') or (@name='r_carpal_proximal_interphalangeal_5') or (@name='r_carpal_distal_interphalangeal_5')"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]">
      <svrl:text>&lt;HAnimJoint DEF='MissingComponentH-AnimLevel1' name=''/&gt; is not a recognized name for HAnim2 HAnimJoint </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimHumanoid"/>
   <svrl:failed-assert test="(string-length($name) &gt; 0) or (string-length(@USE) &gt; 0) or IS/connect or ($nodeName = 'HAnimMotion')"
                       role="error"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='incorrectlyNestedHumanoidMissingNameAttribute'/&gt; name field is required </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="@USE or (@name and (string-length(@name) &gt; 0) and not(preceding::*[local-name() = $nodeName][@name = $nameAttribute]) and not(following::*[local-name() = $nodeName][@name = $nameAttribute]))"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='incorrectlyNestedHumanoidMissingNameAttribute'/&gt; name='' is not unique </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='incorrectlyNestedHumanoidMissingNameAttribute' name=''/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='incorrectlyNestedHumanoidMissingNameAttribute' name=''/&gt; version='2.0 2.0' with X3D version='3.0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(starts-with(@version,'2')) and starts-with(ancestor::X3D/@version,'3')"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='incorrectlyNestedHumanoidMissingNameAttribute' name=''/&gt; version='2.0' requires X3D version 4. Either upgrade model from X3D version='3.0' to 4.0 or downgrade HAnimHumanoid to  version='1' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>==================================================================================================================== </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='incorrectlyNestedHumanoidMissingNameAttribute' name=''/&gt; node count(HAnimJoint)           within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='incorrectlyNestedHumanoidMissingNameAttribute' name=''/&gt; node count(HAnimSegment)         within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='incorrectlyNestedHumanoidMissingNameAttribute' name=''/&gt; node count(HAnimSite)            within HAnimHumanoid             = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='incorrectlyNestedHumanoidMissingNameAttribute' name=''/&gt; node count(HAnimSite//Viewpoint) within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='incorrectlyNestedHumanoidMissingNameAttribute' name=''/&gt; node count(HAnimDisplacer)       within skeleton hierarchy        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='incorrectlyNestedHumanoidMissingNameAttribute' name=''/&gt; node count(&lt;HAnimJoint   USE='*' containerField = 'joints'/&gt;)     = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='incorrectlyNestedHumanoidMissingNameAttribute' name=''/&gt; node count(&lt;HAnimSegment USE='*' containerField = 'segments'/&gt;)   = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='incorrectlyNestedHumanoidMissingNameAttribute' name=''/&gt; node count(&lt;HAnimSite    USE='*' containerField = 'sites'/&gt;)      = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>&lt;HAnimHumanoid DEF='incorrectlyNestedHumanoidMissingNameAttribute' name=''/&gt; node count(&lt;HAnimSite    DEF='*' name ends with '_view'/&gt;)        = 0</svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and true()"
                           role="diagnostic"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[1]/HAnimHumanoid">
      <svrl:text>==================================================================================================================== </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:failed-assert test="(string-length($name) &gt; 0) or (string-length(@USE) &gt; 0) or IS/connect or ($nodeName = 'HAnimMotion')"
                       role="error"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[2]">
      <svrl:text>&lt;HAnimJoint DEF='MissingNameAttributeCheckContainerField'/&gt; name field is required </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not(@USE) and not(string-length(@USE) &gt; 0) and (not(@center) or (@center='0 0 0') or (@center='0.0 0.0 0.0')) and not(@name='HumanoidRoot') and not(@containerField='skeleton')"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[2]">
      <svrl:text>&lt;HAnimJoint DEF='MissingNameAttributeCheckContainerField' name=''/&gt; has a missing (or default zero) offset field: center='0 0 0' </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or (@name='humanoid_root') or (@name='sacroiliac') or (@name='l_hip') or (@name='l_knee') or (@name='l_talocrural') or (@name='l_talocalcaneonavicular') or (@name='l_cuneonavicular_1') or (@name='l_tarsometatarsal_1') or (@name='l_metatarsophalangeal_1') or (@name='l_tarsal_interphalangeal_1') or (@name='l_cuneonavicular_2') or (@name='l_tarsometatarsal_2') or (@name='l_metatarsophalangeal_2') or (@name='l_tarsal_proximal_interphalangeal_2') or (@name='l_tarsal_distal_interphalangeal_2') or (@name='l_cuneonavicular_3') or (@name='l_tarsometatarsal_3') or (@name='l_metatarsophalangeal_3') or (@name='l_tarsal_proximal_interphalangeal_3') or (@name='l_tarsal_distal_interphalangeal_3') or (@name='l_calcaneocuboid') or (@name='l_transversetarsal') or (@name='l_tarsometatarsal_4') or (@name='l_metatarsophalangeal_4') or (@name='l_tarsal_proximal_interphalangeal_4') or (@name='l_tarsal_distal_interphalangeal_4') or (@name='l_tarsometatarsal_5') or (@name='l_metatarsophalangeal_5') or (@name='l_tarsal_proximal_interphalangeal_5') or (@name='l_tarsal_distal_interphalangeal_5') or (@name='r_hip') or (@name='r_knee') or (@name='r_talocrural') or (@name='r_talocalcaneonavicular') or (@name='r_cuneonavicular_1') or (@name='r_tarsometatarsal_1') or (@name='r_metatarsophalangeal_1') or (@name='r_tarsal_interphalangeal_1') or (@name='r_cuneonavicular_2') or (@name='r_tarsometatarsal_2') or (@name='r_metatarsophalangeal_2') or (@name='r_tarsal_proximal_interphalangeal_2') or (@name='r_tarsal_distal_interphalangeal_2') or (@name='r_cuneonavicular_3') or (@name='r_tarsometatarsal_3') or (@name='r_metatarsophalangeal_3') or (@name='r_tarsal_proximal_interphalangeal_3') or (@name='r_tarsal_distal_interphalangeal_3') or (@name='r_calcaneocuboid') or (@name='r_transversetarsal') or (@name='r_tarsometatarsal_4') or (@name='r_metatarsophalangeal_4') or (@name='r_tarsal_proximal_interphalangeal_4') or (@name='r_tarsal_distal_interphalangeal_4') or (@name='r_tarsometatarsal_5') or (@name='r_metatarsophalangeal_5') or (@name='r_tarsal_proximal_interphalangeal_5') or (@name='r_tarsal_distal_interphalangeal_5') or (@name='vl5') or (@name='vl4') or (@name='vl3') or (@name='vl2') or (@name='vl1') or (@name='vt12') or (@name='vt11') or (@name='vt10') or (@name='vt9') or (@name='vt8') or (@name='vt7') or (@name='vt6') or (@name='vt5') or (@name='vt4') or (@name='vt3') or (@name='vt2') or (@name='vt1') or (@name='vc7') or (@name='vc6') or (@name='vc5') or (@name='vc4') or (@name='vc3') or (@name='vc2') or (@name='vc1') or (@name='skullbase') or (@name='l_eyelid_joint') or (@name='r_eyelid_joint') or (@name='l_eyeball_joint') or (@name='r_eyeball_joint') or (@name='l_eyebrow_joint') or (@name='r_eyebrow_joint') or (@name='temporomandibular') or (@name='l_sternoclavicular') or (@name='l_acromioclavicular') or (@name='l_shoulder') or (@name='l_elbow') or (@name='l_radiocarpal') or (@name='l_midcarpal_1') or (@name='l_carpometacarpal_1') or (@name='l_metacarpophalangeal_1') or (@name='l_carpal_interphalangeal_1') or (@name='l_midcarpal_2') or (@name='l_carpometacarpal_2') or (@name='l_metacarpophalangeal_2') or (@name='l_carpal_proximal_interphalangeal_2') or (@name='l_carpal_distal_interphalangeal_2') or (@name='l_midcarpal_3') or (@name='l_carpometacarpal_3') or (@name='l_metacarpophalangeal_3') or (@name='l_carpal_proximal_interphalangeal_3') or (@name='l_carpal_distal_interphalangeal_3') or (@name='l_midcarpal_4_5') or (@name='l_carpometacarpal_4') or (@name='l_metacarpophalangeal_4') or (@name='l_carpal_proximal_interphalangeal_4') or (@name='l_carpal_distal_interphalangeal_4') or (@name='l_carpometacarpal_5') or (@name='l_metacarpophalangeal_5') or (@name='l_carpal_proximal_interphalangeal_5') or (@name='l_carpal_distal_interphalangeal_5') or (@name='r_sternoclavicular') or (@name='r_acromioclavicular') or (@name='r_shoulder') or (@name='r_elbow') or (@name='r_radiocarpal') or (@name='r_midcarpal_1') or (@name='r_carpometacarpal_1') or (@name='r_metacarpophalangeal_1') or (@name='r_carpal_interphalangeal_1') or (@name='r_midcarpal_2') or (@name='r_carpometacarpal_2') or (@name='r_metacarpophalangeal_2') or (@name='r_carpal_proximal_interphalangeal_2') or (@name='r_carpal_distal_interphalangeal_2') or (@name='r_midcarpal_3') or (@name='r_carpometacarpal_3') or (@name='r_metacarpophalangeal_3') or (@name='r_carpal_proximal_interphalangeal_3') or (@name='r_carpal_distal_interphalangeal_3') or (@name='r_midcarpal_4_5') or (@name='r_carpometacarpal_4') or (@name='r_metacarpophalangeal_4') or (@name='r_carpal_proximal_interphalangeal_4') or (@name='r_carpal_distal_interphalangeal_4') or (@name='r_carpometacarpal_5') or (@name='r_metacarpophalangeal_5') or (@name='r_carpal_proximal_interphalangeal_5') or (@name='r_carpal_distal_interphalangeal_5')"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[2]">
      <svrl:text>&lt;HAnimJoint DEF='MissingNameAttributeCheckContainerField' name=''/&gt; is not a recognized name for HAnim2 HAnimJoint </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="(string-length(@USE) &gt; 0) and not((local-name(..)='HAnimHumanoid') or (local-name(..)='field') or (local-name(..)='fieldValue'))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[3]">
      <svrl:text>&lt;HAnimJoint USE='MissingNameAttributeCheckContainerField'/&gt; can only appear as immediate child of HAnimHumanoid </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="*" id="wildcardName"/>
   <svrl:successful-report test="true() and (string-length(@id) = 0)"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HanimJoint">
      <svrl:text>&lt;HanimJoint DEF='ImproperCapitalizationOfNodeName'/&gt; not handled correctly by X3D schematron rule, or else node name has unrecognized spelling that fails X3D DTD/Schema validation... </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(starts-with(lower-case(local-name()),'hanim') or starts-with(lower-case(local-name()),'h-anim'))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HanimJoint">
      <svrl:text>&lt;HanimJoint DEF='ImproperCapitalizationOfNodeName'/&gt; node name capitalization is incorrect, should start with HAnim (rather than HanimJoint) </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(lower-case(local-name()) = 'hanimjoint') and not(local-name() = 'HAnimJoint')"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HanimJoint">
      <svrl:text>&lt;HanimJoint DEF='ImproperCapitalizationOfNodeName'/&gt; element capitalization-case mismatch, correct CamelCase naming is HAnimJoint </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (following::*[local-name() = $nodeName][@name = $name])"
                           role="warning"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[4]">
      <svrl:text>&lt;HAnimJoint DEF='duplicateName1'/&gt; has the same name='sacroiliac' as a following HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@DEF) &gt; 0) and (string-length(@name) &gt; 0) and not(contains(@DEF,concat('_',@name)))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[4]">
      <svrl:text>&lt;HAnimJoint DEF='duplicateName1' name='sacroiliac'/&gt; DEF value does not contain correctly modified version of name value (for example, DEF='myPrefix_nameValue' e.g. DEF='myPrefix_sacroiliac') - see HAnim section C.2 Humanoid, VRML Binding </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and not(string-length(@USE) &gt; 0) and (not(@center) or (@center='0 0 0') or (@center='0.0 0.0 0.0')) and not(@name='HumanoidRoot') and not(@containerField='skeleton')"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[4]">
      <svrl:text>&lt;HAnimJoint DEF='duplicateName1' name='sacroiliac'/&gt; has a missing (or default zero) offset field: center='0 0 0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$isHAnim2 and (@name='sacroiliac') and parent::HAnimJoint[not(@name='humanoid_root')]"
                           role="warning"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[4]">
      <svrl:text>&lt;HAnimJoint DEF='duplicateName1' name='sacroiliac'/&gt; has parent HAnimJoint name='HumanoidRoot' rather than expected parent name='humanoid_root', recommend checking model </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="not(starts-with(local-name(),'Metadata')) and (preceding::*[local-name() = $nodeName][@name = $name])"
                           role="warning"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[5]">
      <svrl:text>&lt;HAnimJoint DEF='duplicateName2'/&gt; has the same name='sacroiliac' as a preceding HAnimJoint node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@DEF) &gt; 0) and (string-length(@name) &gt; 0) and not(contains(@DEF,concat('_',@name)))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[5]">
      <svrl:text>&lt;HAnimJoint DEF='duplicateName2' name='sacroiliac'/&gt; DEF value does not contain correctly modified version of name value (for example, DEF='myPrefix_nameValue' e.g. DEF='myPrefix_sacroiliac') - see HAnim section C.2 Humanoid, VRML Binding </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and not(string-length(@USE) &gt; 0) and (not(@center) or (@center='0 0 0') or (@center='0.0 0.0 0.0')) and not(@name='HumanoidRoot') and not(@containerField='skeleton')"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[5]">
      <svrl:text>&lt;HAnimJoint DEF='duplicateName2' name='sacroiliac'/&gt; has a missing (or default zero) offset field: center='0 0 0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$isHAnim2 and (@name='sacroiliac') and parent::HAnimJoint[not(@name='humanoid_root')]"
                           role="warning"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[5]">
      <svrl:text>&lt;HAnimJoint DEF='duplicateName2' name='sacroiliac'/&gt; has parent HAnimJoint name='HumanoidRoot' rather than expected parent name='humanoid_root', recommend checking model </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="(string-length(@USE) &gt; 0) and not((local-name(..)='HAnimHumanoid') or (local-name(..)='field') or (local-name(..)='fieldValue'))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[6]">
      <svrl:text>&lt;HAnimJoint USE='duplicateName1'/&gt; can only appear as immediate child of HAnimHumanoid </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(parent::HAnimJoint) and not(@containerField='children')"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[6]">
      <svrl:text>&lt;HAnimJoint DEF='' name='' USE='duplicateName1'/&gt; with parent HAnimJoint needs containerField='children' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:successful-report test="((@DEF) and not(//ROUTE[@toNode=$DEF]) and not((local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect)) and (contains(local-name(),'Interpolator') or contains(local-name(),'Sequencer'))"
                           role="warning"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/PositionInterpolator">
      <svrl:text>&lt;PositionInterpolator DEF='JointInterpolator'/&gt; is missing ROUTE to receive input events, for example &lt;ROUTE fromNode='SomeTimeSensorDEFname' fromField='fraction_changed' toNode='JointInterpolator' toField='set_fraction'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:successful-report test="not(//*[@DEF=$toNode ])"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/ROUTE">
      <svrl:text>&lt;ROUTE fromNode='JointInterpolator' fromField='value_changed' toNode='MissingNameAttribute' toField='translation'/&gt; has no corresponding toNode with DEF='MissingNameAttribute' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="(string-length(@DEF) &gt; 0) and (string-length(@name) &gt; 0) and not(contains(@DEF,concat('_',@name)))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[7]">
      <svrl:text>&lt;HAnimJoint DEF='ImproperDEFname' name='l_acromioclavicular'/&gt; DEF value does not contain correctly modified version of name value (for example, DEF='myPrefix_nameValue' e.g. DEF='myPrefix_l_acromioclavicular') - see HAnim section C.2 Humanoid, VRML Binding </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and not(string-length(@USE) &gt; 0) and (not(@center) or (@center='0 0 0') or (@center='0.0 0.0 0.0')) and not(@name='HumanoidRoot') and not(@containerField='skeleton')"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[7]">
      <svrl:text>&lt;HAnimJoint DEF='ImproperDEFname' name='l_acromioclavicular'/&gt; has a missing (or default zero) offset field: center='0 0 0' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$isHAnim2 and (@name='l_acromioclavicular') and parent::HAnimJoint[not(@name='l_sternoclavicular')]"
                           role="warning"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[7]">
      <svrl:text>&lt;HAnimJoint DEF='ImproperDEFname' name='l_acromioclavicular'/&gt; has parent HAnimJoint name='HumanoidRoot' rather than expected parent name='l_sternoclavicular', recommend checking model </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or (@name='humanoid_root') or (@name='sacroiliac') or (@name='l_hip') or (@name='l_knee') or (@name='l_talocrural') or (@name='l_talocalcaneonavicular') or (@name='l_cuneonavicular_1') or (@name='l_tarsometatarsal_1') or (@name='l_metatarsophalangeal_1') or (@name='l_tarsal_interphalangeal_1') or (@name='l_cuneonavicular_2') or (@name='l_tarsometatarsal_2') or (@name='l_metatarsophalangeal_2') or (@name='l_tarsal_proximal_interphalangeal_2') or (@name='l_tarsal_distal_interphalangeal_2') or (@name='l_cuneonavicular_3') or (@name='l_tarsometatarsal_3') or (@name='l_metatarsophalangeal_3') or (@name='l_tarsal_proximal_interphalangeal_3') or (@name='l_tarsal_distal_interphalangeal_3') or (@name='l_calcaneocuboid') or (@name='l_transversetarsal') or (@name='l_tarsometatarsal_4') or (@name='l_metatarsophalangeal_4') or (@name='l_tarsal_proximal_interphalangeal_4') or (@name='l_tarsal_distal_interphalangeal_4') or (@name='l_tarsometatarsal_5') or (@name='l_metatarsophalangeal_5') or (@name='l_tarsal_proximal_interphalangeal_5') or (@name='l_tarsal_distal_interphalangeal_5') or (@name='r_hip') or (@name='r_knee') or (@name='r_talocrural') or (@name='r_talocalcaneonavicular') or (@name='r_cuneonavicular_1') or (@name='r_tarsometatarsal_1') or (@name='r_metatarsophalangeal_1') or (@name='r_tarsal_interphalangeal_1') or (@name='r_cuneonavicular_2') or (@name='r_tarsometatarsal_2') or (@name='r_metatarsophalangeal_2') or (@name='r_tarsal_proximal_interphalangeal_2') or (@name='r_tarsal_distal_interphalangeal_2') or (@name='r_cuneonavicular_3') or (@name='r_tarsometatarsal_3') or (@name='r_metatarsophalangeal_3') or (@name='r_tarsal_proximal_interphalangeal_3') or (@name='r_tarsal_distal_interphalangeal_3') or (@name='r_calcaneocuboid') or (@name='r_transversetarsal') or (@name='r_tarsometatarsal_4') or (@name='r_metatarsophalangeal_4') or (@name='r_tarsal_proximal_interphalangeal_4') or (@name='r_tarsal_distal_interphalangeal_4') or (@name='r_tarsometatarsal_5') or (@name='r_metatarsophalangeal_5') or (@name='r_tarsal_proximal_interphalangeal_5') or (@name='r_tarsal_distal_interphalangeal_5') or (@name='vl5') or (@name='vl4') or (@name='vl3') or (@name='vl2') or (@name='vl1') or (@name='vt12') or (@name='vt11') or (@name='vt10') or (@name='vt9') or (@name='vt8') or (@name='vt7') or (@name='vt6') or (@name='vt5') or (@name='vt4') or (@name='vt3') or (@name='vt2') or (@name='vt1') or (@name='vc7') or (@name='vc6') or (@name='vc5') or (@name='vc4') or (@name='vc3') or (@name='vc2') or (@name='vc1') or (@name='skullbase') or (@name='l_eyelid_joint') or (@name='r_eyelid_joint') or (@name='l_eyeball_joint') or (@name='r_eyeball_joint') or (@name='l_eyebrow_joint') or (@name='r_eyebrow_joint') or (@name='temporomandibular') or (@name='l_sternoclavicular') or (@name='l_acromioclavicular') or (@name='l_shoulder') or (@name='l_elbow') or (@name='l_radiocarpal') or (@name='l_midcarpal_1') or (@name='l_carpometacarpal_1') or (@name='l_metacarpophalangeal_1') or (@name='l_carpal_interphalangeal_1') or (@name='l_midcarpal_2') or (@name='l_carpometacarpal_2') or (@name='l_metacarpophalangeal_2') or (@name='l_carpal_proximal_interphalangeal_2') or (@name='l_carpal_distal_interphalangeal_2') or (@name='l_midcarpal_3') or (@name='l_carpometacarpal_3') or (@name='l_metacarpophalangeal_3') or (@name='l_carpal_proximal_interphalangeal_3') or (@name='l_carpal_distal_interphalangeal_3') or (@name='l_midcarpal_4_5') or (@name='l_carpometacarpal_4') or (@name='l_metacarpophalangeal_4') or (@name='l_carpal_proximal_interphalangeal_4') or (@name='l_carpal_distal_interphalangeal_4') or (@name='l_carpometacarpal_5') or (@name='l_metacarpophalangeal_5') or (@name='l_carpal_proximal_interphalangeal_5') or (@name='l_carpal_distal_interphalangeal_5') or (@name='r_sternoclavicular') or (@name='r_acromioclavicular') or (@name='r_shoulder') or (@name='r_elbow') or (@name='r_radiocarpal') or (@name='r_midcarpal_1') or (@name='r_carpometacarpal_1') or (@name='r_metacarpophalangeal_1') or (@name='r_carpal_interphalangeal_1') or (@name='r_midcarpal_2') or (@name='r_carpometacarpal_2') or (@name='r_metacarpophalangeal_2') or (@name='r_carpal_proximal_interphalangeal_2') or (@name='r_carpal_distal_interphalangeal_2') or (@name='r_midcarpal_3') or (@name='r_carpometacarpal_3') or (@name='r_metacarpophalangeal_3') or (@name='r_carpal_proximal_interphalangeal_3') or (@name='r_carpal_distal_interphalangeal_3') or (@name='r_midcarpal_4_5') or (@name='r_carpometacarpal_4') or (@name='r_metacarpophalangeal_4') or (@name='r_carpal_proximal_interphalangeal_4') or (@name='r_carpal_distal_interphalangeal_4') or (@name='r_carpometacarpal_5') or (@name='r_metacarpophalangeal_5') or (@name='r_carpal_proximal_interphalangeal_5') or (@name='r_carpal_distal_interphalangeal_5')"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]">
      <svrl:text>&lt;HAnimJoint DEF='hanim_HumanoidRoot' name='HumanoidRoot'/&gt; is not a recognized name for HAnim2 HAnimJoint </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(string-length(@DEF) &gt; 0) and (string-length(@name) &gt; 0) and not(contains(@DEF,concat('_',@name)))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='JointNameSegmentNameHierarchyTest' name='notSacrum'/&gt; DEF value does not contain correctly modified version of name value (for example, DEF='myPrefix_nameValue' e.g. DEF='myPrefix_notSacrum') - see HAnim section C.2 Humanoid, VRML Binding </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[(@name='HAnim') or (@name='H-Anim')][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='JointNameSegmentNameHierarchyTest'/&gt; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='HAnim' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or (@name='sacrum') or (@name='pelvis') or (@name='l_thigh') or (@name='l_calf') or (@name='l_talus') or (@name='l_navicular') or (@name='l_cuneiform_1') or (@name='l_metatarsal_1') or (@name='l_tarsal_proximal_phalanx_1') or (@name='l_tarsal_distal_phalanx_1') or (@name='l_cuneiform_2') or (@name='l_metatarsal_2') or (@name='l_tarsal_proximal_phalanx_2') or (@name='l_tarsal_middle_phalanx_2') or (@name='l_tarsal_distal_phalanx_2') or (@name='l_cuneiform_3') or (@name='l_metatarsal_3') or (@name='l_tarsal_proximal_phalanx_3') or (@name='l_tarsal_middle_phalanx_3') or (@name='l_tarsal_distal_phalanx_3') or (@name='l_calcaneus') or (@name='l_cuboid') or (@name='l_metatarsal_4') or (@name='l_tarsal_proximal_phalanx_4') or (@name='l_tarsal_middle_phalanx_4') or (@name='l_tarsal_distal_phalanx_4') or (@name='l_metatarsal_5') or (@name='l_tarsal_proximal_phalanx_5') or (@name='l_tarsal_middle_phalanx_5') or (@name='l_tarsal_distal_phalanx_5') or (@name='r_thigh') or (@name='r_calf') or (@name='r_talus') or (@name='r_navicular') or (@name='r_cuneiform_1') or (@name='r_metatarsal_1') or (@name='r_tarsal_proximal_phalanx_1') or (@name='r_tarsal_distal_phalanx_1') or (@name='r_cuneiform_2') or (@name='r_metatarsal_2') or (@name='r_tarsal_proximal_phalanx_2') or (@name='r_tarsal_middle_phalanx_2') or (@name='r_tarsal_distal_phalanx_2') or (@name='r_cuneiform_3') or (@name='r_metatarsal_3') or (@name='r_tarsal_proximal_phalanx_3') or (@name='r_tarsal_middle_phalanx_3') or (@name='r_tarsal_distal_phalanx_3') or (@name='r_calcaneus') or (@name='r_cuboid') or (@name='r_metatarsal_4') or (@name='r_tarsal_proximal_phalanx_4') or (@name='r_tarsal_middle_phalanx_4') or (@name='r_tarsal_distal_phalanx_4') or (@name='r_metatarsal_5') or (@name='r_tarsal_proximal_phalanx_5') or (@name='r_tarsal_middle_phalanx_5') or (@name='r_tarsal_distal_phalanx_5') or (@name='l5') or (@name='l4') or (@name='l3') or (@name='l2') or (@name='l1') or (@name='t12') or (@name='t11') or (@name='t10') or (@name='t9') or (@name='t8') or (@name='t7') or (@name='t6') or (@name='t5') or (@name='t4') or (@name='t3') or (@name='t2') or (@name='t1') or (@name='c7') or (@name='c6') or (@name='c5') or (@name='c4') or (@name='c3') or (@name='c2') or (@name='c1') or (@name='skull') or (@name='l_eyelid') or (@name='r_eyelid') or (@name='l_eyeball') or (@name='r_eyeball') or (@name='l_eyebrow') or (@name='r_eyebrow') or (@name='jaw') or (@name='l_clavicle') or (@name='l_scapula') or (@name='l_upperarm') or (@name='l_forearm') or (@name='l_carpal') or (@name='l_trapezium') or (@name='l_metacarpal_1') or (@name='l_carpal_proximal_phalanx_1') or (@name='l_carpal_distal_phalanx_1') or (@name='l_trapezoid') or (@name='l_metacarpal_2') or (@name='l_carpal_proximal_phalanx_2') or (@name='l_carpal_middle_phalanx_2') or (@name='l_carpal_distal_phalanx_2') or (@name='l_capitate') or (@name='l_metacarpal_3') or (@name='l_carpal_proximal_phalanx_3') or (@name='l_carpal_middle_phalanx_3') or (@name='l_carpal_distal_phalanx_3') or (@name='l_hamate') or (@name='l_metacarpal_4') or (@name='l_carpal_proximal_phalanx_4') or (@name='l_carpal_middle_phalanx_4') or (@name='l_carpal_distal_phalanx_4') or (@name='l_metacarpal_5') or (@name='l_carpal_proximal_phalanx_5') or (@name='l_carpal_middle_phalanx_5') or (@name='l_carpal_distal_phalanx_5') or (@name='r_clavicle') or (@name='r_scapula') or (@name='r_upperarm') or (@name='r_forearm') or (@name='r_carpal') or (@name='r_trapezium') or (@name='r_metacarpal_1') or (@name='r_carpal_proximal_phalanx_1') or (@name='r_carpal_distal_phalanx_1') or (@name='r_trapezoid') or (@name='r_metacarpal_2') or (@name='r_carpal_proximal_phalanx_2') or (@name='r_carpal_middle_phalanx_2') or (@name='r_carpal_distal_phalanx_2') or (@name='r_capitate') or (@name='r_metacarpal_3') or (@name='r_carpal_proximal_phalanx_3') or (@name='r_carpal_middle_phalanx_3') or (@name='r_carpal_distal_phalanx_3') or (@name='r_hamate') or (@name='r_metacarpal_4') or (@name='r_carpal_proximal_phalanx_4') or (@name='r_carpal_middle_phalanx_4') or (@name='r_carpal_distal_phalanx_4') or (@name='r_metacarpal_5') or (@name='r_carpal_proximal_phalanx_5') or (@name='r_carpal_middle_phalanx_5') or (@name='r_carpal_distal_phalanx_5')"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='JointNameSegmentNameHierarchyTest' name='notSacrum'/&gt; is not a recognized name for HAnim2 HAnimSegment </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[(@name='HAnim') or (@name='H-Anim')][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimSegment/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_Top_view'/&gt; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='HAnim' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or starts-with(@name,'skull_vertex') or starts-with(@name,'glabella') or starts-with(@name,'sellion') or starts-with(@name,'l_infraorbitale') or starts-with(@name,'l_tragion') or starts-with(@name,'l_gonion') or starts-with(@name,'r_infraorbitale') or starts-with(@name,'r_tragion') or starts-with(@name,'r_gonion') or starts-with(@name,'supramenton') or starts-with(@name,'cervicale') or starts-with(@name,'adams_apple') or starts-with(@name,'suprasternale') or starts-with(@name,'substernale') or starts-with(@name,'l_clavicle') or starts-with(@name,'l_acromion') or starts-with(@name,'l_axilla_proximal') or starts-with(@name,'l_axilla_distal') or starts-with(@name,'l_axilla_posterior_folds') or starts-with(@name,'r_clavicle') or starts-with(@name,'r_acromion') or starts-with(@name,'r_axilla_proximal') or starts-with(@name,'r_axilla_distal') or starts-with(@name,'r_axilla_posterior_folds') or starts-with(@name,'spine_1_middle_back') or starts-with(@name,'spine_2_lower_back') or starts-with(@name,'waist_preferred_anterior') or starts-with(@name,'waist_preferred_posterior') or starts-with(@name,'l_rib10') or starts-with(@name,'l_thelion') or starts-with(@name,'r_rib10') or starts-with(@name,'r_thelion') or starts-with(@name,'l_asis') or starts-with(@name,'l_iliocristale') or starts-with(@name,'l_psis') or starts-with(@name,'r_asis') or starts-with(@name,'r_iliocristale') or starts-with(@name,'r_psis') or starts-with(@name,'crotch') or starts-with(@name,'l_femoral_lateral_epicondyle') or starts-with(@name,'l_femoral_medial_epicondyle') or starts-with(@name,'l_suprapatella') or starts-with(@name,'l_trochanterion') or starts-with(@name,'r_femoral_lateral_epicondyle') or starts-with(@name,'r_femoral_medial_epicondyle') or starts-with(@name,'r_suprapatella') or starts-with(@name,'r_trochanterion') or starts-with(@name,'l_tibiale') or starts-with(@name,'l_medial_malleolus') or starts-with(@name,'l_lateral_malleolus') or starts-with(@name,'l_sphyrion') or starts-with(@name,'r_tibiale') or starts-with(@name,'r_medial_malleolus') or starts-with(@name,'r_lateral_malleolus') or starts-with(@name,'r_sphyrion') or starts-with(@name,'l_metatarsal_phalanx_1') or starts-with(@name,'l_metatarsal_phalanx_5') or starts-with(@name,'l_dactylion') or starts-with(@name,'l_calcaneus_posterior') or starts-with(@name,'r_metatarsal_phalanx_1') or starts-with(@name,'r_metatarsal_phalanx_5') or starts-with(@name,'r_dactylion') or starts-with(@name,'r_calcaneus_posterior') or starts-with(@name,'l_humeral_lateral_epicondyle') or starts-with(@name,'l_humeral_medial_epicondyle') or starts-with(@name,'l_olecranon') or starts-with(@name,'r_humeral_lateral_epicondyle') or starts-with(@name,'r_humeral_medial_epicondyle') or starts-with(@name,'r_olecranon') or starts-with(@name,'l_radiale') or starts-with(@name,'l_ulnar_styloid') or starts-with(@name,'l_radial_styloid') or starts-with(@name,'r_radiale') or starts-with(@name,'r_ulnar_styloid') or starts-with(@name,'r_radial_styloid') or starts-with(@name,'l_metacarpal_phalanx_2') or starts-with(@name,'l_metacarpal_phalanx_3') or starts-with(@name,'l_metacarpal_phalanx_5') or starts-with(@name,'r_metacarpal_phalanx_2') or starts-with(@name,'r_metacarpal_phalanx_3') or starts-with(@name,'r_metacarpal_phalanx_5') or starts-with(@name,'nuchale') or starts-with(@name,'l_neck_base') or starts-with(@name,'r_neck_base') or starts-with(@name,'navel') or starts-with(@name,'l_ectocanthus') or starts-with(@name,'r_ectocanthus') or starts-with(@name,'menton') or starts-with(@name,'mesosternale') or starts-with(@name,'opisthocranion') or starts-with(@name,'l_knee_crease') or starts-with(@name,'r_knee_crease') or starts-with(@name,'rear_center_midsagittal_plane') or starts-with(@name,'buttocks_standing_wall_contact_point') or starts-with(@name,'l_chest_midsagittal_plane') or starts-with(@name,'r_chest_midsagittal_plane') or starts-with(@name,'l_bideltoid') or starts-with(@name,'r_bideltoid') or starts-with(@name,'l_carpal_distal_phalanx_1') or starts-with(@name,'l_carpal_distal_phalanx_2') or starts-with(@name,'l_carpal_distal_phalanx_3') or starts-with(@name,'l_carpal_distal_phalanx_4') or starts-with(@name,'l_carpal_distal_phalanx_5') or starts-with(@name,'r_carpal_distal_phalanx_1') or starts-with(@name,'r_carpal_distal_phalanx_2') or starts-with(@name,'r_carpal_distal_phalanx_3') or starts-with(@name,'r_carpal_distal_phalanx_4') or starts-with(@name,'r_carpal_distal_phalanx_5') or starts-with(@name,'l_tarsal_distal_phalanx_1') or starts-with(@name,'l_tarsal_distal_phalanx_2') or starts-with(@name,'l_tarsal_distal_phalanx_3') or starts-with(@name,'l_tarsal_distal_phalanx_4') or starts-with(@name,'l_tarsal_distal_phalanx_5') or starts-with(@name,'r_tarsal_distal_phalanx_1') or starts-with(@name,'r_tarsal_distal_phalanx_2') or starts-with(@name,'r_tarsal_distal_phalanx_3') or starts-with(@name,'r_tarsal_distal_phalanx_4') or starts-with(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'sacrum') or contains(@name,'pelvis') or contains(@name,'l_thigh') or contains(@name,'l_calf') or contains(@name,'l_talus') or contains(@name,'l_navicular') or contains(@name,'l_cuneiform_1') or contains(@name,'l_metatarsal_1') or contains(@name,'l_tarsal_proximal_phalanx_1') or contains(@name,'l_tarsal_distal_phalanx_1') or contains(@name,'l_cuneiform_2') or contains(@name,'l_metatarsal_2') or contains(@name,'l_tarsal_proximal_phalanx_2') or contains(@name,'l_tarsal_middle_phalanx_2') or contains(@name,'l_tarsal_distal_phalanx_2') or contains(@name,'l_cuneiform_3') or contains(@name,'l_metatarsal_3') or contains(@name,'l_tarsal_proximal_phalanx_3') or contains(@name,'l_tarsal_middle_phalanx_3') or contains(@name,'l_tarsal_distal_phalanx_3') or contains(@name,'l_calcaneus') or contains(@name,'l_cuboid') or contains(@name,'l_metatarsal_4') or contains(@name,'l_tarsal_proximal_phalanx_4') or contains(@name,'l_tarsal_middle_phalanx_4') or contains(@name,'l_tarsal_distal_phalanx_4') or contains(@name,'l_metatarsal_5') or contains(@name,'l_tarsal_proximal_phalanx_5') or contains(@name,'l_tarsal_middle_phalanx_5') or contains(@name,'l_tarsal_distal_phalanx_5') or contains(@name,'r_thigh') or contains(@name,'r_calf') or contains(@name,'r_talus') or contains(@name,'r_navicular') or contains(@name,'r_cuneiform_1') or contains(@name,'r_metatarsal_1') or contains(@name,'r_tarsal_proximal_phalanx_1') or contains(@name,'r_tarsal_distal_phalanx_1') or contains(@name,'r_cuneiform_2') or contains(@name,'r_metatarsal_2') or contains(@name,'r_tarsal_proximal_phalanx_2') or contains(@name,'r_tarsal_middle_phalanx_2') or contains(@name,'r_tarsal_distal_phalanx_2') or contains(@name,'r_cuneiform_3') or contains(@name,'r_metatarsal_3') or contains(@name,'r_tarsal_proximal_phalanx_3') or contains(@name,'r_tarsal_middle_phalanx_3') or contains(@name,'r_tarsal_distal_phalanx_3') or contains(@name,'r_calcaneus') or contains(@name,'r_cuboid') or contains(@name,'r_metatarsal_4') or contains(@name,'r_tarsal_proximal_phalanx_4') or contains(@name,'r_tarsal_middle_phalanx_4') or contains(@name,'r_tarsal_distal_phalanx_4') or contains(@name,'r_metatarsal_5') or contains(@name,'r_tarsal_proximal_phalanx_5') or contains(@name,'r_tarsal_middle_phalanx_5') or contains(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'l5') or contains(@name,'l4') or contains(@name,'l3') or contains(@name,'l2') or contains(@name,'l1') or contains(@name,'t12') or contains(@name,'t11') or contains(@name,'t10') or contains(@name,'t9') or contains(@name,'t8') or contains(@name,'t7') or contains(@name,'t6') or contains(@name,'t5') or contains(@name,'t4') or contains(@name,'t3') or contains(@name,'t2') or contains(@name,'t1') or contains(@name,'c7') or contains(@name,'c6') or contains(@name,'c5') or contains(@name,'c4') or contains(@name,'c3') or contains(@name,'c2') or contains(@name,'c1') or contains(@name,'skull') or contains(@name,'l_eyelid') or contains(@name,'r_eyelid') or contains(@name,'l_eyeball') or contains(@name,'r_eyeball') or contains(@name,'l_eyebrow') or contains(@name,'r_eyebrow') or contains(@name,'jaw') or contains(@name,'l_clavicle') or contains(@name,'l_scapula') or contains(@name,'l_upperarm') or contains(@name,'l_forearm') or contains(@name,'l_carpal') or contains(@name,'l_trapezium') or contains(@name,'l_metacarpal_1') or contains(@name,'l_carpal_proximal_phalanx_1') or contains(@name,'l_carpal_distal_phalanx_1') or contains(@name,'l_trapezoid') or contains(@name,'l_metacarpal_2') or contains(@name,'l_carpal_proximal_phalanx_2') or contains(@name,'l_carpal_middle_phalanx_2') or contains(@name,'l_carpal_distal_phalanx_2') or contains(@name,'l_capitate') or contains(@name,'l_metacarpal_3') or contains(@name,'l_carpal_proximal_phalanx_3') or contains(@name,'l_carpal_middle_phalanx_3') or contains(@name,'l_carpal_distal_phalanx_3') or contains(@name,'l_hamate') or contains(@name,'l_metacarpal_4') or contains(@name,'l_carpal_proximal_phalanx_4') or contains(@name,'l_carpal_middle_phalanx_4') or contains(@name,'l_carpal_distal_phalanx_4') or contains(@name,'l_metacarpal_5') or contains(@name,'l_carpal_proximal_phalanx_5') or contains(@name,'l_carpal_middle_phalanx_5') or contains(@name,'l_carpal_distal_phalanx_5') or contains(@name,'r_clavicle') or contains(@name,'r_scapula') or contains(@name,'r_upperarm') or contains(@name,'r_forearm') or contains(@name,'r_carpal') or contains(@name,'r_trapezium') or contains(@name,'r_metacarpal_1') or contains(@name,'r_carpal_proximal_phalanx_1') or contains(@name,'r_carpal_distal_phalanx_1') or contains(@name,'r_trapezoid') or contains(@name,'r_metacarpal_2') or contains(@name,'r_carpal_proximal_phalanx_2') or contains(@name,'r_carpal_middle_phalanx_2') or contains(@name,'r_carpal_distal_phalanx_2') or contains(@name,'r_capitate') or contains(@name,'r_metacarpal_3') or contains(@name,'r_carpal_proximal_phalanx_3') or contains(@name,'r_carpal_middle_phalanx_3') or contains(@name,'r_carpal_distal_phalanx_3') or contains(@name,'r_hamate') or contains(@name,'r_metacarpal_4') or contains(@name,'r_carpal_proximal_phalanx_4') or contains(@name,'r_carpal_middle_phalanx_4') or contains(@name,'r_carpal_distal_phalanx_4') or contains(@name,'r_metacarpal_5') or contains(@name,'r_carpal_proximal_phalanx_5') or contains(@name,'r_carpal_middle_phalanx_5') or contains(@name,'r_carpal_distal_phalanx_5')"
                       role="info"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimSegment/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='hanim_Top_view' name='Top_view'/&gt; is not a recognized name for HAnim2 HAnimSite </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Viewpoint | OrthoViewpoint"/>
   <svrl:successful-report test="(local-name()='OrthoViewpoint') and not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Navigation'][number(@level) ge 3])) or (count(preceding::*[local-name()='OrthoViewpoint']) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimSegment/HAnimSite/Viewpoint">
      <svrl:text>&lt;Viewpoint DEF='hanim_Top_viewpoint'/&gt; requires at least &lt;component name='Navigation' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="(string-length(@DEF) &gt; 0) and (string-length(@name) &gt; 0) and not(contains(@DEF,concat('_',@name)))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]">
      <svrl:text>&lt;HAnimJoint DEF='negativeCenterHeight' name='negativeCenterHeight'/&gt; DEF value does not contain correctly modified version of name value (for example, DEF='myPrefix_nameValue' e.g. DEF='myPrefix_negativeCenterHeight') - see HAnim section C.2 Humanoid, VRML Binding </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or (@name='humanoid_root') or (@name='sacroiliac') or (@name='l_hip') or (@name='l_knee') or (@name='l_talocrural') or (@name='l_talocalcaneonavicular') or (@name='l_cuneonavicular_1') or (@name='l_tarsometatarsal_1') or (@name='l_metatarsophalangeal_1') or (@name='l_tarsal_interphalangeal_1') or (@name='l_cuneonavicular_2') or (@name='l_tarsometatarsal_2') or (@name='l_metatarsophalangeal_2') or (@name='l_tarsal_proximal_interphalangeal_2') or (@name='l_tarsal_distal_interphalangeal_2') or (@name='l_cuneonavicular_3') or (@name='l_tarsometatarsal_3') or (@name='l_metatarsophalangeal_3') or (@name='l_tarsal_proximal_interphalangeal_3') or (@name='l_tarsal_distal_interphalangeal_3') or (@name='l_calcaneocuboid') or (@name='l_transversetarsal') or (@name='l_tarsometatarsal_4') or (@name='l_metatarsophalangeal_4') or (@name='l_tarsal_proximal_interphalangeal_4') or (@name='l_tarsal_distal_interphalangeal_4') or (@name='l_tarsometatarsal_5') or (@name='l_metatarsophalangeal_5') or (@name='l_tarsal_proximal_interphalangeal_5') or (@name='l_tarsal_distal_interphalangeal_5') or (@name='r_hip') or (@name='r_knee') or (@name='r_talocrural') or (@name='r_talocalcaneonavicular') or (@name='r_cuneonavicular_1') or (@name='r_tarsometatarsal_1') or (@name='r_metatarsophalangeal_1') or (@name='r_tarsal_interphalangeal_1') or (@name='r_cuneonavicular_2') or (@name='r_tarsometatarsal_2') or (@name='r_metatarsophalangeal_2') or (@name='r_tarsal_proximal_interphalangeal_2') or (@name='r_tarsal_distal_interphalangeal_2') or (@name='r_cuneonavicular_3') or (@name='r_tarsometatarsal_3') or (@name='r_metatarsophalangeal_3') or (@name='r_tarsal_proximal_interphalangeal_3') or (@name='r_tarsal_distal_interphalangeal_3') or (@name='r_calcaneocuboid') or (@name='r_transversetarsal') or (@name='r_tarsometatarsal_4') or (@name='r_metatarsophalangeal_4') or (@name='r_tarsal_proximal_interphalangeal_4') or (@name='r_tarsal_distal_interphalangeal_4') or (@name='r_tarsometatarsal_5') or (@name='r_metatarsophalangeal_5') or (@name='r_tarsal_proximal_interphalangeal_5') or (@name='r_tarsal_distal_interphalangeal_5') or (@name='vl5') or (@name='vl4') or (@name='vl3') or (@name='vl2') or (@name='vl1') or (@name='vt12') or (@name='vt11') or (@name='vt10') or (@name='vt9') or (@name='vt8') or (@name='vt7') or (@name='vt6') or (@name='vt5') or (@name='vt4') or (@name='vt3') or (@name='vt2') or (@name='vt1') or (@name='vc7') or (@name='vc6') or (@name='vc5') or (@name='vc4') or (@name='vc3') or (@name='vc2') or (@name='vc1') or (@name='skullbase') or (@name='l_eyelid_joint') or (@name='r_eyelid_joint') or (@name='l_eyeball_joint') or (@name='r_eyeball_joint') or (@name='l_eyebrow_joint') or (@name='r_eyebrow_joint') or (@name='temporomandibular') or (@name='l_sternoclavicular') or (@name='l_acromioclavicular') or (@name='l_shoulder') or (@name='l_elbow') or (@name='l_radiocarpal') or (@name='l_midcarpal_1') or (@name='l_carpometacarpal_1') or (@name='l_metacarpophalangeal_1') or (@name='l_carpal_interphalangeal_1') or (@name='l_midcarpal_2') or (@name='l_carpometacarpal_2') or (@name='l_metacarpophalangeal_2') or (@name='l_carpal_proximal_interphalangeal_2') or (@name='l_carpal_distal_interphalangeal_2') or (@name='l_midcarpal_3') or (@name='l_carpometacarpal_3') or (@name='l_metacarpophalangeal_3') or (@name='l_carpal_proximal_interphalangeal_3') or (@name='l_carpal_distal_interphalangeal_3') or (@name='l_midcarpal_4_5') or (@name='l_carpometacarpal_4') or (@name='l_metacarpophalangeal_4') or (@name='l_carpal_proximal_interphalangeal_4') or (@name='l_carpal_distal_interphalangeal_4') or (@name='l_carpometacarpal_5') or (@name='l_metacarpophalangeal_5') or (@name='l_carpal_proximal_interphalangeal_5') or (@name='l_carpal_distal_interphalangeal_5') or (@name='r_sternoclavicular') or (@name='r_acromioclavicular') or (@name='r_shoulder') or (@name='r_elbow') or (@name='r_radiocarpal') or (@name='r_midcarpal_1') or (@name='r_carpometacarpal_1') or (@name='r_metacarpophalangeal_1') or (@name='r_carpal_interphalangeal_1') or (@name='r_midcarpal_2') or (@name='r_carpometacarpal_2') or (@name='r_metacarpophalangeal_2') or (@name='r_carpal_proximal_interphalangeal_2') or (@name='r_carpal_distal_interphalangeal_2') or (@name='r_midcarpal_3') or (@name='r_carpometacarpal_3') or (@name='r_metacarpophalangeal_3') or (@name='r_carpal_proximal_interphalangeal_3') or (@name='r_carpal_distal_interphalangeal_3') or (@name='r_midcarpal_4_5') or (@name='r_carpometacarpal_4') or (@name='r_metacarpophalangeal_4') or (@name='r_carpal_proximal_interphalangeal_4') or (@name='r_carpal_distal_interphalangeal_4') or (@name='r_carpometacarpal_5') or (@name='r_metacarpophalangeal_5') or (@name='r_carpal_proximal_interphalangeal_5') or (@name='r_carpal_distal_interphalangeal_5')"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]">
      <svrl:text>&lt;HAnimJoint DEF='negativeCenterHeight' name='negativeCenterHeight'/&gt; is not a recognized name for HAnim2 HAnimJoint </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(string-length(@DEF) &gt; 0) and (string-length(@name) &gt; 0) and not(contains(@DEF,concat('_',@name)))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='IllegalChildrenContainerFields' name='IllegalChildrenContainerFields'/&gt; DEF value does not contain correctly modified version of name value (for example, DEF='myPrefix_nameValue' e.g. DEF='myPrefix_IllegalChildrenContainerFields') - see HAnim section C.2 Humanoid, VRML Binding </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="count(Coordinate|CoordinateDouble) &gt; 1"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='IllegalChildrenContainerFields' name='IllegalChildrenContainerFields'/&gt; can only contain one Coordinate/CoordinateDouble node (instead of 2) </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or (@name='sacrum') or (@name='pelvis') or (@name='l_thigh') or (@name='l_calf') or (@name='l_talus') or (@name='l_navicular') or (@name='l_cuneiform_1') or (@name='l_metatarsal_1') or (@name='l_tarsal_proximal_phalanx_1') or (@name='l_tarsal_distal_phalanx_1') or (@name='l_cuneiform_2') or (@name='l_metatarsal_2') or (@name='l_tarsal_proximal_phalanx_2') or (@name='l_tarsal_middle_phalanx_2') or (@name='l_tarsal_distal_phalanx_2') or (@name='l_cuneiform_3') or (@name='l_metatarsal_3') or (@name='l_tarsal_proximal_phalanx_3') or (@name='l_tarsal_middle_phalanx_3') or (@name='l_tarsal_distal_phalanx_3') or (@name='l_calcaneus') or (@name='l_cuboid') or (@name='l_metatarsal_4') or (@name='l_tarsal_proximal_phalanx_4') or (@name='l_tarsal_middle_phalanx_4') or (@name='l_tarsal_distal_phalanx_4') or (@name='l_metatarsal_5') or (@name='l_tarsal_proximal_phalanx_5') or (@name='l_tarsal_middle_phalanx_5') or (@name='l_tarsal_distal_phalanx_5') or (@name='r_thigh') or (@name='r_calf') or (@name='r_talus') or (@name='r_navicular') or (@name='r_cuneiform_1') or (@name='r_metatarsal_1') or (@name='r_tarsal_proximal_phalanx_1') or (@name='r_tarsal_distal_phalanx_1') or (@name='r_cuneiform_2') or (@name='r_metatarsal_2') or (@name='r_tarsal_proximal_phalanx_2') or (@name='r_tarsal_middle_phalanx_2') or (@name='r_tarsal_distal_phalanx_2') or (@name='r_cuneiform_3') or (@name='r_metatarsal_3') or (@name='r_tarsal_proximal_phalanx_3') or (@name='r_tarsal_middle_phalanx_3') or (@name='r_tarsal_distal_phalanx_3') or (@name='r_calcaneus') or (@name='r_cuboid') or (@name='r_metatarsal_4') or (@name='r_tarsal_proximal_phalanx_4') or (@name='r_tarsal_middle_phalanx_4') or (@name='r_tarsal_distal_phalanx_4') or (@name='r_metatarsal_5') or (@name='r_tarsal_proximal_phalanx_5') or (@name='r_tarsal_middle_phalanx_5') or (@name='r_tarsal_distal_phalanx_5') or (@name='l5') or (@name='l4') or (@name='l3') or (@name='l2') or (@name='l1') or (@name='t12') or (@name='t11') or (@name='t10') or (@name='t9') or (@name='t8') or (@name='t7') or (@name='t6') or (@name='t5') or (@name='t4') or (@name='t3') or (@name='t2') or (@name='t1') or (@name='c7') or (@name='c6') or (@name='c5') or (@name='c4') or (@name='c3') or (@name='c2') or (@name='c1') or (@name='skull') or (@name='l_eyelid') or (@name='r_eyelid') or (@name='l_eyeball') or (@name='r_eyeball') or (@name='l_eyebrow') or (@name='r_eyebrow') or (@name='jaw') or (@name='l_clavicle') or (@name='l_scapula') or (@name='l_upperarm') or (@name='l_forearm') or (@name='l_carpal') or (@name='l_trapezium') or (@name='l_metacarpal_1') or (@name='l_carpal_proximal_phalanx_1') or (@name='l_carpal_distal_phalanx_1') or (@name='l_trapezoid') or (@name='l_metacarpal_2') or (@name='l_carpal_proximal_phalanx_2') or (@name='l_carpal_middle_phalanx_2') or (@name='l_carpal_distal_phalanx_2') or (@name='l_capitate') or (@name='l_metacarpal_3') or (@name='l_carpal_proximal_phalanx_3') or (@name='l_carpal_middle_phalanx_3') or (@name='l_carpal_distal_phalanx_3') or (@name='l_hamate') or (@name='l_metacarpal_4') or (@name='l_carpal_proximal_phalanx_4') or (@name='l_carpal_middle_phalanx_4') or (@name='l_carpal_distal_phalanx_4') or (@name='l_metacarpal_5') or (@name='l_carpal_proximal_phalanx_5') or (@name='l_carpal_middle_phalanx_5') or (@name='l_carpal_distal_phalanx_5') or (@name='r_clavicle') or (@name='r_scapula') or (@name='r_upperarm') or (@name='r_forearm') or (@name='r_carpal') or (@name='r_trapezium') or (@name='r_metacarpal_1') or (@name='r_carpal_proximal_phalanx_1') or (@name='r_carpal_distal_phalanx_1') or (@name='r_trapezoid') or (@name='r_metacarpal_2') or (@name='r_carpal_proximal_phalanx_2') or (@name='r_carpal_middle_phalanx_2') or (@name='r_carpal_distal_phalanx_2') or (@name='r_capitate') or (@name='r_metacarpal_3') or (@name='r_carpal_proximal_phalanx_3') or (@name='r_carpal_middle_phalanx_3') or (@name='r_carpal_distal_phalanx_3') or (@name='r_hamate') or (@name='r_metacarpal_4') or (@name='r_carpal_proximal_phalanx_4') or (@name='r_carpal_middle_phalanx_4') or (@name='r_carpal_distal_phalanx_4') or (@name='r_metacarpal_5') or (@name='r_carpal_proximal_phalanx_5') or (@name='r_carpal_middle_phalanx_5') or (@name='r_carpal_distal_phalanx_5')"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]/HAnimSegment">
      <svrl:text>&lt;HAnimSegment DEF='IllegalChildrenContainerFields' name='IllegalChildrenContainerFields'/&gt; is not a recognized name for HAnim2 HAnimSegment </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="(string-length(@DEF) &gt; 0) and (string-length(@name) &gt; 0) and not(contains(@DEF,concat('_',@name)))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]/HAnimSegment/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='negativeTranslationHeight' name='negativeTranslationHeight'/&gt; DEF value does not contain correctly modified version of name value (for example, DEF='myPrefix_nameValue' e.g. DEF='myPrefix_negativeTranslationHeight') - see HAnim section C.2 Humanoid, VRML Binding </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(count(HAnimDisplacer) &gt; 0) and not(@USE)"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]/HAnimSegment/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='negativeTranslationHeight' name='negativeTranslationHeight'/&gt; contains HAnimDisplacer node which should be moved up a level to be contained by parent &lt;HAnimJoint DEF='IllegalChildrenContainerFields' name='IllegalChildrenContainerFields'/&gt; node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(ends-with(@name,'_tip')) and not(ends-with(@name,'_view')) and not(ends-with(@name,'_pt')) and not(@USE)"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]/HAnimSegment/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='negativeTranslationHeight' name='negativeTranslationHeight'/&gt; has incomplete name that must have suffix '_tip' or '_view' or '_pt' appended, depending on function </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or starts-with(@name,'skull_vertex') or starts-with(@name,'glabella') or starts-with(@name,'sellion') or starts-with(@name,'l_infraorbitale') or starts-with(@name,'l_tragion') or starts-with(@name,'l_gonion') or starts-with(@name,'r_infraorbitale') or starts-with(@name,'r_tragion') or starts-with(@name,'r_gonion') or starts-with(@name,'supramenton') or starts-with(@name,'cervicale') or starts-with(@name,'adams_apple') or starts-with(@name,'suprasternale') or starts-with(@name,'substernale') or starts-with(@name,'l_clavicle') or starts-with(@name,'l_acromion') or starts-with(@name,'l_axilla_proximal') or starts-with(@name,'l_axilla_distal') or starts-with(@name,'l_axilla_posterior_folds') or starts-with(@name,'r_clavicle') or starts-with(@name,'r_acromion') or starts-with(@name,'r_axilla_proximal') or starts-with(@name,'r_axilla_distal') or starts-with(@name,'r_axilla_posterior_folds') or starts-with(@name,'spine_1_middle_back') or starts-with(@name,'spine_2_lower_back') or starts-with(@name,'waist_preferred_anterior') or starts-with(@name,'waist_preferred_posterior') or starts-with(@name,'l_rib10') or starts-with(@name,'l_thelion') or starts-with(@name,'r_rib10') or starts-with(@name,'r_thelion') or starts-with(@name,'l_asis') or starts-with(@name,'l_iliocristale') or starts-with(@name,'l_psis') or starts-with(@name,'r_asis') or starts-with(@name,'r_iliocristale') or starts-with(@name,'r_psis') or starts-with(@name,'crotch') or starts-with(@name,'l_femoral_lateral_epicondyle') or starts-with(@name,'l_femoral_medial_epicondyle') or starts-with(@name,'l_suprapatella') or starts-with(@name,'l_trochanterion') or starts-with(@name,'r_femoral_lateral_epicondyle') or starts-with(@name,'r_femoral_medial_epicondyle') or starts-with(@name,'r_suprapatella') or starts-with(@name,'r_trochanterion') or starts-with(@name,'l_tibiale') or starts-with(@name,'l_medial_malleolus') or starts-with(@name,'l_lateral_malleolus') or starts-with(@name,'l_sphyrion') or starts-with(@name,'r_tibiale') or starts-with(@name,'r_medial_malleolus') or starts-with(@name,'r_lateral_malleolus') or starts-with(@name,'r_sphyrion') or starts-with(@name,'l_metatarsal_phalanx_1') or starts-with(@name,'l_metatarsal_phalanx_5') or starts-with(@name,'l_dactylion') or starts-with(@name,'l_calcaneus_posterior') or starts-with(@name,'r_metatarsal_phalanx_1') or starts-with(@name,'r_metatarsal_phalanx_5') or starts-with(@name,'r_dactylion') or starts-with(@name,'r_calcaneus_posterior') or starts-with(@name,'l_humeral_lateral_epicondyle') or starts-with(@name,'l_humeral_medial_epicondyle') or starts-with(@name,'l_olecranon') or starts-with(@name,'r_humeral_lateral_epicondyle') or starts-with(@name,'r_humeral_medial_epicondyle') or starts-with(@name,'r_olecranon') or starts-with(@name,'l_radiale') or starts-with(@name,'l_ulnar_styloid') or starts-with(@name,'l_radial_styloid') or starts-with(@name,'r_radiale') or starts-with(@name,'r_ulnar_styloid') or starts-with(@name,'r_radial_styloid') or starts-with(@name,'l_metacarpal_phalanx_2') or starts-with(@name,'l_metacarpal_phalanx_3') or starts-with(@name,'l_metacarpal_phalanx_5') or starts-with(@name,'r_metacarpal_phalanx_2') or starts-with(@name,'r_metacarpal_phalanx_3') or starts-with(@name,'r_metacarpal_phalanx_5') or starts-with(@name,'nuchale') or starts-with(@name,'l_neck_base') or starts-with(@name,'r_neck_base') or starts-with(@name,'navel') or starts-with(@name,'l_ectocanthus') or starts-with(@name,'r_ectocanthus') or starts-with(@name,'menton') or starts-with(@name,'mesosternale') or starts-with(@name,'opisthocranion') or starts-with(@name,'l_knee_crease') or starts-with(@name,'r_knee_crease') or starts-with(@name,'rear_center_midsagittal_plane') or starts-with(@name,'buttocks_standing_wall_contact_point') or starts-with(@name,'l_chest_midsagittal_plane') or starts-with(@name,'r_chest_midsagittal_plane') or starts-with(@name,'l_bideltoid') or starts-with(@name,'r_bideltoid') or starts-with(@name,'l_carpal_distal_phalanx_1') or starts-with(@name,'l_carpal_distal_phalanx_2') or starts-with(@name,'l_carpal_distal_phalanx_3') or starts-with(@name,'l_carpal_distal_phalanx_4') or starts-with(@name,'l_carpal_distal_phalanx_5') or starts-with(@name,'r_carpal_distal_phalanx_1') or starts-with(@name,'r_carpal_distal_phalanx_2') or starts-with(@name,'r_carpal_distal_phalanx_3') or starts-with(@name,'r_carpal_distal_phalanx_4') or starts-with(@name,'r_carpal_distal_phalanx_5') or starts-with(@name,'l_tarsal_distal_phalanx_1') or starts-with(@name,'l_tarsal_distal_phalanx_2') or starts-with(@name,'l_tarsal_distal_phalanx_3') or starts-with(@name,'l_tarsal_distal_phalanx_4') or starts-with(@name,'l_tarsal_distal_phalanx_5') or starts-with(@name,'r_tarsal_distal_phalanx_1') or starts-with(@name,'r_tarsal_distal_phalanx_2') or starts-with(@name,'r_tarsal_distal_phalanx_3') or starts-with(@name,'r_tarsal_distal_phalanx_4') or starts-with(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'sacrum') or contains(@name,'pelvis') or contains(@name,'l_thigh') or contains(@name,'l_calf') or contains(@name,'l_talus') or contains(@name,'l_navicular') or contains(@name,'l_cuneiform_1') or contains(@name,'l_metatarsal_1') or contains(@name,'l_tarsal_proximal_phalanx_1') or contains(@name,'l_tarsal_distal_phalanx_1') or contains(@name,'l_cuneiform_2') or contains(@name,'l_metatarsal_2') or contains(@name,'l_tarsal_proximal_phalanx_2') or contains(@name,'l_tarsal_middle_phalanx_2') or contains(@name,'l_tarsal_distal_phalanx_2') or contains(@name,'l_cuneiform_3') or contains(@name,'l_metatarsal_3') or contains(@name,'l_tarsal_proximal_phalanx_3') or contains(@name,'l_tarsal_middle_phalanx_3') or contains(@name,'l_tarsal_distal_phalanx_3') or contains(@name,'l_calcaneus') or contains(@name,'l_cuboid') or contains(@name,'l_metatarsal_4') or contains(@name,'l_tarsal_proximal_phalanx_4') or contains(@name,'l_tarsal_middle_phalanx_4') or contains(@name,'l_tarsal_distal_phalanx_4') or contains(@name,'l_metatarsal_5') or contains(@name,'l_tarsal_proximal_phalanx_5') or contains(@name,'l_tarsal_middle_phalanx_5') or contains(@name,'l_tarsal_distal_phalanx_5') or contains(@name,'r_thigh') or contains(@name,'r_calf') or contains(@name,'r_talus') or contains(@name,'r_navicular') or contains(@name,'r_cuneiform_1') or contains(@name,'r_metatarsal_1') or contains(@name,'r_tarsal_proximal_phalanx_1') or contains(@name,'r_tarsal_distal_phalanx_1') or contains(@name,'r_cuneiform_2') or contains(@name,'r_metatarsal_2') or contains(@name,'r_tarsal_proximal_phalanx_2') or contains(@name,'r_tarsal_middle_phalanx_2') or contains(@name,'r_tarsal_distal_phalanx_2') or contains(@name,'r_cuneiform_3') or contains(@name,'r_metatarsal_3') or contains(@name,'r_tarsal_proximal_phalanx_3') or contains(@name,'r_tarsal_middle_phalanx_3') or contains(@name,'r_tarsal_distal_phalanx_3') or contains(@name,'r_calcaneus') or contains(@name,'r_cuboid') or contains(@name,'r_metatarsal_4') or contains(@name,'r_tarsal_proximal_phalanx_4') or contains(@name,'r_tarsal_middle_phalanx_4') or contains(@name,'r_tarsal_distal_phalanx_4') or contains(@name,'r_metatarsal_5') or contains(@name,'r_tarsal_proximal_phalanx_5') or contains(@name,'r_tarsal_middle_phalanx_5') or contains(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'l5') or contains(@name,'l4') or contains(@name,'l3') or contains(@name,'l2') or contains(@name,'l1') or contains(@name,'t12') or contains(@name,'t11') or contains(@name,'t10') or contains(@name,'t9') or contains(@name,'t8') or contains(@name,'t7') or contains(@name,'t6') or contains(@name,'t5') or contains(@name,'t4') or contains(@name,'t3') or contains(@name,'t2') or contains(@name,'t1') or contains(@name,'c7') or contains(@name,'c6') or contains(@name,'c5') or contains(@name,'c4') or contains(@name,'c3') or contains(@name,'c2') or contains(@name,'c1') or contains(@name,'skull') or contains(@name,'l_eyelid') or contains(@name,'r_eyelid') or contains(@name,'l_eyeball') or contains(@name,'r_eyeball') or contains(@name,'l_eyebrow') or contains(@name,'r_eyebrow') or contains(@name,'jaw') or contains(@name,'l_clavicle') or contains(@name,'l_scapula') or contains(@name,'l_upperarm') or contains(@name,'l_forearm') or contains(@name,'l_carpal') or contains(@name,'l_trapezium') or contains(@name,'l_metacarpal_1') or contains(@name,'l_carpal_proximal_phalanx_1') or contains(@name,'l_carpal_distal_phalanx_1') or contains(@name,'l_trapezoid') or contains(@name,'l_metacarpal_2') or contains(@name,'l_carpal_proximal_phalanx_2') or contains(@name,'l_carpal_middle_phalanx_2') or contains(@name,'l_carpal_distal_phalanx_2') or contains(@name,'l_capitate') or contains(@name,'l_metacarpal_3') or contains(@name,'l_carpal_proximal_phalanx_3') or contains(@name,'l_carpal_middle_phalanx_3') or contains(@name,'l_carpal_distal_phalanx_3') or contains(@name,'l_hamate') or contains(@name,'l_metacarpal_4') or contains(@name,'l_carpal_proximal_phalanx_4') or contains(@name,'l_carpal_middle_phalanx_4') or contains(@name,'l_carpal_distal_phalanx_4') or contains(@name,'l_metacarpal_5') or contains(@name,'l_carpal_proximal_phalanx_5') or contains(@name,'l_carpal_middle_phalanx_5') or contains(@name,'l_carpal_distal_phalanx_5') or contains(@name,'r_clavicle') or contains(@name,'r_scapula') or contains(@name,'r_upperarm') or contains(@name,'r_forearm') or contains(@name,'r_carpal') or contains(@name,'r_trapezium') or contains(@name,'r_metacarpal_1') or contains(@name,'r_carpal_proximal_phalanx_1') or contains(@name,'r_carpal_distal_phalanx_1') or contains(@name,'r_trapezoid') or contains(@name,'r_metacarpal_2') or contains(@name,'r_carpal_proximal_phalanx_2') or contains(@name,'r_carpal_middle_phalanx_2') or contains(@name,'r_carpal_distal_phalanx_2') or contains(@name,'r_capitate') or contains(@name,'r_metacarpal_3') or contains(@name,'r_carpal_proximal_phalanx_3') or contains(@name,'r_carpal_middle_phalanx_3') or contains(@name,'r_carpal_distal_phalanx_3') or contains(@name,'r_hamate') or contains(@name,'r_metacarpal_4') or contains(@name,'r_carpal_proximal_phalanx_4') or contains(@name,'r_carpal_middle_phalanx_4') or contains(@name,'r_carpal_distal_phalanx_4') or contains(@name,'r_metacarpal_5') or contains(@name,'r_carpal_proximal_phalanx_5') or contains(@name,'r_carpal_middle_phalanx_5') or contains(@name,'r_carpal_distal_phalanx_5')"
                       role="info"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]/HAnimSegment/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='negativeTranslationHeight' name='negativeTranslationHeight'/&gt; is not a recognized name for HAnim2 HAnimSite </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimDisplacer"/>
   <svrl:failed-assert test="(string-length($name) &gt; 0) or (string-length(@USE) &gt; 0) or IS/connect or ($nodeName = 'HAnimMotion')"
                       role="error"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]/HAnimSegment/HAnimSite/HAnimDisplacer">
      <svrl:text>&lt;HAnimDisplacer DEF='IllegalHAnimDisplacerInHAnimSiteNode'/&gt; name field is required </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[(@name='HAnim') or (@name='H-Anim')][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]/HAnimSegment/HAnimSite/HAnimDisplacer">
      <svrl:text>&lt;HAnimDisplacer DEF='IllegalHAnimDisplacerInHAnimSiteNode'/&gt; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='HAnim' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not((local-name(..)='HAnimJoint') or (local-name(..)='HAnimSegment') or (local-name(..)='ProtoBody') or (local-name(..)='field') or (local-name(..)='fieldValue'))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]/HAnimSegment/HAnimSite/HAnimDisplacer">
      <svrl:text>&lt;HAnimDisplacer DEF='IllegalHAnimDisplacerInHAnimSiteNode' name=' containerField='displacers'/&gt; has unexpected parent node HAnimSite, expected parent HAnimJoint or HAnimSegment </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:failed-assert test="@point or (@USE) or //ROUTE[@toNode=$DEF] or boolean(IS/connect[@nodeField='point']) or (//ProtoDeclare/ProtoInterface/field/*[@DEF=$USE]) or comment()"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]/HAnimSegment/Coordinate">
      <svrl:text>&lt;Coordinate DEF=''/&gt; contains no data in point array </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="CoordinateDouble"/>
   <svrl:failed-assert test="@point or (@USE) or //ROUTE[@toNode=$DEF] or boolean(IS/connect[@nodeField='point']) or comment()"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]/HAnimSegment/CoordinateDouble">
      <svrl:text>&lt;CoordinateDouble DEF=''/&gt; contains no data in point array </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='NURBS'][number(@level) ge 1]) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[1]/HAnimSegment/CoordinateDouble">
      <svrl:text>&lt;CoordinateDouble DEF=''/&gt; requires at least &lt;component name='NURBS' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="$isHAnim2 and (@name='l_knee') and parent::HAnimJoint[not(@name='l_hip')]"
                           role="warning"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[2]">
      <svrl:text>&lt;HAnimJoint DEF='MismatchedJointCenter_l_knee' name='l_knee'/&gt; has parent HAnimJoint name='HumanoidRoot' rather than expected parent name='l_hip', recommend checking model </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="$isHAnim2 and (@name='r_knee') and parent::HAnimJoint[not(@name='r_hip')]"
                           role="warning"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[3]">
      <svrl:text>&lt;HAnimJoint DEF='MismatchedJointCenter_r_knee' name='r_knee'/&gt; has parent HAnimJoint name='HumanoidRoot' rather than expected parent name='r_hip', recommend checking model </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:successful-report test="(@USE) and (string-length($USE) &gt; 0) and (count(//*[@DEF=$USE]) = 0)"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[4]">
      <svrl:text>&lt;HAnimJoint USE='IllegalEmbeddedHAnimUse'/&gt; USE node has no matching DEF node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@USE) &gt; 0) and not((local-name(..)='HAnimHumanoid') or (local-name(..)='field') or (local-name(..)='fieldValue'))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimJoint[4]">
      <svrl:text>&lt;HAnimJoint USE='IllegalEmbeddedHAnimUse'/&gt; can only appear as immediate child of HAnimHumanoid </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="(string-length(@DEF) &gt; 0) and (string-length(@name) &gt; 0) and not(contains(@DEF,concat('_',@name)))"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='IllegalNameIllegalParent' name='IllegalNameIllegalParent'/&gt; DEF value does not contain correctly modified version of name value (for example, DEF='myPrefix_nameValue' e.g. DEF='myPrefix_IllegalNameIllegalParent') - see HAnim section C.2 Humanoid, VRML Binding </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(ends-with(@name,'_tip')) and not(ends-with(@name,'_view')) and not(ends-with(@name,'_pt')) and not(@USE)"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='IllegalNameIllegalParent' name='IllegalNameIllegalParent'/&gt; has incomplete name that must have suffix '_tip' or '_view' or '_pt' appended, depending on function </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or starts-with(@name,'skull_vertex') or starts-with(@name,'glabella') or starts-with(@name,'sellion') or starts-with(@name,'l_infraorbitale') or starts-with(@name,'l_tragion') or starts-with(@name,'l_gonion') or starts-with(@name,'r_infraorbitale') or starts-with(@name,'r_tragion') or starts-with(@name,'r_gonion') or starts-with(@name,'supramenton') or starts-with(@name,'cervicale') or starts-with(@name,'adams_apple') or starts-with(@name,'suprasternale') or starts-with(@name,'substernale') or starts-with(@name,'l_clavicle') or starts-with(@name,'l_acromion') or starts-with(@name,'l_axilla_proximal') or starts-with(@name,'l_axilla_distal') or starts-with(@name,'l_axilla_posterior_folds') or starts-with(@name,'r_clavicle') or starts-with(@name,'r_acromion') or starts-with(@name,'r_axilla_proximal') or starts-with(@name,'r_axilla_distal') or starts-with(@name,'r_axilla_posterior_folds') or starts-with(@name,'spine_1_middle_back') or starts-with(@name,'spine_2_lower_back') or starts-with(@name,'waist_preferred_anterior') or starts-with(@name,'waist_preferred_posterior') or starts-with(@name,'l_rib10') or starts-with(@name,'l_thelion') or starts-with(@name,'r_rib10') or starts-with(@name,'r_thelion') or starts-with(@name,'l_asis') or starts-with(@name,'l_iliocristale') or starts-with(@name,'l_psis') or starts-with(@name,'r_asis') or starts-with(@name,'r_iliocristale') or starts-with(@name,'r_psis') or starts-with(@name,'crotch') or starts-with(@name,'l_femoral_lateral_epicondyle') or starts-with(@name,'l_femoral_medial_epicondyle') or starts-with(@name,'l_suprapatella') or starts-with(@name,'l_trochanterion') or starts-with(@name,'r_femoral_lateral_epicondyle') or starts-with(@name,'r_femoral_medial_epicondyle') or starts-with(@name,'r_suprapatella') or starts-with(@name,'r_trochanterion') or starts-with(@name,'l_tibiale') or starts-with(@name,'l_medial_malleolus') or starts-with(@name,'l_lateral_malleolus') or starts-with(@name,'l_sphyrion') or starts-with(@name,'r_tibiale') or starts-with(@name,'r_medial_malleolus') or starts-with(@name,'r_lateral_malleolus') or starts-with(@name,'r_sphyrion') or starts-with(@name,'l_metatarsal_phalanx_1') or starts-with(@name,'l_metatarsal_phalanx_5') or starts-with(@name,'l_dactylion') or starts-with(@name,'l_calcaneus_posterior') or starts-with(@name,'r_metatarsal_phalanx_1') or starts-with(@name,'r_metatarsal_phalanx_5') or starts-with(@name,'r_dactylion') or starts-with(@name,'r_calcaneus_posterior') or starts-with(@name,'l_humeral_lateral_epicondyle') or starts-with(@name,'l_humeral_medial_epicondyle') or starts-with(@name,'l_olecranon') or starts-with(@name,'r_humeral_lateral_epicondyle') or starts-with(@name,'r_humeral_medial_epicondyle') or starts-with(@name,'r_olecranon') or starts-with(@name,'l_radiale') or starts-with(@name,'l_ulnar_styloid') or starts-with(@name,'l_radial_styloid') or starts-with(@name,'r_radiale') or starts-with(@name,'r_ulnar_styloid') or starts-with(@name,'r_radial_styloid') or starts-with(@name,'l_metacarpal_phalanx_2') or starts-with(@name,'l_metacarpal_phalanx_3') or starts-with(@name,'l_metacarpal_phalanx_5') or starts-with(@name,'r_metacarpal_phalanx_2') or starts-with(@name,'r_metacarpal_phalanx_3') or starts-with(@name,'r_metacarpal_phalanx_5') or starts-with(@name,'nuchale') or starts-with(@name,'l_neck_base') or starts-with(@name,'r_neck_base') or starts-with(@name,'navel') or starts-with(@name,'l_ectocanthus') or starts-with(@name,'r_ectocanthus') or starts-with(@name,'menton') or starts-with(@name,'mesosternale') or starts-with(@name,'opisthocranion') or starts-with(@name,'l_knee_crease') or starts-with(@name,'r_knee_crease') or starts-with(@name,'rear_center_midsagittal_plane') or starts-with(@name,'buttocks_standing_wall_contact_point') or starts-with(@name,'l_chest_midsagittal_plane') or starts-with(@name,'r_chest_midsagittal_plane') or starts-with(@name,'l_bideltoid') or starts-with(@name,'r_bideltoid') or starts-with(@name,'l_carpal_distal_phalanx_1') or starts-with(@name,'l_carpal_distal_phalanx_2') or starts-with(@name,'l_carpal_distal_phalanx_3') or starts-with(@name,'l_carpal_distal_phalanx_4') or starts-with(@name,'l_carpal_distal_phalanx_5') or starts-with(@name,'r_carpal_distal_phalanx_1') or starts-with(@name,'r_carpal_distal_phalanx_2') or starts-with(@name,'r_carpal_distal_phalanx_3') or starts-with(@name,'r_carpal_distal_phalanx_4') or starts-with(@name,'r_carpal_distal_phalanx_5') or starts-with(@name,'l_tarsal_distal_phalanx_1') or starts-with(@name,'l_tarsal_distal_phalanx_2') or starts-with(@name,'l_tarsal_distal_phalanx_3') or starts-with(@name,'l_tarsal_distal_phalanx_4') or starts-with(@name,'l_tarsal_distal_phalanx_5') or starts-with(@name,'r_tarsal_distal_phalanx_1') or starts-with(@name,'r_tarsal_distal_phalanx_2') or starts-with(@name,'r_tarsal_distal_phalanx_3') or starts-with(@name,'r_tarsal_distal_phalanx_4') or starts-with(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'sacrum') or contains(@name,'pelvis') or contains(@name,'l_thigh') or contains(@name,'l_calf') or contains(@name,'l_talus') or contains(@name,'l_navicular') or contains(@name,'l_cuneiform_1') or contains(@name,'l_metatarsal_1') or contains(@name,'l_tarsal_proximal_phalanx_1') or contains(@name,'l_tarsal_distal_phalanx_1') or contains(@name,'l_cuneiform_2') or contains(@name,'l_metatarsal_2') or contains(@name,'l_tarsal_proximal_phalanx_2') or contains(@name,'l_tarsal_middle_phalanx_2') or contains(@name,'l_tarsal_distal_phalanx_2') or contains(@name,'l_cuneiform_3') or contains(@name,'l_metatarsal_3') or contains(@name,'l_tarsal_proximal_phalanx_3') or contains(@name,'l_tarsal_middle_phalanx_3') or contains(@name,'l_tarsal_distal_phalanx_3') or contains(@name,'l_calcaneus') or contains(@name,'l_cuboid') or contains(@name,'l_metatarsal_4') or contains(@name,'l_tarsal_proximal_phalanx_4') or contains(@name,'l_tarsal_middle_phalanx_4') or contains(@name,'l_tarsal_distal_phalanx_4') or contains(@name,'l_metatarsal_5') or contains(@name,'l_tarsal_proximal_phalanx_5') or contains(@name,'l_tarsal_middle_phalanx_5') or contains(@name,'l_tarsal_distal_phalanx_5') or contains(@name,'r_thigh') or contains(@name,'r_calf') or contains(@name,'r_talus') or contains(@name,'r_navicular') or contains(@name,'r_cuneiform_1') or contains(@name,'r_metatarsal_1') or contains(@name,'r_tarsal_proximal_phalanx_1') or contains(@name,'r_tarsal_distal_phalanx_1') or contains(@name,'r_cuneiform_2') or contains(@name,'r_metatarsal_2') or contains(@name,'r_tarsal_proximal_phalanx_2') or contains(@name,'r_tarsal_middle_phalanx_2') or contains(@name,'r_tarsal_distal_phalanx_2') or contains(@name,'r_cuneiform_3') or contains(@name,'r_metatarsal_3') or contains(@name,'r_tarsal_proximal_phalanx_3') or contains(@name,'r_tarsal_middle_phalanx_3') or contains(@name,'r_tarsal_distal_phalanx_3') or contains(@name,'r_calcaneus') or contains(@name,'r_cuboid') or contains(@name,'r_metatarsal_4') or contains(@name,'r_tarsal_proximal_phalanx_4') or contains(@name,'r_tarsal_middle_phalanx_4') or contains(@name,'r_tarsal_distal_phalanx_4') or contains(@name,'r_metatarsal_5') or contains(@name,'r_tarsal_proximal_phalanx_5') or contains(@name,'r_tarsal_middle_phalanx_5') or contains(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'l5') or contains(@name,'l4') or contains(@name,'l3') or contains(@name,'l2') or contains(@name,'l1') or contains(@name,'t12') or contains(@name,'t11') or contains(@name,'t10') or contains(@name,'t9') or contains(@name,'t8') or contains(@name,'t7') or contains(@name,'t6') or contains(@name,'t5') or contains(@name,'t4') or contains(@name,'t3') or contains(@name,'t2') or contains(@name,'t1') or contains(@name,'c7') or contains(@name,'c6') or contains(@name,'c5') or contains(@name,'c4') or contains(@name,'c3') or contains(@name,'c2') or contains(@name,'c1') or contains(@name,'skull') or contains(@name,'l_eyelid') or contains(@name,'r_eyelid') or contains(@name,'l_eyeball') or contains(@name,'r_eyeball') or contains(@name,'l_eyebrow') or contains(@name,'r_eyebrow') or contains(@name,'jaw') or contains(@name,'l_clavicle') or contains(@name,'l_scapula') or contains(@name,'l_upperarm') or contains(@name,'l_forearm') or contains(@name,'l_carpal') or contains(@name,'l_trapezium') or contains(@name,'l_metacarpal_1') or contains(@name,'l_carpal_proximal_phalanx_1') or contains(@name,'l_carpal_distal_phalanx_1') or contains(@name,'l_trapezoid') or contains(@name,'l_metacarpal_2') or contains(@name,'l_carpal_proximal_phalanx_2') or contains(@name,'l_carpal_middle_phalanx_2') or contains(@name,'l_carpal_distal_phalanx_2') or contains(@name,'l_capitate') or contains(@name,'l_metacarpal_3') or contains(@name,'l_carpal_proximal_phalanx_3') or contains(@name,'l_carpal_middle_phalanx_3') or contains(@name,'l_carpal_distal_phalanx_3') or contains(@name,'l_hamate') or contains(@name,'l_metacarpal_4') or contains(@name,'l_carpal_proximal_phalanx_4') or contains(@name,'l_carpal_middle_phalanx_4') or contains(@name,'l_carpal_distal_phalanx_4') or contains(@name,'l_metacarpal_5') or contains(@name,'l_carpal_proximal_phalanx_5') or contains(@name,'l_carpal_middle_phalanx_5') or contains(@name,'l_carpal_distal_phalanx_5') or contains(@name,'r_clavicle') or contains(@name,'r_scapula') or contains(@name,'r_upperarm') or contains(@name,'r_forearm') or contains(@name,'r_carpal') or contains(@name,'r_trapezium') or contains(@name,'r_metacarpal_1') or contains(@name,'r_carpal_proximal_phalanx_1') or contains(@name,'r_carpal_distal_phalanx_1') or contains(@name,'r_trapezoid') or contains(@name,'r_metacarpal_2') or contains(@name,'r_carpal_proximal_phalanx_2') or contains(@name,'r_carpal_middle_phalanx_2') or contains(@name,'r_carpal_distal_phalanx_2') or contains(@name,'r_capitate') or contains(@name,'r_metacarpal_3') or contains(@name,'r_carpal_proximal_phalanx_3') or contains(@name,'r_carpal_middle_phalanx_3') or contains(@name,'r_carpal_distal_phalanx_3') or contains(@name,'r_hamate') or contains(@name,'r_metacarpal_4') or contains(@name,'r_carpal_proximal_phalanx_4') or contains(@name,'r_carpal_middle_phalanx_4') or contains(@name,'r_carpal_distal_phalanx_4') or contains(@name,'r_metacarpal_5') or contains(@name,'r_carpal_proximal_phalanx_5') or contains(@name,'r_carpal_middle_phalanx_5') or contains(@name,'r_carpal_distal_phalanx_5')"
                       role="info"
                       location="/X3D/Scene/HAnimHumanoid[2]/HAnimJoint[1]/HAnimJoint[8]/HAnimSite">
      <svrl:text>&lt;HAnimSite DEF='IllegalNameIllegalParent' name='IllegalNameIllegalParent'/&gt; is not a recognized name for HAnim2 HAnimSite </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="(string-length(@USE) &gt; 0) and (preceding-sibling::HAnimSite[(@USE = $USE)])"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimSite[2]">
      <svrl:text>&lt;HAnimSite USE='hanim_Top_view' containerField='viewpoints'/&gt; matches a duplicate preceding USE node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:fired-rule context="HAnimSegment"/>
   <svrl:successful-report test="(string-length(@USE) &gt; 0) and (preceding-sibling::HAnimSegment[(@USE = $USE)])"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimSegment[3]">
      <svrl:text>&lt;HAnimSegment USE='IllegalChildrenContainerFields' containerField='segments'/&gt; matches a duplicate preceding USE node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:successful-report test="(local-name(..) = 'HAnimHumanoid') and not(@containerField='skinCoord') and not(@containerField='skinBindingCoords')"
                           role="warning"
                           location="/X3D/Scene/HAnimHumanoid[2]/Coordinate[2]">
      <svrl:text>&lt;Coordinate DEF='HAnimCoordinateIncorrectContainerField'/&gt; with parent HAnimHumanoid must have @containerField='skinCoord' or @containerField='skinBindingCoords' </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="@point or (@USE) or //ROUTE[@toNode=$DEF] or boolean(IS/connect[@nodeField='point']) or (//ProtoDeclare/ProtoInterface/field/*[@DEF=$USE]) or comment()"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]/Coordinate[2]">
      <svrl:text>&lt;Coordinate DEF='HAnimCoordinateIncorrectContainerField'/&gt; contains no data in point array </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="CoordinateDouble"/>
   <svrl:fired-rule context="CoordinateDouble"/>
   <svrl:successful-report test="(local-name(..) = 'HAnimHumanoid') and not(@containerField='skinCoord') and not(@containerField='skinBindingCoords')"
                           role="warning"
                           location="/X3D/Scene/HAnimHumanoid[2]/CoordinateDouble[2]">
      <svrl:text>&lt;CoordinateDouble DEF='HAnimCoordinateDoubleIncorrectContainerField'/&gt; with parent HAnimHumanoid must have @containerField='skinCoord' or @containerField='skinBindingCoords' </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="@point or (@USE) or //ROUTE[@toNode=$DEF] or boolean(IS/connect[@nodeField='point']) or comment()"
                       role="warning"
                       location="/X3D/Scene/HAnimHumanoid[2]/CoordinateDouble[2]">
      <svrl:text>&lt;CoordinateDouble DEF='HAnimCoordinateDoubleIncorrectContainerField'/&gt; contains no data in point array </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Normal"/>
   <svrl:successful-report test="(local-name(..) = 'HAnimHumanoid') and not(@containerField='skinNormal') and not(@containerField='skinBindingNormals')"
                           role="warning"
                           location="/X3D/Scene/HAnimHumanoid[2]/Normal">
      <svrl:text>&lt;Normal DEF='HAnimNormalIncorrectContainerField'/&gt; with parent HAnimHumanoid must have @containerField='skinNormal' or @containerField='skinBindingNormals' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimJoint"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:successful-report test="(string-length(@USE) &gt; 0) and (preceding-sibling::HAnimSite[(@USE = $USE)])"
                           role="error"
                           location="/X3D/Scene/HAnimHumanoid[2]/HAnimSite[3]">
      <svrl:text>&lt;HAnimSite USE='hanim_Top_view' containerField='sites'/&gt; matches a duplicate preceding USE node </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="HAnimSite"/>
   <svrl:fired-rule context="Sound"/>
   <svrl:failed-assert test="@USE or AudioClip or MovieTexture"
                       role="warning"
                       location="/X3D/Scene/Sound[1]">
      <svrl:text>&lt;Sound DEF='NoChildren'/&gt; has no child AudioClip or MovieTexture node </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not(@USE) and (contains(@location,' 0 ') or contains(@location,' 0.0 ')) and not(parent::Transform)"
                           role="warning"
                           location="/X3D/Scene/Sound[1]">
      <svrl:text>&lt;Sound DEF='NoChildren'/&gt; location='0 0 0' has height of sound ellipse centered on ground plane, consider changing location y-value to 1.6 in order to match typical avatar height (in meters) </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Sound'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/Sound[1]">
      <svrl:text>&lt;Sound DEF='NoChildren'/&gt; requires at least &lt;component name='Sound' level='1'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="AudioClip"/>
   <svrl:successful-report test="not(parent::LoadSensor) and not(parent::Sound) and not(parent::field) and not(parent::fieldValue)"
                           role="error"
                           location="/X3D/Scene/AudioClip">
      <svrl:text>&lt;AudioClip DEF='NoParentSoundNode'/&gt; has parent Scene node, must be contained by Sound or LoadSensor node (or else within field declaration or fieldValue initialization) </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@url) &gt; 2) and not(contains(@url,'.wav')) and not(contains(@url,'.mid')) and not(contains(@url,'.midi'))"
                           role="warning"
                           location="/X3D/Scene/AudioClip">
      <svrl:text>&lt;AudioClip DEF='NoParentSoundNode'/&gt; url array does not contains link to .wav or .midi sound files, browsers not required to support other formats (url='"blah" "https://www.web3d.org/x3d/content/examples/Basic/development/blah"') </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Sound'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/AudioClip">
      <svrl:text>&lt;AudioClip DEF='NoParentSoundNode'/&gt; requires at least &lt;component name='Sound' level='1'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Sound"/>
   <svrl:failed-assert test="not(contains(@class,',')) and not(contains(@class,';'))"
                       role="error"
                       location="/X3D/Scene/Sound[2]">
      <svrl:text>&lt;Sound DEF='' class='must separate classes with;space characters' cannot contain commas or semicolons, instead separate class names using space characters </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="AudioClip"/>
   <svrl:successful-report test="not(local-name()='Anchor') and not(parent::field) and not(parent::fieldValue) and not(ancestor::ProtoDeclare) and not(ancestor::ExternProtoDeclare) and (string-length($normalizedStringUrl) &gt; 0) and preceding::*[normalize-space(@url) = $normalizedStringUrl] and (count(preceding::*[local-name()=$nodeName][normalize-space(@url) = $normalizedStringUrl]) &gt; 0)"
                           role="warning"
                           location="/X3D/Scene/Sound[2]/AudioClip">
      <svrl:text>&lt;AudioClip DEF=''/&gt; url array address(es) duplicate the url definition found in a preceding node, consider DEF/USE to reduce download delays and memory requirements for url content (url='"blah" "https://www.web3d.org/x3d/content/examples/Basic/development/blah"') </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@url) &gt; 2) and not(contains(@url,'.wav')) and not(contains(@url,'.mid')) and not(contains(@url,'.midi'))"
                           role="warning"
                           location="/X3D/Scene/Sound[2]/AudioClip">
      <svrl:text>&lt;AudioClip DEF=''/&gt; url array does not contains link to .wav or .midi sound files, browsers not required to support other formats (url='"blah" "https://www.web3d.org/x3d/content/examples/Basic/development/blah"') </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Sound"/>
   <svrl:fired-rule context="AudioClip"/>
   <svrl:fired-rule context="Sound"/>
   <svrl:successful-report test="not(@USE) and ((0 &gt; number(@minBack)) or (0 &gt; number(@maxBack)))"
                           role="error"
                           location="/X3D/Scene/Sound[4]">
      <svrl:text>&lt;Sound DEF='SoundMinNegative'/&gt; minBack='-1' maxBack='10' has negative value for distance along back direction </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and ((0 &gt; number(@minFront)) or (0 &gt; number(@maxFront)))"
                           role="error"
                           location="/X3D/Scene/Sound[4]">
      <svrl:text>&lt;Sound DEF='SoundMinNegative'/&gt; minFront='-1' maxFront='10' has negative value for distance along front direction </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="AudioClip"/>
   <svrl:fired-rule context="Sound"/>
   <svrl:successful-report test="not(@USE) and ((0 &gt; number(@minBack)) or (0 &gt; number(@maxBack)))"
                           role="error"
                           location="/X3D/Scene/Sound[5]">
      <svrl:text>&lt;Sound DEF='SoundMaxNegative'/&gt; minBack='1' maxBack='-10' has negative value for distance along back direction </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and ((0 &gt; number(@minFront)) or (0 &gt; number(@maxFront)))"
                           role="error"
                           location="/X3D/Scene/Sound[5]">
      <svrl:text>&lt;Sound DEF='SoundMaxNegative'/&gt; minFront='1' maxFront='-10' has negative value for distance along front direction </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="AudioClip"/>
   <svrl:fired-rule context="Sound"/>
   <svrl:successful-report test="not(@USE) and (number(@minBack) &gt; number(@maxBack)) and (number(@minBack) &gt; 0) and (number(@maxBack) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/Sound[6]">
      <svrl:text>&lt;Sound DEF='SoundMinGreaterThanMax'/&gt; minBack='12' (number=12) maxBack='11' (number=11) has minBack value greater than maxBack value </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and (number(@minFront) &gt; number(@maxFront)) and (number(@minFront) &gt; 0) and (number(@maxFront) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/Sound[6]">
      <svrl:text>&lt;Sound DEF='SoundMinGreaterThanMax'/&gt; minFront='12' (number=12) maxFront='11' (number=NaN) has minFront value greater than maxFront value </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="AudioClip"/>
   <svrl:fired-rule context="Sound"/>
   <svrl:successful-report test="not(@USE) and (number(@minBack) &gt; number(@maxBack)) and (number(@minBack) &gt; 0) and (number(@maxBack) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/Sound[7]">
      <svrl:text>&lt;Sound DEF='SoundMinGreaterThanDefaultMax'/&gt; minBack='13' (number=13) maxBack='10' (number=10) has minBack value greater than maxBack value </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and (number(@minFront) &gt; number(@maxFront)) and (number(@minFront) &gt; 0) and (number(@maxFront) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/Sound[7]">
      <svrl:text>&lt;Sound DEF='SoundMinGreaterThanDefaultMax'/&gt; minFront='13' (number=13) maxFront='10' (number=NaN) has minFront value greater than maxFront value </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="AudioClip"/>
   <svrl:fired-rule context="Sound"/>
   <svrl:successful-report test="not(@USE) and (number(@minBack) &gt; number(@maxBack)) and (number(@minBack) &gt; 0) and (number(@maxBack) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/Sound[8]">
      <svrl:text>&lt;Sound DEF='SoundMaxLessThanDefaultMin'/&gt; minBack='1' (number=1) maxBack='0.5' (number=0.5) has minBack value greater than maxBack value </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(@USE) and (number(@minFront) &gt; number(@maxFront)) and (number(@minFront) &gt; 0) and (number(@maxFront) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/Sound[8]">
      <svrl:text>&lt;Sound DEF='SoundMaxLessThanDefaultMin'/&gt; minFront='1' (number=1) maxFront='0.5' (number=NaN) has minFront value greater than maxFront value </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="AudioClip"/>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:successful-report test="not(//*[@DEF=$fromNode])"
                           role="error"
                           location="/X3D/Scene/ROUTE[5]">
      <svrl:text>&lt;ROUTE fromNode='DuplicateROUTE' fromField='test1' toNode='test2' toField='test3'/&gt; has no corresponding fromNode with DEF='DuplicateROUTE' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(//*[@DEF=$toNode ])"
                           role="error"
                           location="/X3D/Scene/ROUTE[5]">
      <svrl:text>&lt;ROUTE fromNode='DuplicateROUTE' fromField='test1' toNode='test2' toField='test3'/&gt; has no corresponding toNode with DEF='test2' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(count(following::ROUTE[@fromNode=$fromNode][@fromField=$fromField][@toNode=$toNode][@toField=$toField]) &gt; 0) and (count(preceding::ROUTE[@fromNode=$fromNode][@fromField=$fromField][@toNode=$toNode][@toField=$toField]) = 0)"
                           role="error"
                           location="/X3D/Scene/ROUTE[5]">
      <svrl:text>&lt;ROUTE fromNode='DuplicateROUTE' fromField='test1' toNode='test2' toField='test3'/&gt; has a total of 3 duplicate(s), remove copies while keeping the remaining ROUTE after fromNode and toNode targets </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:successful-report test="not(//*[@DEF=$fromNode])"
                           role="error"
                           location="/X3D/Scene/ROUTE[6]">
      <svrl:text>&lt;ROUTE fromNode='DuplicateROUTE' fromField='test1' toNode='test2' toField='test3'/&gt; has no corresponding fromNode with DEF='DuplicateROUTE' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(//*[@DEF=$toNode ])"
                           role="error"
                           location="/X3D/Scene/ROUTE[6]">
      <svrl:text>&lt;ROUTE fromNode='DuplicateROUTE' fromField='test1' toNode='test2' toField='test3'/&gt; has no corresponding toNode with DEF='test2' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:successful-report test="not(//*[@DEF=$fromNode])"
                           role="error"
                           location="/X3D/Scene/ROUTE[7]">
      <svrl:text>&lt;ROUTE fromNode='DuplicateROUTE' fromField='test1' toNode='test2' toField='test3'/&gt; has no corresponding fromNode with DEF='DuplicateROUTE' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not(//*[@DEF=$toNode ])"
                           role="error"
                           location="/X3D/Scene/ROUTE[7]">
      <svrl:text>&lt;ROUTE fromNode='DuplicateROUTE' fromField='test1' toNode='test2' toField='test3'/&gt; has no corresponding toNode with DEF='test2' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:successful-report test="(following::*[@DEF=$fromNode])"
                           role="error"
                           location="/X3D/Scene/ROUTE[8]">
      <svrl:text>&lt;ROUTE fromNode='NodeFollowsRoute1' fromField='children' toNode='NodeFollowsRoute2' toField='children'/&gt; precedes target fromNode &lt;Group DEF='NodeFollowsRoute1'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(following::*[@DEF=$toNode ])"
                           role="error"
                           location="/X3D/Scene/ROUTE[8]">
      <svrl:text>&lt;ROUTE fromNode='NodeFollowsRoute1' fromField='children' toNode='NodeFollowsRoute2' toField='children'/&gt; precedes target toNode &lt;Group DEF='NodeFollowsRoute2'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))"
                       role="warning"
                       location="/X3D/Scene/Shape[28]">
      <svrl:text>&lt;Shape DEF='ElevationGridInsufficientHeights'/&gt; found without child Appearance or Color </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ElevationGrid"/>
   <svrl:successful-report test="(@xSpacing = 0)"
                           role="error"
                           location="/X3D/Scene/Shape[28]/ElevationGrid">
      <svrl:text>&lt;ElevationGrid DEF=''/&gt; erroneous zero value xSpacing='0', must be positive </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@zSpacing = 0)"
                           role="error"
                           location="/X3D/Scene/Shape[28]/ElevationGrid">
      <svrl:text>&lt;ElevationGrid DEF=''/&gt; erroneous zero value zSpacing='0', must be positive </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="($ElevationGridHeightCount = $heightValuesNeeded)"
                       location="/X3D/Scene/Shape[28]/ElevationGrid">
      <svrl:text>&lt;ElevationGrid DEF=''/&gt; height array has 5 values when (xDimension * zDimension = 2 * 3 = 6) values are required </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))"
                       role="warning"
                       location="/X3D/Scene/Shape[29]">
      <svrl:text>&lt;Shape DEF='ElevationGridTooManyHeights'/&gt; found without child Appearance or Color </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ElevationGrid"/>
   <svrl:successful-report test="starts-with(normalize-space(@xSpacing),'-')"
                           role="error"
                           location="/X3D/Scene/Shape[29]/ElevationGrid">
      <svrl:text>&lt;ElevationGrid DEF=''/&gt; erroneous negative value xSpacing='-1', must be positive </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="starts-with(normalize-space(@zSpacing),'-')"
                           role="error"
                           location="/X3D/Scene/Shape[29]/ElevationGrid">
      <svrl:text>&lt;ElevationGrid DEF=''/&gt; erroneous negative value zSpacing='-1', must be positive </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="($ElevationGridHeightCount = $heightValuesNeeded)"
                       location="/X3D/Scene/Shape[29]/ElevationGrid">
      <svrl:text>&lt;ElevationGrid DEF=''/&gt; height array has 7 values when (xDimension * zDimension = 2 * 3 = 6) values are required </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))"
                       role="warning"
                       location="/X3D/Scene/Shape[30]">
      <svrl:text>&lt;Shape DEF='ElevationGridBadDimensions'/&gt; found without child Appearance or Color </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="ElevationGrid"/>
   <svrl:successful-report test="(string-length(normalize-space(translate(@xDimension,'0123456789',''))) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/Shape[30]/ElevationGrid">
      <svrl:text>&lt;ElevationGrid DEF=''/&gt; erroneous value xDimension='-2', must be non-negative integer </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(normalize-space(translate(@zDimension,'0123456789',''))) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/Shape[30]/ElevationGrid">
      <svrl:text>&lt;ElevationGrid DEF=''/&gt; erroneous value zDimension='-3', must be non-negative integer </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="StaticGroup"/>
   <svrl:failed-assert test="((/X3D[@profile='Full']) or (/X3D/head/component[@name='Grouping'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/StaticGroup">
      <svrl:text>&lt;StaticGroup DEF='StaticGroupChildTests'/&gt; requires at least &lt;component name='Grouping' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TimeSensor"/>
   <svrl:successful-report test="(@DEF) and ancestor::StaticGroup"
                           role="warning"
                           location="/X3D/Scene/StaticGroup/Group/TimeSensor">
      <svrl:text>&lt;TimeSensor DEF='StaticGroupDescendantsCannotProduceEvents'/&gt; cannot ROUTE or USE this DEF node because it is found inside of ancestor &lt;StaticGroup DEF='StaticGroupChildTests'/&gt; (since any child nodes may get refactored inside StaticGroup) </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and (local-name() = 'TimeSensor')"
                           role="warning"
                           location="/X3D/Scene/StaticGroup/Group/TimeSensor">
      <svrl:text>&lt;TimeSensor DEF='StaticGroupDescendantsCannotProduceEvents'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='StaticGroupDescendantsCannotProduceEvents' fromField='fraction_changed' toNode='SomeInterpolatorDEFname' toField='set_fraction'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:successful-report test="(@DEF) and ancestor::StaticGroup"
                           role="warning"
                           location="/X3D/Scene/StaticGroup/Group/PositionInterpolator[1]">
      <svrl:text>&lt;PositionInterpolator DEF='StaticGroupDescendantsCannotConsumeEvents'/&gt; cannot ROUTE or USE this DEF node because it is found inside of ancestor &lt;StaticGroup DEF='StaticGroupChildTests'/&gt; (since any child nodes may get refactored inside StaticGroup) </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="((@DEF) and not(//ROUTE[@toNode=$DEF]) and not((local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect)) and (contains(local-name(),'Interpolator') or contains(local-name(),'Sequencer'))"
                           role="warning"
                           location="/X3D/Scene/StaticGroup/Group/PositionInterpolator[1]">
      <svrl:text>&lt;PositionInterpolator DEF='StaticGroupDescendantsCannotConsumeEvents'/&gt; is missing ROUTE to receive input events, for example &lt;ROUTE fromNode='SomeTimeSensorDEFname' fromField='fraction_changed' toNode='StaticGroupDescendantsCannotConsumeEvents' toField='set_fraction'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Interpolator')"
                           role="warning"
                           location="/X3D/Scene/StaticGroup/Group/PositionInterpolator[1]">
      <svrl:text>&lt;PositionInterpolator DEF='StaticGroupDescendantsCannotConsumeEvents'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='StaticGroupDescendantsCannotConsumeEvents' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:failed-assert test="(string-length(normalize-space($key)) &gt; 0) or (@USE) or (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='key'])"
                       role="error"
                       location="/X3D/Scene/StaticGroup/Group/PositionInterpolator[1]">
      <svrl:text>&lt;PositionInterpolator DEF='StaticGroupDescendantsCannotConsumeEvents'/&gt; missing key array </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(string-length(normalize-space($keyValue)) &gt; 0) or (@USE) or (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='keyValue'])"
                       role="error"
                       location="/X3D/Scene/StaticGroup/Group/PositionInterpolator[1]">
      <svrl:text>&lt;PositionInterpolator DEF='StaticGroupDescendantsCannotConsumeEvents'/&gt; missing keyValue array </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or (3 * $keyCount)=$keyValueCount"
                       role="error"
                       location="/X3D/Scene/StaticGroup/Group/PositionInterpolator[1]">
      <svrl:text>&lt;PositionInterpolator DEF='StaticGroupDescendantsCannotConsumeEvents'/&gt; key array (size=1) must match keyValue array (size=0.333333333333333333 sets of 3-tuple values) </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="PositionInterpolator"/>
   <svrl:successful-report test="(@USE) and (string-length($USE) &gt; 0) and (count(//*[@DEF=$USE]) = 0)"
                           role="error"
                           location="/X3D/Scene/StaticGroup/Group/PositionInterpolator[2]">
      <svrl:text>&lt;PositionInterpolator USE='StaticGroupDescendantsCannotBeUsed'/&gt; USE node has no matching DEF node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@USE) and ancestor::StaticGroup"
                           role="error"
                           location="/X3D/Scene/StaticGroup/Group/PositionInterpolator[2]">
      <svrl:text>&lt;PositionInterpolator USE='StaticGroupDescendantsCannotBeUsed'/&gt; cannot USE this node because it is found inside of ancestor &lt;StaticGroup DEF='StaticGroupChildTests'/&gt; (since any child nodes may get refactored inside StaticGroup) </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]"/>
   <svrl:successful-report test="(local-name() != 'ROUTE')"
                           role="error"
                           location="/X3D/Scene/StaticGroup/Route">
      <svrl:text>&lt;Route&gt; element capitalization must be upper-case &lt;ROUTE&gt; for proper validation </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(//*[@DEF=$fromNode][ancestor::StaticGroup])"
                           role="error"
                           location="/X3D/Scene/StaticGroup/Route">
      <svrl:text>&lt;ROUTE fromNode='StaticGroupDescendantsCannotProduceEvents' fromField='fraction_changed' toNode='StaticGroupDescendantsCannotConsumeEvents' toField='set_fraction'/&gt; ROUTE error, fromNode='StaticGroupDescendantsCannotProduceEvents' has ancestor StaticGroup, such children cannot produce events (since any child nodes may get refactored inside StaticGroup) </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(//*[@DEF=$toNode ][ancestor::StaticGroup])"
                           role="error"
                           location="/X3D/Scene/StaticGroup/Route">
      <svrl:text>&lt;ROUTE fromNode='StaticGroupDescendantsCannotProduceEvents' fromField='fraction_changed' toNode='StaticGroupDescendantsCannotConsumeEvents' toField='set_fraction'/&gt; ROUTE error, toNode='StaticGroupDescendantsCannotConsumeEvents' has ancestor StaticGroup, such children cannot receive events (since any child nodes may get refactored inside StaticGroup) </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="Group"/>
   <svrl:successful-report test="(@USE) and (string-length($USE) &gt; 0) and (count(//*[@DEF=$USE]) = 0)"
                           role="error"
                           location="/X3D/Scene/Group[13]">
      <svrl:text>&lt;Group USE='CASESENSITIVE'/&gt; USE node has no matching DEF node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(@USE) and (count(//*[@DEF=$USE]) = 0) and (count(//*[lower-case(@DEF)=lower-case($USE)]) &gt; 0)"
                           role="error"
                           location="/X3D/Scene/Group[13]">
      <svrl:text>&lt;Group USE='CASESENSITIVE'/&gt; USE value has mismatched case with corresponding &lt;Group DEF='CaseSensitive'/&gt;, best practice is to avoid dependencies on case sensitivity of DEF/USE names </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Group"/>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Sensor') and not(local-name() = 'TimeSensor')"
                           role="warning"
                           location="/X3D/Scene/Group[14]/TouchSensor">
      <svrl:text>&lt;TouchSensor DEF='PeerTouchSensor'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='PeerTouchSensor' fromField='isActive/isOver/something_changed' toNode='SomeTargetDEFname' toField='set_enabled/set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="../Billboard"
                           role="warning"
                           location="/X3D/Scene/Group[14]/TouchSensor">
      <svrl:text>&lt;TouchSensor DEF='PeerTouchSensor'/&gt; has peer Billboard node which may make selection of geometry difficult </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="($peerNodesTotalCount &gt; 0)"
                           role="warning"
                           location="/X3D/Scene/Group[14]/TouchSensor">
      <svrl:text>&lt;TouchSensor DEF='PeerTouchSensor'/&gt; has peer pointing-device sensor nodes which may make which selection of geometry difficult </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor"/>
   <svrl:successful-report test="not( $touchSensorNoDEF or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and contains(local-name(),'Sensor') and not(local-name() = 'TimeSensor')"
                           role="warning"
                           location="/X3D/Scene/Group[14]/CylinderSensor">
      <svrl:text>&lt;CylinderSensor DEF='PeerCylinderSensor'/&gt; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='PeerCylinderSensor' fromField='isActive/isOver/something_changed' toNode='SomeTargetDEFname' toField='set_enabled/set_something'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@description) = 0) and not(boolean(IS/connect/@nodeField='description')) and not(@USE) and ((local-name()='CylinderSensor') or (local-name()='SphereSensor'))"
                           role="warning"
                           location="/X3D/Scene/Group[14]/CylinderSensor">
      <svrl:text>&lt;CylinderSensor DEF='PeerCylinderSensor'/&gt; is missing description. Example: description='select and drag to rotate' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="../Billboard"
                           role="warning"
                           location="/X3D/Scene/Group[14]/CylinderSensor">
      <svrl:text>&lt;CylinderSensor DEF='PeerCylinderSensor'/&gt; has peer Billboard node which may make selection of geometry difficult </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="($peerNodesTotalCount &gt; 0)"
                           role="warning"
                           location="/X3D/Scene/Group[14]/CylinderSensor">
      <svrl:text>&lt;CylinderSensor DEF='PeerCylinderSensor'/&gt; has peer pointing-device sensor nodes which may make which selection of geometry difficult </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Billboard"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/Group[14]/Billboard">
      <svrl:text>&lt;Billboard DEF='PeerBillboard'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Navigation'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                           role="error"
                           location="/X3D/Scene/Group[14]/Billboard">
      <svrl:text>&lt;Billboard DEF='PeerBillboard'/&gt; requires at least &lt;component name='Navigation' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Inline"/>
   <svrl:successful-report test="(string-length(normalize-space(//meta[@name='title']/@content)) &gt; 0) and contains(@url, //meta[@name='title']/@content)"
                           role="error"
                           location="/X3D/Scene/Inline[5]">
      <svrl:text>&lt;Inline DEF='RecursiveInlineInvocation'/&gt; appears to recursively load itself, which is a major security violation! https://www.web3d.org/x3d/content/examples/X3dResources.html#Security </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:failed-assert test="@point or (@USE) or //ROUTE[@toNode=$DEF] or boolean(IS/connect[@nodeField='point']) or (//ProtoDeclare/ProtoInterface/field/*[@DEF=$USE]) or comment()"
                       role="warning"
                       location="/X3D/Scene/Shape[31]/IndexedFaceSet/Coordinate">
      <svrl:text>&lt;Coordinate DEF='EmptyCoordinate'/&gt; contains no data in point array </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Color"/>
   <svrl:failed-assert test="(string-length($color) &gt; 1) or (@USE) or boolean(IS/connect[@nodeField='color'])"
                       role="warning"
                       location="/X3D/Scene/Shape[31]/IndexedFaceSet/Color">
      <svrl:text>&lt;Color DEF='EmptyColor'/&gt; contains no data in color array </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="@color or (@USE) or //ROUTE[@toNode=$DEF] or boolean(IS/connect[@nodeField='color']) or comment()"
                       role="warning"
                       location="/X3D/Scene/Shape[31]/IndexedFaceSet/Color">
      <svrl:text>&lt;Color DEF='EmptyColor'/&gt; contains no data in color array </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Normal"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:failed-assert test="@point or (@USE) or boolean(IS/connect[@nodeField='point'])"
                       role="warning"
                       location="/X3D/Scene/Shape[31]/IndexedFaceSet/TextureCoordinate">
      <svrl:text>&lt;TextureCoordinate DEF='EmptyTextureCoordinate'/&gt; contains no data in point array </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="Shape"/>
   <svrl:fired-rule context="IndexedFaceSet | IndexedLineSet"/>
   <svrl:successful-report test="$coordIndexMissing and (Coordinate/@point) and not(IS/connect[@nodeField='coordIndex']) and not(starts-with(local-name(),'IndexedTriangle'))"
                           role="error"
                           location="/X3D/Scene/Shape[32]/IndexedFaceSet">
      <svrl:text>&lt;IndexedFaceSet DEF='IfsSingletonChildren'/&gt; missing coordIndex array for contained Coordinate node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="$texCoordIndexMissing and (TextureCoordinate/@point) and not(IS/connect[@nodeField='texCoordIndex']) and $coordIndexMissing and not(contains(local-name(),'Triangle'))"
                           role="error"
                           location="/X3D/Scene/Shape[32]/IndexedFaceSet">
      <svrl:text>&lt;IndexedFaceSet DEF='IfsSingletonChildren'/&gt; missing texCoordIndex array for contained TextureCoordinate node </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="Coordinate and (string-length(Coordinate/@point) &gt; 0) and (string-length($coordIndex)=0)"
                           role="warning"
                           location="/X3D/Scene/Shape[32]/IndexedFaceSet">
      <svrl:text>&lt;IndexedFaceSet DEF='IfsSingletonChildren'/&gt; contains Coordinate node but has no coordIndex values </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="Color and (string-length(Color/@color) &gt; 0) and (string-length($colorIndex)=0) and (string-length($coordIndex)=0)"
                           role="warning"
                           location="/X3D/Scene/Shape[32]/IndexedFaceSet">
      <svrl:text>&lt;IndexedFaceSet DEF='IfsSingletonChildren'/&gt; contains Color node but has no colorIndex or coordIndex values </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="TextureCoordinate and (string-length(TextureCoordinate/@point) &gt; 0) and (string-length($texCoordIndex)=0) and (string-length($coordIndex)=0)"
                           role="warning"
                           location="/X3D/Scene/Shape[32]/IndexedFaceSet">
      <svrl:text>&lt;IndexedFaceSet DEF='IfsSingletonChildren'/&gt; contains TextureCoordinate node but has no texCoordIndex or coordIndex values </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Coordinate"/>
   <svrl:fired-rule context="Color"/>
   <svrl:fired-rule context="Normal"/>
   <svrl:fired-rule context="TextureCoordinate"/>
   <svrl:fired-rule context="GeoLOD"/>
   <svrl:failed-assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[@name='Geospatial'][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) &gt; 0))"
                       role="error"
                       location="/X3D/Scene/GeoLOD">
      <svrl:text>&lt;GeoLOD DEF=''/&gt; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='Geospatial' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="((@center='0 0 0') or (@center='0.0 0.0 0.0')) and not(@USE)"
                           role="warning"
                           location="/X3D/Scene/GeoLOD">
      <svrl:text>&lt;GeoLOD DEF=''/&gt; center='0 0 0', instead needs actual location value </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@child1Url)=0) and not(@USE)"
                           role="warning"
                           location="/X3D/Scene/GeoLOD">
      <svrl:text>&lt;GeoLOD DEF=''/&gt; has no child1Url </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@child2Url)=0) and not(@USE)"
                           role="warning"
                           location="/X3D/Scene/GeoLOD">
      <svrl:text>&lt;GeoLOD DEF=''/&gt; has no child2Url </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@child3Url)=0) and not(@USE)"
                           role="warning"
                           location="/X3D/Scene/GeoLOD">
      <svrl:text>&lt;GeoLOD DEF=''/&gt; has no child3Url </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@child4Url)=0) and not(@USE)"
                           role="warning"
                           location="/X3D/Scene/GeoLOD">
      <svrl:text>&lt;GeoLOD DEF=''/&gt; has no child4Url </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="*[(@containerField='children') or not(string-length(@containerField) &gt; 0)]"
                           role="error"
                           location="/X3D/Scene/GeoLOD">
      <svrl:text>&lt;GeoLOD DEF=''/&gt; child node needs to have containerField='rootNode' instead of containerField='children' </svrl:text>
   </svrl:successful-report>
   <svrl:fired-rule context="Shape"/>
   <svrl:failed-assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) &gt; 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])"
                       role="warning"
                       location="/X3D/Scene/GeoLOD/Shape">
      <svrl:text>&lt;Shape DEF='rootNodeContainerFieldIsCorrect'/&gt; element has no child node </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))"
                       role="warning"
                       location="/X3D/Scene/GeoLOD/Shape">
      <svrl:text>&lt;Shape DEF='rootNodeContainerFieldIsCorrect'/&gt; found without child Appearance or Color </svrl:text>
   </svrl:failed-assert>
   <svrl:failed-assert test="((@USE) and (string-length(@USE) &gt; 0)) or comment() or boolean(count(*)&gt;1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))"
                       role="warning"
                       location="/X3D/Scene/GeoLOD/Shape">
      <svrl:text>&lt;Shape DEF='rootNodeContainerFieldIsCorrect'/&gt; found without child geometry node </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="TextureProjector"/>
   <svrl:failed-assert test="(/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/Scene/TextureProjector">
      <svrl:text>&lt;TextureProjector DEF=''/&gt; requires X3D version='4.0' but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:fired-rule context="TextureProjectorParallel"/>
   <svrl:failed-assert test="(/X3D/@version='4.0')"
                       role="error"
                       location="/X3D/Scene/TextureProjectorParallel">
      <svrl:text>&lt;TextureProjectorParallel DEF='DistanceMismatchIllegalFieldOfView'/&gt; requires X3D version='4.0' but found version='3.0' </svrl:text>
   </svrl:failed-assert>
   <svrl:successful-report test="(number(@nearDistance) &gt; number(@farDistance))"
                           role="error"
                           location="/X3D/Scene/TextureProjectorParallel">
      <svrl:text>&lt;TextureProjectorParallel DEF='DistanceMismatchIllegalFieldOfView'/&gt; nearDistance='20' is greater than farDistance='.1' </svrl:text>
   </svrl:successful-report>
   <svrl:successful-report test="(string-length(@fieldOfView) &gt; 0) and ($embeddedWhiteSpaceCount!=3)"
                           role="error"
                           location="/X3D/Scene/TextureProjectorParallel">
      <svrl:text>&lt;TextureProjectorParallel DEF='DistanceMismatchIllegalFieldOfView'/&gt; fieldOfView='1 2 3 4 5' is not type SFVec4f (note related node TextureProjectorPerspective fieldOfView has different type) </svrl:text>
   </svrl:successful-report>
</svrl:schematron-output>

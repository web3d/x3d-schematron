<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 1995-2022 held by the author(s).  All rights reserved.
                          
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other materials provided with the
      distribution.
    * Neither the names of the Naval Postgraduate School (NPS)
      Modeling Virtual Environments and Simulation (MOVES) Institute
      https://www.nps.edu and https://MovesInstitute.nps.edu
      nor the names of its contributors may be used to endorse or
      promote products derived from this software without specific
      prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-->

<!--
    Document   : X3dSchematronValidityChecks.sch
    Created on : 19 October 2008
    Author     : Don Brutzman
    description: define rules for X3D schematron validation testing
    reference  : https://www.web3d.org/x3d/tools/schematron/X3dSchematron.html
    identifier : https://www.web3d.org/x3d/tools/schematron/X3dSchematronValidityChecks.sch

Rule TODOs (update needed):

ROUTE event typing
Component checks per X3D version number
X3D v3.3 nodes
Ensure DEF/USE only used by same type of node
Triangle and quad counting checks, including -1 sentinel
CAD, HAnim parent-child relationships
containerField checks
ROUTE field matching
ProtoInstance fieldValue matching, especially "quoted" MFString types
check for comment immediately beginning with - or including double -
check for TimeSensor unable to start
check for proper escape characters in url (this needs to be in X3D-Edit also)
    http://bugzilla.xj3d.org/show_bug.cgi?id=514
Anchor url='#ViewpointName' points to existing Viewpoint DEF="ViewpointName"
colorPerVertex counting checks
check NurbsSet only points to proper nodes
add rules for Savage Modeling Analysis Language (SMAL) templates
test MedicalInterchange profile

utilize document() to check referenced documents
- url links each point to something that exists
- ExternProtoDeclare url links have #, include and point to existing named ProtoDeclare
- Anchor url.x3d#ViewpointName points to url.x3d Viewpoint DEF="ViewpointName"
- check Inline IMPORT/EXPORT

Geospatial:
- ensure lat/long or UTM coordinates within bounds for given geoSystem

<!DOCTYPE schema PUBLIC "http://www.ascc.net/xml/schematron"
   "http://www.ascc.net/xml/schematron/schematron1-5.dtd" [
-->

<!DOCTYPE schema [
    <!-- convenience macros -->
    <!ENTITY NodeDEFname          "&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt;">
    <!ENTITY NamedNodeDEFname     "&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt;">
    <!ENTITY NamedNodeDEFUSEname  "&lt;<name/> DEF='<value-of select='@DEF'/>' USE='<value-of select='@USE'/>' name='<value-of select='@name'/>'/&gt;">
    <!ENTITY TextNodeDEFname      "&lt;<name/> DEF='<value-of select='@DEF'/>' string='<value-of select='@string'/>'/&gt;">
    <!ENTITY WorldInfoNodeDEFname "&lt;<name/> DEF='<value-of select='@DEF'/>' info='<value-of select='@info'/>'/&gt;">
]>
<!--
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.0//EN" "https://www.web3d.org/specifications/x3d-3.0.dtd">
<X3D profile='Core' version='3.0' xmlns:xsd='https://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='https://www.web3d.org/specifications/x3d-3.0.xsd'>

xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
       xsi:schemaLocation="http://www.ascc.net/xml/schematron
          http://www.ascc.net/xml/schematron/schematron1-5.xsd"

<schema xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance" xsi:schemaLocation="http://www.ascc.net/xml/schematron/schematron1-5.xsd">
-->
<schema xmlns="http://purl.oclc.org/dsdl/schematron">
  <title>X3D Graphics Validity Checks using Schematron</title>
  <!--<ns prefix="sch" uri="http://purl.oclc.org/dsdl/schematron"/>-->
      
  <!-- global variables -->
  <let name="verbose" value="false()"/>                        <!-- true() false() -->
  <let name="showCADAssemblyAncestorWarning" value="false()"/> <!-- true() false() -->

  <pattern>
    
    <!-- ========= abstract: DEF and USE tests ========== -->
    <rule id="DEFtests" abstract="true">
      <let name="DEF" value="normalize-space(@DEF)"/><!-- ensuring no illegal space characters are present -->
      <let name="USE" value="normalize-space(@USE)"/><!-- ensuring no illegal space characters are present -->
      <let name="USEparentProtoName"  value="ancestor::ProtoDeclare/@name"/>
      <let name="nodeName"     value="local-name()"/><!-- can fail in XSLT if duplicate DEF values encountered -->
      <let name="DEFnode"      value=           "//*[@DEF=$USE][1]"/> <!-- might have more than one match, due to erroneous X3D content -->
      <let name="DEFNodeName"  value="local-name(//*[@DEF=$USE][1])"/><!-- might have more than one match, due to erroneous X3D content -->
      <let name="DEFparentProtoNode"  value="//ProtoDeclare[ProtoBody/descendant::*[@DEF=$USE][1]]"/>
      <let name="DEFparentProtoName"  value="$DEFparentProtoNode/@name"/>
      <let name="isX3D3" value="starts-with(/X3D/@version,'3.')"/>
      <let name="isX3D4" value="starts-with(/X3D/@version,'4.')"/>
      <extends rule="classTest"/>
      <report test="(@USE) and (string-length(@USE) > 0) and *" role="error">&lt;<name/> USE='<value-of select="@USE"/>'/&gt; USE elements cannot have any child nodes </report>
      <!-- empty @DEF or only single @DEF defined -->
      <assert test="not($DEF) or (count(//*[@DEF=$DEF]) = 1)" role="error">&NodeDEFname; has duplicated DEF name appearing elsewhere in the scene </assert>
      <!-- no embedded space or "quotation marks" in @DEF or @USE    -->
      <assert test="not(contains($DEF,' '))" role="error">&NodeDEFname; has embedded space character(s) in DEF name </assert>
      <assert test="not(contains($DEF,'&quot;'))" role="error">&NodeDEFname; has embedded quotation mark(s) in DEF name </assert>
      <assert test="not(contains($USE,' '))" role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt;  has embedded space character(s) in USE name </assert>
      <assert test="not(contains($USE,'&quot;'))" role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt; has embedded quotation mark(s) in USE name </assert>
      <!-- avoid reserved words.  TODO where does this rule exist?  Not found in X3D Specification 4.4.3 DEF/USE semantics -->
      <assert test="(($DEF!='AS') and ($DEF!='component') and ($DEF!='DEF') and ($DEF!='EXPORT') and ($DEF!='FALSE') and ($DEF!='false') and ($DEF!='') and
                     ($DEF!='head') and ($DEF!='IMPORT') and ($DEF!='initializeOnly') and ($DEF!='inputOnly') and ($DEF!='outputOnly') and ($DEF!='inputOutput') and
                     ($DEF!='IS') and ($DEF!='meta') and ($DEF!='NULL') and ($DEF!='PROTO') and ($DEF!='ROUTE') and ($DEF!='Scene') and ($DEF!='TO') and
                     ($DEF!='TRUE') and ($DEF!='true') and ($DEF!='USE') and ($DEF!='X3D'))
                    or not(@DEF)" role="error">&NodeDEFname; has DEF name that illegally overrides a reserved word from the X3D Specification </assert>
      <!-- cannot have both DEF and USE attributes -->
      <report test="@DEF and @USE" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' USE='<value-of select='@USE'/>'/&gt; cannot contain both DEF and USE in single node </report>
      <!-- USE must follow @DEF definition -->
      <assert test="not($DEF) or (count(preceding::*[@DEF=$USE]) = 0)" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; found prior USE='<value-of select='@DEF'/>' node that precedes this DEF node </assert>
      <report test="(@USE) and (string-length($USE) > 0) and (count(//*[@DEF=$USE]) = 0)" role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt; USE node has no matching DEF node </report>
      <report test="(@USE) and (string-length($USE) > 0) and (count(//*[@DEF=$USE]) = 1) and (count(following::*[@DEF=$USE]) > 0)" role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt; found USE node that precedes matching DEF node, count(following::*[@DEF=$USE])=<value-of select='count(following::*[@DEF=$USE])'/> </report>
      <report test="(@USE) and (string-length($USE) > 0) and (count(//*[@DEF=$USE]) > 1) and (count(preceding::*[@DEF=$USE]) > 0)" role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt; found multiple matching DEF nodes that match USE node </report>
      <report test="(@USE) and (string-length($USE) > 0) and (ancestor::*[@DEF=$USE]) and (local-name(..)!='field') and (local-name(..)!='fieldValue')" role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt; To avoid recursive referencing, USE node cannot have matching DEF node as direct ancestor or parent, instead must be in different branches of directed acyclic graph </report>
      <!-- USE must not have contained children -->
      <assert test="not(@USE) or not(*)" role="error">&lt;<name/> USE='<value-of select='@USE'/>'&gt; &lt;<value-of select='local-name(*[1])'/>/&gt; &lt;/<name/>&gt; USE node must not contain any child nodes </assert>
      <!-- USE must not have DEF as a direct ancestor (i.e. DEF node cannot contain a USE copy of itself, except for Script fields) since recursion is not allowed in a directed acyclic graph (DAG) -->
      <assert test="not(@USE) or (local-name(../..)='Script' and local-name(..)='field') or (count(ancestor::*[@DEF=$USE]) = 0)" role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt; USE node cannot be contained child descendant of its DEF node </assert>
      <!-- DEF and USE must both be outside ProtoDeclare or in same ProtoDeclare scope -->
      <!-- TODO test for DEF/USE node match apparently not working..-->
      <report test="(@USE) and (not($nodeName=$DEFNodeName) and (string-length($nodeName) > 0) and (string-length($DEFNodeName) > 0))" role="error">&lt;<value-of select='$nodeName'/> USE='<value-of select='@USE'/>'/&gt; node type must match node type of original &lt;<value-of select='$DEFNodeName'/> DEF='<value-of select='//*[@DEF=$USE][1]/@DEF'/>'/&gt; </report>
      <report test="(string-length(@USE) > 0) and (count(//*[@DEF=$USE]) = 1) and not($USEparentProtoName=$DEFparentProtoName) and (($USEparentProtoName) or ($DEFparentProtoName))" role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt; DEF and USE must both be outside ProtoDeclare or within same ProtoDeclare scope ($USEparentProtoName=<value-of select='$USEparentProtoName'/>, $DEFparentProtoName=<value-of select='$DEFparentProtoName'/>) </report>
      <report test="(@DEF) and ancestor::StaticGroup" role="warning">&lt;<value-of select='$nodeName'/> DEF='<value-of select='@DEF'/>'/&gt; cannot ROUTE or USE this DEF node because it is found inside of ancestor &lt;StaticGroup DEF='<value-of select='ancestor::StaticGroup/@DEF'/>'/&gt; (since any child nodes may get refactored inside StaticGroup) </report>
      <report test="(@USE) and ancestor::StaticGroup" role="error">&lt;<value-of select='$nodeName'/> USE='<value-of select='@USE'/>'/&gt; cannot USE this node because it is found inside of ancestor &lt;StaticGroup DEF='<value-of select='ancestor::StaticGroup/@DEF'/>'/&gt; (since any child nodes may get refactored inside StaticGroup) </report>
      <report test="(@USE) and (count(//*[@DEF=$USE]) = 0) and (count(//*[lower-case(@DEF)=lower-case($USE)]) > 0)" role="error">&lt;<value-of select='$nodeName'/> USE='<value-of select='@USE'/>'/&gt; USE value has mismatched case with corresponding &lt;<value-of select='local-name(//*[lower-case(@DEF)=lower-case($USE)])'/> DEF='<value-of select='//*[lower-case(@DEF)=lower-case($USE)]/@DEF'/>'/&gt;, best practice is to avoid dependencies on case sensitivity of DEF/USE names </report>
      <!-- report if multiple nodes appear for singleton metadata field -->
      <report test="(count(*[starts-with(local-name(),'Metadata')][@containerField = 'metadata']) > 1)" role="error">&NodeDEFname; children include multiple Metadata* nodes with containerField='metadata' but only one is allowed </report>
      <!-- TODO since default attributes appear, unable to test that USE node has no other attributes appear (besides USE and containerField )
      <report test="(@USE) and (count(@*[not(local-name()='USE') and not(local-name()='containerField')][string-length(.) > 0]) > 0)" role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt; USE nodes must not contain any other attributes besides containerField </report> -->
  <!--<assert test="not(@USE) or not(@*[not(local-name()='USE') and not(local-name()='containerField')])" role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt; USE nodes must not contain any other attributes besides containerField </assert> -->     
      <!-- TODO test for legal characters, both from X3D and XML perspective, such as first character a number -->
      <!-- TODO test for DEF/USE from inside ProtoBody to outside ProtoBody -->
      
      <!-- *** start: fieldName capitalization checks generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="@*[(lower-case(local-name()) = 'autocalc') and not(local-name() = 'autoCalc')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is autoCalc </report>
      <report test="@*[(lower-case(local-name()) = 'bboxcenter') and not(local-name() = 'bboxCenter')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bboxCenter </report>
      <report test="@*[(lower-case(local-name()) = 'bboxsize') and not(local-name() = 'bboxSize')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bboxSize </report>
      <report test="@*[(lower-case(local-name()) = 'begincap') and not(local-name() = 'beginCap')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is beginCap </report>
      <report test="@*[(lower-case(local-name()) = 'bottomradius') and not(local-name() = 'bottomRadius')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bottomRadius </report>
      <report test="@*[(lower-case(local-name()) = 'category') and not(local-name() = 'category')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is category </report>
      <report test="@*[(lower-case(local-name()) = 'ccw') and not(local-name() = 'ccw')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is ccw </report>
      <report test="@*[(lower-case(local-name()) = 'child1url') and not(local-name() = 'child1Url')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is child1Url </report>
      <report test="@*[(lower-case(local-name()) = 'child2url') and not(local-name() = 'child2Url')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is child2Url </report>
      <report test="@*[(lower-case(local-name()) = 'child3url') and not(local-name() = 'child3Url')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is child3Url </report>
      <report test="@*[(lower-case(local-name()) = 'child4url') and not(local-name() = 'child4Url')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is child4Url </report>
      <report test="@*[(lower-case(local-name()) = 'closed') and not(local-name() = 'closed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is closed </report>
      <report test="@*[(lower-case(local-name()) = 'closuretype') and not(local-name() = 'closureType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is closureType </report>
      <report test="@*[(lower-case(local-name()) = 'colorkey') and not(local-name() = 'colorKey')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is colorKey </report>
      <report test="@*[(lower-case(local-name()) = 'colorindex') and not(local-name() = 'colorIndex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is colorIndex </report>
      <report test="@*[(lower-case(local-name()) = 'colorpervertex') and not(local-name() = 'colorPerVertex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is colorPerVertex </report>
      <report test="@*[(lower-case(local-name()) = 'convex') and not(local-name() = 'convex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is convex </report>
      <report test="@*[(lower-case(local-name()) = 'coordindex') and not(local-name() = 'coordIndex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is coordIndex </report>
      <report test="@*[(lower-case(local-name()) = 'country') and not(local-name() = 'country')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is country </report>
      <report test="@*[(lower-case(local-name()) = 'creaseangle') and not(local-name() = 'creaseAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is creaseAngle </report>
      <report test="@*[(lower-case(local-name()) = 'crosssection') and not(local-name() = 'crossSection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is crossSection </report>
      <report test="@*[(lower-case(local-name()) = 'directoutput') and not(local-name() = 'directOutput')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is directOutput </report>
      <report test="@*[(lower-case(local-name()) = 'domain') and not(local-name() = 'domain')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is domain </report>
      <report test="@*[(lower-case(local-name()) = 'duration') and not(local-name() = 'duration')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is duration </report>
      <report test="@*[(lower-case(local-name()) = 'endcap') and not(local-name() = 'endCap')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is endCap </report>
      <report test="@*[(lower-case(local-name()) = 'endangle') and not(local-name() = 'endAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is endAngle </report>
      <report test="@*[(lower-case(local-name()) = 'extra') and not(local-name() = 'extra')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is extra </report>
      <report test="@*[(lower-case(local-name()) = 'forcetransitions') and not(local-name() = 'forceTransitions')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is forceTransitions </report>
      <report test="@*[(lower-case(local-name()) = 'generatemipmaps') and not(local-name() = 'generateMipMaps')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is generateMipMaps </report>
      <report test="@*[(lower-case(local-name()) = 'geogridorigin') and not(local-name() = 'geoGridOrigin')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is geoGridOrigin </report>
      <report test="@*[(lower-case(local-name()) = 'geometrytype') and not(local-name() = 'geometryType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is geometryType </report>
      <report test="@*[(lower-case(local-name()) = 'geosystem') and not(local-name() = 'geoSystem')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is geoSystem </report>
      <report test="@*[(lower-case(local-name()) = 'height') and not(local-name() = 'height')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is height </report>
      <report test="@*[(lower-case(local-name()) = 'index') and not(local-name() = 'index')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is index </report>
      <report test="@*[(lower-case(local-name()) = 'initialdestination') and not(local-name() = 'initialDestination')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is initialDestination </report>
      <report test="@*[(lower-case(local-name()) = 'initialvalue') and not(local-name() = 'initialValue')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is initialValue </report>
      <report test="@*[(lower-case(local-name()) = 'innerradius') and not(local-name() = 'innerRadius')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is innerRadius </report>
      <report test="@*[(lower-case(local-name()) = 'internal') and not(local-name() = 'internal')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is internal </report>
      <report test="@*[(lower-case(local-name()) = 'intersectiontype') and not(local-name() = 'intersectionType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is intersectionType </report>
      <report test="@*[(lower-case(local-name()) = 'kind') and not(local-name() = 'kind')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is kind </report>
      <report test="@*[(lower-case(local-name()) = 'knot') and not(local-name() = 'knot')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is knot </report>
      <report test="@*[(lower-case(local-name()) = 'linesegments') and not(local-name() = 'lineSegments')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is lineSegments </report>
      <report test="@*[(lower-case(local-name()) = 'mustevaluate') and not(local-name() = 'mustEvaluate')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is mustEvaluate </report>
      <report test="@*[(lower-case(local-name()) = 'normalindex') and not(local-name() = 'normalIndex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is normalIndex </report>
      <report test="@*[(lower-case(local-name()) = 'normalpervertex') and not(local-name() = 'normalPerVertex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is normalPerVertex </report>
      <report test="@*[(lower-case(local-name()) = 'numcomponents') and not(local-name() = 'numComponents')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is numComponents </report>
      <report test="@*[(lower-case(local-name()) = 'order') and not(local-name() = 'order')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is order </report>
      <report test="@*[(lower-case(local-name()) = 'outerradius') and not(local-name() = 'outerRadius')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is outerRadius </report>
      <report test="@*[(lower-case(local-name()) = 'phasefunction') and not(local-name() = 'phaseFunction')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is phaseFunction </report>
      <report test="@*[(lower-case(local-name()) = 'radius') and not(local-name() = 'radius')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radius </report>
      <report test="@*[(lower-case(local-name()) = 'range') and not(local-name() = 'range')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is range </report>
      <report test="@*[(lower-case(local-name()) = 'repeatr') and not(local-name() = 'repeatR')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is repeatR </report>
      <report test="@*[(lower-case(local-name()) = 'repeats') and not(local-name() = 'repeatS')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is repeatS </report>
      <report test="@*[(lower-case(local-name()) = 'repeatt') and not(local-name() = 'repeatT')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is repeatT </report>
      <report test="@*[(lower-case(local-name()) = 'rooturl') and not(local-name() = 'rootUrl')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is rootUrl </report>
      <report test="@*[(lower-case(local-name()) = 'rotateyup') and not(local-name() = 'rotateYUp')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is rotateYUp </report>
      <report test="@*[(lower-case(local-name()) = 'rtpheaderexpected') and not(local-name() = 'rtpHeaderExpected')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is rtpHeaderExpected </report>
      <report test="@*[(lower-case(local-name()) = 'size') and not(local-name() = 'size')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is size </report>
      <report test="@*[(lower-case(local-name()) = 'sortorder') and not(local-name() = 'sortOrder')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is sortOrder </report>
      <report test="@*[(lower-case(local-name()) = 'spatialize') and not(local-name() = 'spatialize')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is spatialize </report>
      <report test="@*[(lower-case(local-name()) = 'specific') and not(local-name() = 'specific')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is specific </report>
      <report test="@*[(lower-case(local-name()) = 'speedfactor') and not(local-name() = 'speedFactor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is speedFactor </report>
      <report test="@*[(lower-case(local-name()) = 'spine') and not(local-name() = 'spine')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is spine </report>
      <report test="@*[(lower-case(local-name()) = 'startangle') and not(local-name() = 'startAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is startAngle </report>
      <report test="@*[(lower-case(local-name()) = 'subcategory') and not(local-name() = 'subcategory')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is subcategory </report>
      <report test="@*[(lower-case(local-name()) = 'texcoordindex') and not(local-name() = 'texCoordIndex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is texCoordIndex </report>
      <report test="@*[(lower-case(local-name()) = 'texcoordkey') and not(local-name() = 'texCoordKey')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is texCoordKey </report>
      <report test="@*[(lower-case(local-name()) = 'uclosed') and not(local-name() = 'uClosed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is uClosed </report>
      <report test="@*[(lower-case(local-name()) = 'udimension') and not(local-name() = 'uDimension')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is uDimension </report>
      <report test="@*[(lower-case(local-name()) = 'uknot') and not(local-name() = 'uKnot')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is uKnot </report>
      <report test="@*[(lower-case(local-name()) = 'uorder') and not(local-name() = 'uOrder')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is uOrder </report>
      <report test="@*[(lower-case(local-name()) = 'vclosed') and not(local-name() = 'vClosed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vClosed </report>
      <report test="@*[(lower-case(local-name()) = 'vdimension') and not(local-name() = 'vDimension')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vDimension </report>
      <report test="@*[(lower-case(local-name()) = 'vknot') and not(local-name() = 'vKnot')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vKnot </report>
      <report test="@*[(lower-case(local-name()) = 'vorder') and not(local-name() = 'vOrder')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vOrder </report>
      <report test="@*[(lower-case(local-name()) = 'xdimension') and not(local-name() = 'xDimension')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is xDimension </report>
      <report test="@*[(lower-case(local-name()) = 'xspacing') and not(local-name() = 'xSpacing')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is xSpacing </report>
      <report test="@*[(lower-case(local-name()) = 'zdimension') and not(local-name() = 'zDimension')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is zDimension </report>
      <report test="@*[(lower-case(local-name()) = 'zspacing') and not(local-name() = 'zSpacing')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is zSpacing </report>
      <report test="@*[(lower-case(local-name()) = 'activelayer') and not(local-name() = 'activeLayer')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is activeLayer </report>
      <report test="@*[(lower-case(local-name()) = 'address') and not(local-name() = 'address')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is address </report>
      <report test="@*[(lower-case(local-name()) = 'align') and not(local-name() = 'align')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is align </report>
      <report test="@*[(lower-case(local-name()) = 'alpha') and not(local-name() = 'alpha')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is alpha </report>
      <report test="@*[(lower-case(local-name()) = 'alphamode') and not(local-name() = 'alphaMode')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is alphaMode </report>
      <report test="@*[(lower-case(local-name()) = 'ambientintensity') and not(local-name() = 'ambientIntensity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is ambientIntensity </report>
      <report test="@*[(lower-case(local-name()) = 'anchorpoint') and not(local-name() = 'anchorPoint')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is anchorPoint </report>
      <report test="@*[(lower-case(local-name()) = 'angle') and not(local-name() = 'angle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is angle </report>
      <report test="@*[(lower-case(local-name()) = 'angulardampingfactor') and not(local-name() = 'angularDampingFactor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is angularDampingFactor </report>
      <report test="@*[(lower-case(local-name()) = 'angularvelocity') and not(local-name() = 'angularVelocity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is angularVelocity </report>
      <report test="@*[(lower-case(local-name()) = 'anisotropicdegree') and not(local-name() = 'anisotropicDegree')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is anisotropicDegree </report>
      <report test="@*[(lower-case(local-name()) = 'antennalocation') and not(local-name() = 'antennaLocation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is antennaLocation </report>
      <report test="@*[(lower-case(local-name()) = 'applicationid') and not(local-name() = 'applicationID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is applicationID </report>
      <report test="@*[(lower-case(local-name()) = 'applied') and not(local-name() = 'applied')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is applied </report>
      <report test="@*[(lower-case(local-name()) = 'appliedparameters') and not(local-name() = 'appliedParameters')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is appliedParameters </report>
      <report test="@*[(lower-case(local-name()) = 'antennapatterntype') and not(local-name() = 'antennaPatternType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is antennaPatternType </report>
      <report test="@*[(lower-case(local-name()) = 'antennapatternlength') and not(local-name() = 'antennaPatternLength')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is antennaPatternLength </report>
      <report test="@*[(lower-case(local-name()) = 'articulationparameterarray') and not(local-name() = 'articulationParameterArray')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is articulationParameterArray </report>
      <report test="@*[(lower-case(local-name()) = 'articulationparameterchangeindicatorarray') and not(local-name() = 'articulationParameterChangeIndicatorArray')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is articulationParameterChangeIndicatorArray </report>
      <report test="@*[(lower-case(local-name()) = 'articulationparametercount') and not(local-name() = 'articulationParameterCount')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is articulationParameterCount </report>
      <report test="@*[(lower-case(local-name()) = 'articulationparameterdesignatorarray') and not(local-name() = 'articulationParameterDesignatorArray')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is articulationParameterDesignatorArray </report>
      <report test="@*[(lower-case(local-name()) = 'articulationparameteridpartattachedtoarray') and not(local-name() = 'articulationParameterIdPartAttachedToArray')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is articulationParameterIdPartAttachedToArray </report>
      <report test="@*[(lower-case(local-name()) = 'articulationparametertypearray') and not(local-name() = 'articulationParameterTypeArray')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is articulationParameterTypeArray </report>
      <report test="@*[(lower-case(local-name()) = 'attenuation') and not(local-name() = 'attenuation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is attenuation </report>
      <report test="@*[(lower-case(local-name()) = 'autodamp') and not(local-name() = 'autoDamp')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is autoDamp </report>
      <report test="@*[(lower-case(local-name()) = 'autodisable') and not(local-name() = 'autoDisable')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is autoDisable </report>
      <report test="@*[(lower-case(local-name()) = 'autooffset') and not(local-name() = 'autoOffset')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is autoOffset </report>
      <report test="@*[(lower-case(local-name()) = 'avatarsize') and not(local-name() = 'avatarSize')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is avatarSize </report>
      <report test="@*[(lower-case(local-name()) = 'axis') and not(local-name() = 'axis')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis </report>
      <report test="@*[(lower-case(local-name()) = 'axis1') and not(local-name() = 'axis1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis1 </report>
      <report test="@*[(lower-case(local-name()) = 'axis1angle') and not(local-name() = 'axis1Angle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis1Angle </report>
      <report test="@*[(lower-case(local-name()) = 'axis1torque') and not(local-name() = 'axis1Torque')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis1Torque </report>
      <report test="@*[(lower-case(local-name()) = 'axis2') and not(local-name() = 'axis2')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis2 </report>
      <report test="@*[(lower-case(local-name()) = 'axis2angle') and not(local-name() = 'axis2Angle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis2Angle </report>
      <report test="@*[(lower-case(local-name()) = 'axis2torque') and not(local-name() = 'axis2Torque')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis2Torque </report>
      <report test="@*[(lower-case(local-name()) = 'axis3angle') and not(local-name() = 'axis3Angle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis3Angle </report>
      <report test="@*[(lower-case(local-name()) = 'axis3torque') and not(local-name() = 'axis3Torque')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axis3Torque </report>
      <report test="@*[(lower-case(local-name()) = 'axisofrotation') and not(local-name() = 'axisOfRotation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axisOfRotation </report>
      <report test="@*[(lower-case(local-name()) = 'axisrotation') and not(local-name() = 'axisRotation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is axisRotation </report>
      <report test="@*[(lower-case(local-name()) = 'backambientintensity') and not(local-name() = 'backAmbientIntensity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backAmbientIntensity </report>
      <report test="@*[(lower-case(local-name()) = 'backdiffusecolor') and not(local-name() = 'backDiffuseColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backDiffuseColor </report>
      <report test="@*[(lower-case(local-name()) = 'backemissivecolor') and not(local-name() = 'backEmissiveColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backEmissiveColor </report>
      <report test="@*[(lower-case(local-name()) = 'backshininess') and not(local-name() = 'backShininess')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backShininess </report>
      <report test="@*[(lower-case(local-name()) = 'backspecularcolor') and not(local-name() = 'backSpecularColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backSpecularColor </report>
      <report test="@*[(lower-case(local-name()) = 'backtexture') and not(local-name() = 'backTexture')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backTexture </report>
      <report test="@*[(lower-case(local-name()) = 'backtransparency') and not(local-name() = 'backTransparency')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backTransparency </report>
      <report test="@*[(lower-case(local-name()) = 'backurl') and not(local-name() = 'backUrl')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is backUrl </report>
      <report test="@*[(lower-case(local-name()) = 'beamwidth') and not(local-name() = 'beamWidth')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is beamWidth </report>
      <report test="@*[(lower-case(local-name()) = 'bottomtexture') and not(local-name() = 'bottomTexture')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bottomTexture </report>
      <report test="@*[(lower-case(local-name()) = 'bottomurl') and not(local-name() = 'bottomUrl')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bottomUrl </report>
      <report test="@*[(lower-case(local-name()) = 'bounce') and not(local-name() = 'bounce')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bounce </report>
      <report test="@*[(lower-case(local-name()) = 'boundaryopacity') and not(local-name() = 'boundaryOpacity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is boundaryOpacity </report>
      <report test="@*[(lower-case(local-name()) = 'bordercolor') and not(local-name() = 'borderColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is borderColor </report>
      <report test="@*[(lower-case(local-name()) = 'borderwidth') and not(local-name() = 'borderWidth')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is borderWidth </report>
      <report test="@*[(lower-case(local-name()) = 'boundarymodes') and not(local-name() = 'boundaryModeS')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is boundaryModeS </report>
      <report test="@*[(lower-case(local-name()) = 'boundarymodet') and not(local-name() = 'boundaryModeT')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is boundaryModeT </report>
      <report test="@*[(lower-case(local-name()) = 'boundarymoder') and not(local-name() = 'boundaryModeR')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is boundaryModeR </report>
      <report test="@*[(lower-case(local-name()) = 'center') and not(local-name() = 'center')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is center </report>
      <report test="@*[(lower-case(local-name()) = 'castshadow') and not(local-name() = 'castShadow')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is castShadow </report>
      <report test="@*[(lower-case(local-name()) = 'centerofmass') and not(local-name() = 'centerOfMass')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is centerOfMass </report>
      <report test="@*[(lower-case(local-name()) = 'centerofrotation') and not(local-name() = 'centerOfRotation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is centerOfRotation </report>
      <report test="@*[(lower-case(local-name()) = 'clipboundary') and not(local-name() = 'clipBoundary')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is clipBoundary </report>
      <report test="@*[(lower-case(local-name()) = 'channels') and not(local-name() = 'channels')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is channels </report>
      <report test="@*[(lower-case(local-name()) = 'channelsenabled') and not(local-name() = 'channelsEnabled')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is channelsEnabled </report>
      <report test="@*[(lower-case(local-name()) = 'collisiontype') and not(local-name() = 'collisionType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is collisionType </report>
      <report test="@*[(lower-case(local-name()) = 'color') and not(local-name() = 'color')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is color </report>
      <report test="@*[(lower-case(local-name()) = 'colorsteps') and not(local-name() = 'colorSteps')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is colorSteps </report>
      <report test="@*[(lower-case(local-name()) = 'contactnormal') and not(local-name() = 'contactNormal')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is contactNormal </report>
      <report test="@*[(lower-case(local-name()) = 'contourstepsize') and not(local-name() = 'contourStepSize')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is contourStepSize </report>
      <report test="@*[(lower-case(local-name()) = 'controlpoint') and not(local-name() = 'controlPoint')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is controlPoint </report>
      <report test="@*[(lower-case(local-name()) = 'constantforcemix') and not(local-name() = 'constantForceMix')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is constantForceMix </report>
      <report test="@*[(lower-case(local-name()) = 'contactsurfacethickness') and not(local-name() = 'contactSurfaceThickness')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is contactSurfaceThickness </report>
      <report test="@*[(lower-case(local-name()) = 'coolcolor') and not(local-name() = 'coolColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is coolColor </report>
      <report test="@*[(lower-case(local-name()) = 'createparticles') and not(local-name() = 'createParticles')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is createParticles </report>
      <report test="@*[(lower-case(local-name()) = 'cryptosystem') and not(local-name() = 'cryptoSystem')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is cryptoSystem </report>
      <report test="@*[(lower-case(local-name()) = 'cryptokeyid') and not(local-name() = 'cryptoKeyID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is cryptoKeyID </report>
      <report test="@*[(lower-case(local-name()) = 'cutoffangle') and not(local-name() = 'cutOffAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is cutOffAngle </report>
      <report test="@*[(lower-case(local-name()) = 'cycleinterval') and not(local-name() = 'cycleInterval')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is cycleInterval </report>
      <report test="@*[(lower-case(local-name()) = 'data') and not(local-name() = 'data')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is data </report>
      <report test="@*[(lower-case(local-name()) = 'datalength') and not(local-name() = 'dataLength')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is dataLength </report>
      <report test="@*[(lower-case(local-name()) = 'deadreckoning') and not(local-name() = 'deadReckoning')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is deadReckoning </report>
      <report test="@*[(lower-case(local-name()) = 'deletionallowed') and not(local-name() = 'deletionAllowed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is deletionAllowed </report>
      <report test="@*[(lower-case(local-name()) = 'depth') and not(local-name() = 'depth')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is depth </report>
      <report test="@*[(lower-case(local-name()) = 'description') and not(local-name() = 'description')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is description </report>
      <report test="@*[(lower-case(local-name()) = 'desiredangularvelocity1') and not(local-name() = 'desiredAngularVelocity1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is desiredAngularVelocity1 </report>
      <report test="@*[(lower-case(local-name()) = 'desiredangularvelocity2') and not(local-name() = 'desiredAngularVelocity2')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is desiredAngularVelocity2 </report>
      <report test="@*[(lower-case(local-name()) = 'detonationlocation') and not(local-name() = 'detonationLocation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is detonationLocation </report>
      <report test="@*[(lower-case(local-name()) = 'detonationrelativelocation') and not(local-name() = 'detonationRelativeLocation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is detonationRelativeLocation </report>
      <report test="@*[(lower-case(local-name()) = 'detonationresult') and not(local-name() = 'detonationResult')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is detonationResult </report>
      <report test="@*[(lower-case(local-name()) = 'diffusecolor') and not(local-name() = 'diffuseColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is diffuseColor </report>
      <report test="@*[(lower-case(local-name()) = 'dimensions') and not(local-name() = 'dimensions')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is dimensions </report>
      <report test="@*[(lower-case(local-name()) = 'direction') and not(local-name() = 'direction')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is direction </report>
      <report test="@*[(lower-case(local-name()) = 'disableangularspeed') and not(local-name() = 'disableAngularSpeed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is disableAngularSpeed </report>
      <report test="@*[(lower-case(local-name()) = 'disablelinearspeed') and not(local-name() = 'disableLinearSpeed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is disableLinearSpeed </report>
      <report test="@*[(lower-case(local-name()) = 'disabletime') and not(local-name() = 'disableTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is disableTime </report>
      <report test="@*[(lower-case(local-name()) = 'diskangle') and not(local-name() = 'diskAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is diskAngle </report>
      <report test="@*[(lower-case(local-name()) = 'displacements') and not(local-name() = 'displacements')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is displacements </report>
      <report test="@*[(lower-case(local-name()) = 'bboxdisplay') and not(local-name() = 'bboxDisplay')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is bboxDisplay </report>
      <report test="@*[(lower-case(local-name()) = 'displayed') and not(local-name() = 'displayed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is displayed </report>
      <report test="@*[(lower-case(local-name()) = 'easeineaseout') and not(local-name() = 'easeInEaseOut')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is easeInEaseOut </report>
      <report test="@*[(lower-case(local-name()) = 'edgecolor') and not(local-name() = 'edgeColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is edgeColor </report>
      <report test="@*[(lower-case(local-name()) = 'emissivecolor') and not(local-name() = 'emissiveColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is emissiveColor </report>
      <report test="@*[(lower-case(local-name()) = 'enabled') and not(local-name() = 'enabled')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is enabled </report>
      <report test="@*[(lower-case(local-name()) = 'enabledaxes') and not(local-name() = 'enabledAxes')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is enabledAxes </report>
      <report test="@*[(lower-case(local-name()) = 'encodingscheme') and not(local-name() = 'encodingScheme')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is encodingScheme </report>
      <report test="@*[(lower-case(local-name()) = 'endframe') and not(local-name() = 'endFrame')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is endFrame </report>
      <report test="@*[(lower-case(local-name()) = 'entityid') and not(local-name() = 'entityID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entityID </report>
      <report test="@*[(lower-case(local-name()) = 'entitykind') and not(local-name() = 'entityKind')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entityKind </report>
      <report test="@*[(lower-case(local-name()) = 'entitydomain') and not(local-name() = 'entityDomain')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entityDomain </report>
      <report test="@*[(lower-case(local-name()) = 'entitycountry') and not(local-name() = 'entityCountry')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entityCountry </report>
      <report test="@*[(lower-case(local-name()) = 'entitycategory') and not(local-name() = 'entityCategory')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entityCategory </report>
      <report test="@*[(lower-case(local-name()) = 'entitysubcategory') and not(local-name() = 'entitySubcategory')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entitySubcategory </report>
      <report test="@*[(lower-case(local-name()) = 'entityspecific') and not(local-name() = 'entitySpecific')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entitySpecific </report>
      <report test="@*[(lower-case(local-name()) = 'entityextra') and not(local-name() = 'entityExtra')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is entityExtra </report>
      <report test="@*[(lower-case(local-name()) = 'errorcorrection') and not(local-name() = 'errorCorrection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is errorCorrection </report>
      <report test="@*[(lower-case(local-name()) = 'eventapplicationid') and not(local-name() = 'eventApplicationID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is eventApplicationID </report>
      <report test="@*[(lower-case(local-name()) = 'evententityid') and not(local-name() = 'eventEntityID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is eventEntityID </report>
      <report test="@*[(lower-case(local-name()) = 'eventnumber') and not(local-name() = 'eventNumber')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is eventNumber </report>
      <report test="@*[(lower-case(local-name()) = 'eventsiteid') and not(local-name() = 'eventSiteID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is eventSiteID </report>
      <report test="@*[(lower-case(local-name()) = 'family') and not(local-name() = 'family')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is family </report>
      <report test="@*[(lower-case(local-name()) = 'fancount') and not(local-name() = 'fanCount')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fanCount </report>
      <report test="@*[(lower-case(local-name()) = 'fardistance') and not(local-name() = 'farDistance')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is farDistance </report>
      <report test="@*[(lower-case(local-name()) = 'fieldofview') and not(local-name() = 'fieldOfView')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fieldOfView </report>
      <report test="@*[(lower-case(local-name()) = 'filled') and not(local-name() = 'filled')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is filled </report>
      <report test="@*[(lower-case(local-name()) = 'finiterotationaxis') and not(local-name() = 'finiteRotationAxis')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is finiteRotationAxis </report>
      <report test="@*[(lower-case(local-name()) = 'fired1') and not(local-name() = 'fired1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fired1 </report>
      <report test="@*[(lower-case(local-name()) = 'fired2') and not(local-name() = 'fired2')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fired2 </report>
      <report test="@*[(lower-case(local-name()) = 'firemissionindex') and not(local-name() = 'fireMissionIndex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fireMissionIndex </report>
      <report test="@*[(lower-case(local-name()) = 'firingrange') and not(local-name() = 'firingRange')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is firingRange </report>
      <report test="@*[(lower-case(local-name()) = 'firingrate') and not(local-name() = 'firingRate')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is firingRate </report>
      <report test="@*[(lower-case(local-name()) = 'fixed') and not(local-name() = 'fixed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fixed </report>
      <report test="@*[(lower-case(local-name()) = 'fogtype') and not(local-name() = 'fogType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fogType </report>
      <report test="@*[(lower-case(local-name()) = 'force') and not(local-name() = 'force')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is force </report>
      <report test="@*[(lower-case(local-name()) = 'forceid') and not(local-name() = 'forceID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is forceID </report>
      <report test="@*[(lower-case(local-name()) = 'forceoutput') and not(local-name() = 'forceOutput')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is forceOutput </report>
      <report test="@*[(lower-case(local-name()) = 'forces') and not(local-name() = 'forces')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is forces </report>
      <report test="@*[(lower-case(local-name()) = 'framecount') and not(local-name() = 'frameCount')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frameCount </report>
      <report test="@*[(lower-case(local-name()) = 'frameduration') and not(local-name() = 'frameDuration')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frameDuration </report>
      <report test="@*[(lower-case(local-name()) = 'frameincrement') and not(local-name() = 'frameIncrement')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frameIncrement </report>
      <report test="@*[(lower-case(local-name()) = 'frameindex') and not(local-name() = 'frameIndex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frameIndex </report>
      <report test="@*[(lower-case(local-name()) = 'frequency') and not(local-name() = 'frequency')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frequency </report>
      <report test="@*[(lower-case(local-name()) = 'frictioncoefficients') and not(local-name() = 'frictionCoefficients')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frictionCoefficients </report>
      <report test="@*[(lower-case(local-name()) = 'frictiondirection') and not(local-name() = 'frictionDirection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frictionDirection </report>
      <report test="@*[(lower-case(local-name()) = 'fronttexture') and not(local-name() = 'frontTexture')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frontTexture </report>
      <report test="@*[(lower-case(local-name()) = 'fronturl') and not(local-name() = 'frontUrl')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is frontUrl </report>
      <report test="@*[(lower-case(local-name()) = 'function') and not(local-name() = 'function')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is function </report>
      <report test="@*[(lower-case(local-name()) = 'fuse') and not(local-name() = 'fuse')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is fuse </report>
      <report test="@*[(lower-case(local-name()) = 'geocenter') and not(local-name() = 'geoCenter')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is geoCenter </report>
      <report test="@*[(lower-case(local-name()) = 'geocoords') and not(local-name() = 'geoCoords')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is geoCoords </report>
      <report test="@*[(lower-case(local-name()) = 'global') and not(local-name() = 'global')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is global </report>
      <report test="@*[(lower-case(local-name()) = 'gradientthreshold') and not(local-name() = 'gradientThreshold')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is gradientThreshold </report>
      <report test="@*[(lower-case(local-name()) = 'gravity') and not(local-name() = 'gravity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is gravity </report>
      <report test="@*[(lower-case(local-name()) = 'groundangle') and not(local-name() = 'groundAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is groundAngle </report>
      <report test="@*[(lower-case(local-name()) = 'groundcolor') and not(local-name() = 'groundColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is groundColor </report>
      <report test="@*[(lower-case(local-name()) = 'gustiness') and not(local-name() = 'gustiness')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is gustiness </report>
      <report test="@*[(lower-case(local-name()) = 'hatchcolor') and not(local-name() = 'hatchColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is hatchColor </report>
      <report test="@*[(lower-case(local-name()) = 'hatched') and not(local-name() = 'hatched')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is hatched </report>
      <report test="@*[(lower-case(local-name()) = 'hatchstyle') and not(local-name() = 'hatchStyle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is hatchStyle </report>
      <report test="@*[(lower-case(local-name()) = 'headlight') and not(local-name() = 'headlight')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is headlight </report>
      <report test="@*[(lower-case(local-name()) = 'horizontal') and not(local-name() = 'horizontal')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is horizontal </report>
      <report test="@*[(lower-case(local-name()) = 'image') and not(local-name() = 'image')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is image </report>
      <report test="@*[(lower-case(local-name()) = 'inertia') and not(local-name() = 'inertia')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is inertia </report>
      <report test="@*[(lower-case(local-name()) = 'info') and not(local-name() = 'info')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is info </report>
      <report test="@*[(lower-case(local-name()) = 'inputsource') and not(local-name() = 'inputSource')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is inputSource </report>
      <report test="@*[(lower-case(local-name()) = 'integerkey') and not(local-name() = 'integerKey')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is integerKey </report>
      <report test="@*[(lower-case(local-name()) = 'intensity') and not(local-name() = 'intensity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is intensity </report>
      <report test="@*[(lower-case(local-name()) = 'intensitythreshold') and not(local-name() = 'intensityThreshold')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is intensityThreshold </report>
      <report test="@*[(lower-case(local-name()) = 'iterations') and not(local-name() = 'iterations')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is iterations </report>
      <report test="@*[(lower-case(local-name()) = 'jointbindingpositions') and not(local-name() = 'jointBindingPositions')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is jointBindingPositions </report>
      <report test="@*[(lower-case(local-name()) = 'jointbindingrotations') and not(local-name() = 'jointBindingRotations')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is jointBindingRotations </report>
      <report test="@*[(lower-case(local-name()) = 'jointbindingscales') and not(local-name() = 'jointBindingScales')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is jointBindingScales </report>
      <report test="@*[(lower-case(local-name()) = 'joints') and not(local-name() = 'joints')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is joints </report>
      <report test="@*[(lower-case(local-name()) = 'justify') and not(local-name() = 'justify')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is justify </report>
      <report test="@*[(lower-case(local-name()) = 'key') and not(local-name() = 'key')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is key </report>
      <report test="@*[(lower-case(local-name()) = 'keyvelocity') and not(local-name() = 'keyVelocity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is keyVelocity </report>
      <report test="@*[(lower-case(local-name()) = 'jump') and not(local-name() = 'jump')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is jump </report>
      <report test="@*[(lower-case(local-name()) = 'keyvalue') and not(local-name() = 'keyValue')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is keyValue </report>
      <report test="@*[(lower-case(local-name()) = 'lefttexture') and not(local-name() = 'leftTexture')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is leftTexture </report>
      <report test="@*[(lower-case(local-name()) = 'lefttoright') and not(local-name() = 'leftToRight')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is leftToRight </report>
      <report test="@*[(lower-case(local-name()) = 'lefturl') and not(local-name() = 'leftUrl')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is leftUrl </report>
      <report test="@*[(lower-case(local-name()) = 'length') and not(local-name() = 'length')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is length </report>
      <report test="@*[(lower-case(local-name()) = 'lengthofmodulationparameters') and not(local-name() = 'lengthOfModulationParameters')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is lengthOfModulationParameters </report>
      <report test="@*[(lower-case(local-name()) = 'lifetimevariation') and not(local-name() = 'lifetimeVariation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is lifetimeVariation </report>
      <report test="@*[(lower-case(local-name()) = 'lighting') and not(local-name() = 'lighting')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is lighting </report>
      <report test="@*[(lower-case(local-name()) = 'limitorientation') and not(local-name() = 'limitOrientation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is limitOrientation </report>
      <report test="@*[(lower-case(local-name()) = 'linearacceleration') and not(local-name() = 'linearAcceleration')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is linearAcceleration </report>
      <report test="@*[(lower-case(local-name()) = 'lineardampingfactor') and not(local-name() = 'linearDampingFactor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is linearDampingFactor </report>
      <report test="@*[(lower-case(local-name()) = 'linearvelocity') and not(local-name() = 'linearVelocity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is linearVelocity </report>
      <report test="@*[(lower-case(local-name()) = 'linetype') and not(local-name() = 'linetype')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is linetype </report>
      <report test="@*[(lower-case(local-name()) = 'linewidthscalefactor') and not(local-name() = 'linewidthScaleFactor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is linewidthScaleFactor </report>
      <report test="@*[(lower-case(local-name()) = 'llimit') and not(local-name() = 'llimit')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is llimit </report>
      <report test="@*[(lower-case(local-name()) = 'loa') and not(local-name() = 'loa')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is loa </report>
      <report test="@*[(lower-case(local-name()) = 'load') and not(local-name() = 'load')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is load </report>
      <report test="@*[(lower-case(local-name()) = 'location') and not(local-name() = 'location')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is location </report>
      <report test="@*[(lower-case(local-name()) = 'loop') and not(local-name() = 'loop')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is loop </report>
      <report test="@*[(lower-case(local-name()) = 'marking') and not(local-name() = 'marking')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is marking </report>
      <report test="@*[(lower-case(local-name()) = 'mass') and not(local-name() = 'mass')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is mass </report>
      <report test="@*[(lower-case(local-name()) = 'magnificationfilter') and not(local-name() = 'magnificationFilter')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is magnificationFilter </report>
      <report test="@*[(lower-case(local-name()) = 'matchcriterion') and not(local-name() = 'matchCriterion')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is matchCriterion </report>
      <report test="@*[(lower-case(local-name()) = 'matrix') and not(local-name() = 'matrix')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is matrix </report>
      <report test="@*[(lower-case(local-name()) = 'maxangle') and not(local-name() = 'maxAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxAngle </report>
      <report test="@*[(lower-case(local-name()) = 'maxangle1') and not(local-name() = 'maxAngle1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxAngle1 </report>
      <report test="@*[(lower-case(local-name()) = 'maxback') and not(local-name() = 'maxBack')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxBack </report>
      <report test="@*[(lower-case(local-name()) = 'maxcorrectionspeed') and not(local-name() = 'maxCorrectionSpeed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxCorrectionSpeed </report>
      <report test="@*[(lower-case(local-name()) = 'maxextent') and not(local-name() = 'maxExtent')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxExtent </report>
      <report test="@*[(lower-case(local-name()) = 'maxfront') and not(local-name() = 'maxFront')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxFront </report>
      <report test="@*[(lower-case(local-name()) = 'maxparticles') and not(local-name() = 'maxParticles')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxParticles </report>
      <report test="@*[(lower-case(local-name()) = 'maxposition') and not(local-name() = 'maxPosition')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxPosition </report>
      <report test="@*[(lower-case(local-name()) = 'maxseparation') and not(local-name() = 'maxSeparation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxSeparation </report>
      <report test="@*[(lower-case(local-name()) = 'maxtorque1') and not(local-name() = 'maxTorque1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxTorque1 </report>
      <report test="@*[(lower-case(local-name()) = 'maxtorque2') and not(local-name() = 'maxTorque2')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is maxTorque2 </report>
      <report test="@*[(lower-case(local-name()) = 'minangle') and not(local-name() = 'minAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minAngle </report>
      <report test="@*[(lower-case(local-name()) = 'minangle1') and not(local-name() = 'minAngle1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minAngle1 </report>
      <report test="@*[(lower-case(local-name()) = 'minback') and not(local-name() = 'minBack')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minBack </report>
      <report test="@*[(lower-case(local-name()) = 'minbouncespeed') and not(local-name() = 'minBounceSpeed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minBounceSpeed </report>
      <report test="@*[(lower-case(local-name()) = 'minfront') and not(local-name() = 'minFront')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minFront </report>
      <report test="@*[(lower-case(local-name()) = 'minificationfilter') and not(local-name() = 'minificationFilter')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minificationFilter </report>
      <report test="@*[(lower-case(local-name()) = 'minposition') and not(local-name() = 'minPosition')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minPosition </report>
      <report test="@*[(lower-case(local-name()) = 'minseparation') and not(local-name() = 'minSeparation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is minSeparation </report>
      <report test="@*[(lower-case(local-name()) = 'mode') and not(local-name() = 'mode')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is mode </report>
      <report test="@*[(lower-case(local-name()) = 'modulationtypespreadspectrum') and not(local-name() = 'modulationTypeSpreadSpectrum')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is modulationTypeSpreadSpectrum </report>
      <report test="@*[(lower-case(local-name()) = 'modulationtypemajor') and not(local-name() = 'modulationTypeMajor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is modulationTypeMajor </report>
      <report test="@*[(lower-case(local-name()) = 'modulationtypedetail') and not(local-name() = 'modulationTypeDetail')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is modulationTypeDetail </report>
      <report test="@*[(lower-case(local-name()) = 'modulationtypesystem') and not(local-name() = 'modulationTypeSystem')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is modulationTypeSystem </report>
      <report test="@*[(lower-case(local-name()) = 'momentsofinertia') and not(local-name() = 'momentsOfInertia')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is momentsOfInertia </report>
      <report test="@*[(lower-case(local-name()) = 'motor1axis') and not(local-name() = 'motor1Axis')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is motor1Axis </report>
      <report test="@*[(lower-case(local-name()) = 'motor2axis') and not(local-name() = 'motor2Axis')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is motor2Axis </report>
      <report test="@*[(lower-case(local-name()) = 'motor3axis') and not(local-name() = 'motor3Axis')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is motor3Axis </report>
      <report test="@*[(lower-case(local-name()) = 'multicastrelayhost') and not(local-name() = 'multicastRelayHost')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is multicastRelayHost </report>
      <report test="@*[(lower-case(local-name()) = 'multicastrelayport') and not(local-name() = 'multicastRelayPort')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is multicastRelayPort </report>
      <report test="@*[(lower-case(local-name()) = 'munitionendpoint') and not(local-name() = 'munitionEndPoint')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is munitionEndPoint </report>
      <report test="@*[(lower-case(local-name()) = 'munitionstartpoint') and not(local-name() = 'munitionStartPoint')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is munitionStartPoint </report>
      <report test="@*[(lower-case(local-name()) = 'munitionapplicationid') and not(local-name() = 'munitionApplicationID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is munitionApplicationID </report>
      <report test="@*[(lower-case(local-name()) = 'munitionentityid') and not(local-name() = 'munitionEntityID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is munitionEntityID </report>
      <report test="@*[(lower-case(local-name()) = 'munitionsiteid') and not(local-name() = 'munitionSiteID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is munitionSiteID </report>
      <report test="@*[(lower-case(local-name()) = 'munitionquantity') and not(local-name() = 'munitionQuantity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is munitionQuantity </report>
      <report test="@*[(lower-case(local-name()) = 'name') and not(local-name() = 'name')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is name </report>
      <report test="@*[(lower-case(local-name()) = 'neardistance') and not(local-name() = 'nearDistance')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is nearDistance </report>
      <report test="@*[(lower-case(local-name()) = 'networkmode') and not(local-name() = 'networkMode')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is networkMode </report>
      <report test="@*[(lower-case(local-name()) = 'normalizevelocity') and not(local-name() = 'normalizeVelocity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is normalizeVelocity </report>
      <report test="@*[(lower-case(local-name()) = 'objecttype') and not(local-name() = 'objectType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is objectType </report>
      <report test="@*[(lower-case(local-name()) = 'offset') and not(local-name() = 'offset')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is offset </report>
      <report test="@*[(lower-case(local-name()) = 'offsetunits') and not(local-name() = 'offsetUnits')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is offsetUnits </report>
      <report test="@*[(lower-case(local-name()) = 'on') and not(local-name() = 'on')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is on </report>
      <report test="@*[(lower-case(local-name()) = 'opacityfactor') and not(local-name() = 'opacityFactor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is opacityFactor </report>
      <report test="@*[(lower-case(local-name()) = 'orientation') and not(local-name() = 'orientation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is orientation </report>
      <report test="@*[(lower-case(local-name()) = 'orthogonalcolor') and not(local-name() = 'orthogonalColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is orthogonalColor </report>
      <report test="@*[(lower-case(local-name()) = 'parallelcolor') and not(local-name() = 'parallelColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is parallelColor </report>
      <report test="@*[(lower-case(local-name()) = 'parameter') and not(local-name() = 'parameter')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is parameter </report>
      <report test="@*[(lower-case(local-name()) = 'particlelifetime') and not(local-name() = 'particleLifetime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is particleLifetime </report>
      <report test="@*[(lower-case(local-name()) = 'particlesize') and not(local-name() = 'particleSize')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is particleSize </report>
      <report test="@*[(lower-case(local-name()) = 'pausetime') and not(local-name() = 'pauseTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is pauseTime </report>
      <report test="@*[(lower-case(local-name()) = 'pickable') and not(local-name() = 'pickable')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is pickable </report>
      <report test="@*[(lower-case(local-name()) = 'pitch') and not(local-name() = 'pitch')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is pitch </report>
      <report test="@*[(lower-case(local-name()) = 'plane') and not(local-name() = 'plane')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is plane </report>
      <report test="@*[(lower-case(local-name()) = 'point') and not(local-name() = 'point')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is point </report>
      <report test="@*[(lower-case(local-name()) = 'pointsize') and not(local-name() = 'pointSize')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is pointSize </report>
      <report test="@*[(lower-case(local-name()) = 'pointsizescalefactor') and not(local-name() = 'pointSizeScaleFactor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is pointSizeScaleFactor </report>
      <report test="@*[(lower-case(local-name()) = 'pointsizeminvalue') and not(local-name() = 'pointSizeMinValue')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is pointSizeMinValue </report>
      <report test="@*[(lower-case(local-name()) = 'pointsizemaxvalue') and not(local-name() = 'pointSizeMaxValue')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is pointSizeMaxValue </report>
      <report test="@*[(lower-case(local-name()) = 'port') and not(local-name() = 'port')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is port </report>
      <report test="@*[(lower-case(local-name()) = 'position') and not(local-name() = 'position')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is position </report>
      <report test="@*[(lower-case(local-name()) = 'power') and not(local-name() = 'power')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is power </report>
      <report test="@*[(lower-case(local-name()) = 'preferaccuracy') and not(local-name() = 'preferAccuracy')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is preferAccuracy </report>
      <report test="@*[(lower-case(local-name()) = 'priority') and not(local-name() = 'priority')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is priority </report>
      <report test="@*[(lower-case(local-name()) = 'radioid') and not(local-name() = 'radioID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radioID </report>
      <report test="@*[(lower-case(local-name()) = 'radioentitytypekind') and not(local-name() = 'radioEntityTypeKind')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radioEntityTypeKind </report>
      <report test="@*[(lower-case(local-name()) = 'radioentitytypedomain') and not(local-name() = 'radioEntityTypeDomain')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radioEntityTypeDomain </report>
      <report test="@*[(lower-case(local-name()) = 'radioentitytypecountry') and not(local-name() = 'radioEntityTypeCountry')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radioEntityTypeCountry </report>
      <report test="@*[(lower-case(local-name()) = 'radioentitytypecategory') and not(local-name() = 'radioEntityTypeCategory')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radioEntityTypeCategory </report>
      <report test="@*[(lower-case(local-name()) = 'radioentitytypenomenclature') and not(local-name() = 'radioEntityTypeNomenclature')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radioEntityTypeNomenclature </report>
      <report test="@*[(lower-case(local-name()) = 'radioentitytypenomenclatureversion') and not(local-name() = 'radioEntityTypeNomenclatureVersion')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is radioEntityTypeNomenclatureVersion </report>
      <report test="@*[(lower-case(local-name()) = 'readinterval') and not(local-name() = 'readInterval')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is readInterval </report>
      <report test="@*[(lower-case(local-name()) = 'receivedpower') and not(local-name() = 'receivedPower')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is receivedPower </report>
      <report test="@*[(lower-case(local-name()) = 'receiverstate') and not(local-name() = 'receiverState')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is receiverState </report>
      <report test="@*[(lower-case(local-name()) = 'reference') and not(local-name() = 'reference')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is reference </report>
      <report test="@*[(lower-case(local-name()) = 'refresh') and not(local-name() = 'refresh')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is refresh </report>
      <report test="@*[(lower-case(local-name()) = 'relativeantennalocation') and not(local-name() = 'relativeAntennaLocation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is relativeAntennaLocation </report>
      <report test="@*[(lower-case(local-name()) = 'retainedopacity') and not(local-name() = 'retainedOpacity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is retainedOpacity </report>
      <report test="@*[(lower-case(local-name()) = 'retainuseroffsets') and not(local-name() = 'retainUserOffsets')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is retainUserOffsets </report>
      <report test="@*[(lower-case(local-name()) = 'resumetime') and not(local-name() = 'resumeTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is resumeTime </report>
      <report test="@*[(lower-case(local-name()) = 'righttexture') and not(local-name() = 'rightTexture')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is rightTexture </report>
      <report test="@*[(lower-case(local-name()) = 'righturl') and not(local-name() = 'rightUrl')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is rightUrl </report>
      <report test="@*[(lower-case(local-name()) = 'rotation') and not(local-name() = 'rotation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is rotation </report>
      <report test="@*[(lower-case(local-name()) = 'samplerate') and not(local-name() = 'sampleRate')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is sampleRate </report>
      <report test="@*[(lower-case(local-name()) = 'samples') and not(local-name() = 'samples')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is samples </report>
      <report test="@*[(lower-case(local-name()) = 'scale') and not(local-name() = 'scale')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is scale </report>
      <report test="@*[(lower-case(local-name()) = 'scalemode') and not(local-name() = 'scaleMode')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is scaleMode </report>
      <report test="@*[(lower-case(local-name()) = 'scaleorientation') and not(local-name() = 'scaleOrientation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is scaleOrientation </report>
      <report test="@*[(lower-case(local-name()) = 'segmentenabled') and not(local-name() = 'segmentEnabled')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is segmentEnabled </report>
      <report test="@*[(lower-case(local-name()) = 'separatebackcolor') and not(local-name() = 'separateBackColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is separateBackColor </report>
      <report test="@*[(lower-case(local-name()) = 'shininess') and not(local-name() = 'shininess')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is shininess </report>
      <report test="@*[(lower-case(local-name()) = 'shadowintensity') and not(local-name() = 'shadowIntensity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is shadowIntensity </report>
      <report test="@*[(lower-case(local-name()) = 'shadows') and not(local-name() = 'shadows')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is shadows </report>
      <report test="@*[(lower-case(local-name()) = 'side') and not(local-name() = 'side')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is side </report>
      <report test="@*[(lower-case(local-name()) = 'silhouetteboundaryopacity') and not(local-name() = 'silhouetteBoundaryOpacity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is silhouetteBoundaryOpacity </report>
      <report test="@*[(lower-case(local-name()) = 'silhouetteretainedopacity') and not(local-name() = 'silhouetteRetainedOpacity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is silhouetteRetainedOpacity </report>
      <report test="@*[(lower-case(local-name()) = 'silhouettesharpness') and not(local-name() = 'silhouetteSharpness')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is silhouetteSharpness </report>
      <report test="@*[(lower-case(local-name()) = 'siteid') and not(local-name() = 'siteID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is siteID </report>
      <report test="@*[(lower-case(local-name()) = 'sizeunits') and not(local-name() = 'sizeUnits')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is sizeUnits </report>
      <report test="@*[(lower-case(local-name()) = 'skeletalconfiguration') and not(local-name() = 'skeletalConfiguration')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is skeletalConfiguration </report>
      <report test="@*[(lower-case(local-name()) = 'skincoordindex') and not(local-name() = 'skinCoordIndex')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is skinCoordIndex </report>
      <report test="@*[(lower-case(local-name()) = 'skincoordweight') and not(local-name() = 'skinCoordWeight')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is skinCoordWeight </report>
      <report test="@*[(lower-case(local-name()) = 'skycolor') and not(local-name() = 'skyColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is skyColor </report>
      <report test="@*[(lower-case(local-name()) = 'skyangle') and not(local-name() = 'skyAngle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is skyAngle </report>
      <report test="@*[(lower-case(local-name()) = 'sliderforce') and not(local-name() = 'sliderForce')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is sliderForce </report>
      <report test="@*[(lower-case(local-name()) = 'slipcoefficients') and not(local-name() = 'slipCoefficients')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is slipCoefficients </report>
      <report test="@*[(lower-case(local-name()) = 'slipfactors') and not(local-name() = 'slipFactors')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is slipFactors </report>
      <report test="@*[(lower-case(local-name()) = 'softnessconstantforcemix') and not(local-name() = 'softnessConstantForceMix')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is softnessConstantForceMix </report>
      <report test="@*[(lower-case(local-name()) = 'softnesserrorcorrection') and not(local-name() = 'softnessErrorCorrection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is softnessErrorCorrection </report>
      <report test="@*[(lower-case(local-name()) = 'solid') and not(local-name() = 'solid')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is solid </report>
      <report test="@*[(lower-case(local-name()) = 'source') and not(local-name() = 'source')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is source </report>
      <report test="@*[(lower-case(local-name()) = 'spacing') and not(local-name() = 'spacing')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is spacing </report>
      <report test="@*[(lower-case(local-name()) = 'specularcolor') and not(local-name() = 'specularColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is specularColor </report>
      <report test="@*[(lower-case(local-name()) = 'speed') and not(local-name() = 'speed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is speed </report>
      <report test="@*[(lower-case(local-name()) = 'startframe') and not(local-name() = 'startFrame')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is startFrame </report>
      <report test="@*[(lower-case(local-name()) = 'starttime') and not(local-name() = 'startTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is startTime </report>
      <report test="@*[(lower-case(local-name()) = 'stiffness') and not(local-name() = 'stiffness')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stiffness </report>
      <report test="@*[(lower-case(local-name()) = 'stopbounce') and not(local-name() = 'stopBounce')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stopBounce </report>
      <report test="@*[(lower-case(local-name()) = 'stoperrorcorrection') and not(local-name() = 'stopErrorCorrection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stopErrorCorrection </report>
      <report test="@*[(lower-case(local-name()) = 'stop1constantforcemix') and not(local-name() = 'stop1ConstantForceMix')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stop1ConstantForceMix </report>
      <report test="@*[(lower-case(local-name()) = 'stop1bounce') and not(local-name() = 'stop1Bounce')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stop1Bounce </report>
      <report test="@*[(lower-case(local-name()) = 'stop2bounce') and not(local-name() = 'stop2Bounce')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stop2Bounce </report>
      <report test="@*[(lower-case(local-name()) = 'stop3bounce') and not(local-name() = 'stop3Bounce')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stop3Bounce </report>
      <report test="@*[(lower-case(local-name()) = 'stop1errorcorrection') and not(local-name() = 'stop1ErrorCorrection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stop1ErrorCorrection </report>
      <report test="@*[(lower-case(local-name()) = 'stop2errorcorrection') and not(local-name() = 'stop2ErrorCorrection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stop2ErrorCorrection </report>
      <report test="@*[(lower-case(local-name()) = 'stop3errorcorrection') and not(local-name() = 'stop3ErrorCorrection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stop3ErrorCorrection </report>
      <report test="@*[(lower-case(local-name()) = 'stoptime') and not(local-name() = 'stopTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stopTime </report>
      <report test="@*[(lower-case(local-name()) = 'string') and not(local-name() = 'string')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is string </report>
      <report test="@*[(lower-case(local-name()) = 'stripcount') and not(local-name() = 'stripCount')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is stripCount </report>
      <report test="@*[(lower-case(local-name()) = 'style') and not(local-name() = 'style')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is style </report>
      <report test="@*[(lower-case(local-name()) = 'summary') and not(local-name() = 'summary')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is summary </report>
      <report test="@*[(lower-case(local-name()) = 'surfacearea') and not(local-name() = 'surfaceArea')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is surfaceArea </report>
      <report test="@*[(lower-case(local-name()) = 'surfacespeed') and not(local-name() = 'surfaceSpeed')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is surfaceSpeed </report>
      <report test="@*[(lower-case(local-name()) = 'surfacetolerance') and not(local-name() = 'surfaceTolerance')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is surfaceTolerance </report>
      <report test="@*[(lower-case(local-name()) = 'surfacevalues') and not(local-name() = 'surfaceValues')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is surfaceValues </report>
      <report test="@*[(lower-case(local-name()) = 'suspensionerrorcorrection') and not(local-name() = 'suspensionErrorCorrection')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is suspensionErrorCorrection </report>
      <report test="@*[(lower-case(local-name()) = 'suspensionforce') and not(local-name() = 'suspensionForce')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is suspensionForce </report>
      <report test="@*[(lower-case(local-name()) = 'tau') and not(local-name() = 'tau')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is tau </report>
      <report test="@*[(lower-case(local-name()) = 'tdltype') and not(local-name() = 'tdlType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is tdlType </report>
      <report test="@*[(lower-case(local-name()) = 'tessellation') and not(local-name() = 'tessellation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is tessellation </report>
      <report test="@*[(lower-case(local-name()) = 'tessellationscale') and not(local-name() = 'tessellationScale')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is tessellationScale </report>
      <report test="@*[(lower-case(local-name()) = 'texturecompression') and not(local-name() = 'textureCompression')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is textureCompression </report>
      <report test="@*[(lower-case(local-name()) = 'texturepriority') and not(local-name() = 'texturePriority')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is texturePriority </report>
      <report test="@*[(lower-case(local-name()) = 'timeout') and not(local-name() = 'timeOut')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is timeOut </report>
      <report test="@*[(lower-case(local-name()) = 'title') and not(local-name() = 'title')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is title </report>
      <report test="@*[(lower-case(local-name()) = 'toggle') and not(local-name() = 'toggle')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is toggle </report>
      <report test="@*[(lower-case(local-name()) = 'tolerance') and not(local-name() = 'tolerance')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is tolerance </report>
      <report test="@*[(lower-case(local-name()) = 'toptexture') and not(local-name() = 'topTexture')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is topTexture </report>
      <report test="@*[(lower-case(local-name()) = 'toptobottom') and not(local-name() = 'topToBottom')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is topToBottom </report>
      <report test="@*[(lower-case(local-name()) = 'topurl') and not(local-name() = 'topUrl')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is topUrl </report>
      <report test="@*[(lower-case(local-name()) = 'torques') and not(local-name() = 'torques')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is torques </report>
      <report test="@*[(lower-case(local-name()) = 'transitiontime') and not(local-name() = 'transitionTime')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transitionTime </report>
      <report test="@*[(lower-case(local-name()) = 'transitiontype') and not(local-name() = 'transitionType')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transitionType </report>
      <report test="@*[(lower-case(local-name()) = 'translation') and not(local-name() = 'translation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is translation </report>
      <report test="@*[(lower-case(local-name()) = 'transmitfrequencybandwidth') and not(local-name() = 'transmitFrequencyBandwidth')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transmitFrequencyBandwidth </report>
      <report test="@*[(lower-case(local-name()) = 'transmitstate') and not(local-name() = 'transmitState')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transmitState </report>
      <report test="@*[(lower-case(local-name()) = 'transmitterapplicationid') and not(local-name() = 'transmitterApplicationID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transmitterApplicationID </report>
      <report test="@*[(lower-case(local-name()) = 'transmitterentityid') and not(local-name() = 'transmitterEntityID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transmitterEntityID </report>
      <report test="@*[(lower-case(local-name()) = 'transmitterradioid') and not(local-name() = 'transmitterRadioID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transmitterRadioID </report>
      <report test="@*[(lower-case(local-name()) = 'transmittersiteid') and not(local-name() = 'transmitterSiteID')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transmitterSiteID </report>
      <report test="@*[(lower-case(local-name()) = 'transparency') and not(local-name() = 'transparency')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is transparency </report>
      <report test="@*[(lower-case(local-name()) = 'turbulence') and not(local-name() = 'turbulence')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is turbulence </report>
      <report test="@*[(lower-case(local-name()) = 'type') and not(local-name() = 'type')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is type </report>
      <report test="@*[(lower-case(local-name()) = 'ulimit') and not(local-name() = 'ulimit')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is ulimit </report>
      <report test="@*[(lower-case(local-name()) = 'update') and not(local-name() = 'update')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is update </report>
      <report test="@*[(lower-case(local-name()) = 'url') and not(local-name() = 'url')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is url </report>
      <report test="@*[(lower-case(local-name()) = 'usefiniterotation') and not(local-name() = 'useFiniteRotation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is useFiniteRotation </report>
      <report test="@*[(lower-case(local-name()) = 'usegeometry') and not(local-name() = 'useGeometry')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is useGeometry </report>
      <report test="@*[(lower-case(local-name()) = 'useglobalgravity') and not(local-name() = 'useGlobalGravity')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is useGlobalGravity </report>
      <report test="@*[(lower-case(local-name()) = 'utessellation') and not(local-name() = 'uTessellation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is uTessellation </report>
      <report test="@*[(lower-case(local-name()) = 'variation') and not(local-name() = 'variation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is variation </report>
      <report test="@*[(lower-case(local-name()) = 'value') and not(local-name() = 'value')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is value </report>
      <report test="@*[(lower-case(local-name()) = 'values') and not(local-name() = 'values')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is values </report>
      <report test="@*[(lower-case(local-name()) = 'version') and not(local-name() = 'version')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is version </report>
      <report test="@*[(lower-case(local-name()) = 'vector') and not(local-name() = 'vector')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vector </report>
      <report test="@*[(lower-case(local-name()) = 'vertexcount') and not(local-name() = 'vertexCount')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vertexCount </report>
      <report test="@*[(lower-case(local-name()) = 'vertices') and not(local-name() = 'vertices')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vertices </report>
      <report test="@*[(lower-case(local-name()) = 'viewall') and not(local-name() = 'viewAll')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is viewAll </report>
      <report test="@*[(lower-case(local-name()) = 'visibilitylimit') and not(local-name() = 'visibilityLimit')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is visibilityLimit </report>
      <report test="@*[(lower-case(local-name()) = 'visibilityrange') and not(local-name() = 'visibilityRange')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is visibilityRange </report>
      <report test="@*[(lower-case(local-name()) = 'visible') and not(local-name() = 'visible')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is visible </report>
      <report test="@*[(lower-case(local-name()) = 'vtessellation') and not(local-name() = 'vTessellation')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is vTessellation </report>
      <report test="@*[(lower-case(local-name()) = 'warhead') and not(local-name() = 'warhead')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is warhead </report>
      <report test="@*[(lower-case(local-name()) = 'warmcolor') and not(local-name() = 'warmColor')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is warmColor </report>
      <report test="@*[(lower-case(local-name()) = 'weight') and not(local-name() = 'weight')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is weight </report>
      <report test="@*[(lower-case(local-name()) = 'weightconstant1') and not(local-name() = 'weightConstant1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is weightConstant1 </report>
      <report test="@*[(lower-case(local-name()) = 'weightconstant2') and not(local-name() = 'weightConstant2')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is weightConstant2 </report>
      <report test="@*[(lower-case(local-name()) = 'weightfunction1') and not(local-name() = 'weightFunction1')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is weightFunction1 </report>
      <report test="@*[(lower-case(local-name()) = 'weightfunction2') and not(local-name() = 'weightFunction2')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is weightFunction2 </report>
      <report test="@*[(lower-case(local-name()) = 'whichchoice') and not(local-name() = 'whichChoice')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is whichChoice </report>
      <report test="@*[(lower-case(local-name()) = 'whichgeometry') and not(local-name() = 'whichGeometry')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is whichGeometry </report>
      <report test="@*[(lower-case(local-name()) = 'writeinterval') and not(local-name() = 'writeInterval')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is writeInterval </report>
      <report test="@*[(lower-case(local-name()) = 'yscale') and not(local-name() = 'yScale')]" role="error">&NodeDEFname; <value-of select="local-name()"/> fieldName capitalization-case mismatch, correct CamelCase naming is yScale </report>
      <!-- *** finish: fieldName capitalization checks generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->

    </rule>

    <!-- ========= abstract: class ========== -->
    <rule id="classTest" abstract="true">
      <assert test="not(contains(@class,',')) and not(contains(@class,';'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' class='<value-of select="@class"/>' cannot contain commas or semicolons, instead separate class names using space characters </assert>
      <assert test="not(contains(@class,'/')) and not(contains(@class,'\')) and not(contains(@class,'\\')) and not(contains(@class,'*')) and not(contains(@class,'!')) and not(contains(@class,'@')) and not(contains(@class,'#')) and not(contains(@class,'$')) and not(contains(@class,'%')) and not(contains(@class,'&amp;'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' class='<value-of select="@class"/>' has type NMTOKENS and cannot contain illegal characters </assert>
    </rule>

    <!-- ========= abstract: X3Dversion3.3Deprecated ========== -->
    <rule id="X3Dversion3.3Deprecated" abstract="true">
      <report test="(/X3D/@version='3.3')"                                                   role="warning">&NodeDEFname; is deprecated (optional) for X3D version='<value-of select='/X3D/@version'/>' and legal/ignorable in lower X3D versions. </report>
      <report test="(/X3D/@version='3.0') or (/X3D/@version='3.1') or (/X3D/@version='3.2')" role="warning">&NodeDEFname; is legal/ignorable for X3D version='<value-of select='/X3D/@version'/>' and deprecated (optional) in X3D version='3.3' </report>
    </rule>

    <!-- ========= abstract: X3Dversion4.0 ========== -->
    <rule id="X3Dversion4.0" abstract="true">
      <assert test="(/X3D/@version='4.0')" role="error">&NodeDEFname; requires X3D version='4.0' but found version='<value-of select='/X3D/@version'/>' </assert>
    </rule>
    <!-- TODO ensure all v3.3 nodes are covered -->

    <!-- ========= abstract: X3Dversion3.3 ========== -->
    <rule id="X3Dversion3.3" abstract="true">
      <assert test="(/X3D/@version='3.3') or (/X3D/@version='4.0')" role="error">&NodeDEFname; requires X3D version='3.3' or greater, but found version='<value-of select='/X3D/@version'/>' </assert>
    </rule>

    <!-- ========= abstract: X3Dversion3.2 ========== -->
    <rule id="X3Dversion3.2" abstract="true">
      <assert test="(/X3D/@version='3.2') or (/X3D/@version='3.3') or (/X3D/@version='4.0')" role="error">&NodeDEFname; requires X3D version='3.2' or greater, but found version='<value-of select='/X3D/@version'/>' </assert>
    </rule>

    <!-- ========= abstract: X3Dversion3.1 ========== -->
    <rule id="X3Dversion3.1" abstract="true">
      <assert test="(/X3D/@version='3.1') or (/X3D/@version='3.2') or (/X3D/@version='3.3') or (/X3D/@version='4.0')" role="error">&NodeDEFname; requires X3D version='3.1' or greater, but found version='<value-of select='/X3D/@version'/>' </assert>
    </rule>
    
    <!-- X3D version='3.0' is minimum validatable value -->
    
    <!-- ========= abstract: noDEF ========== -->
    <rule id="noDEF" abstract="true">
      <!-- Not an X3D node, no fields, thus no attributes -->
      <assert test="not(@DEF)" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; element is not allowed to have a DEF attribute </assert>
      <assert test="not(@USE)" role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt; element is not allowed to have a USE attribute </assert>
    </rule>

    <!-- ========= abstract: NoChildNode ========== -->
    <rule id="NoChildNode" abstract="true">
      <assert test="not(*) or (IS and (count(*) = 1)) or (*[starts-with(name(),'Metadata')] and (count(*) = 1)) or (IS and *[starts-with(name(),'Metadata')] and (count(*) = 2)) or (ProtoInstance and (count(*) = 1)) or ((local-name='GeoPositionInterpolator') and *[not(starts-with(name(),'Metadata')) and not(local-name='GeoOrigin')])" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; element has illegal child node (only single Metadata* node is allowed) </assert>
      <!-- TODO test contained metadata has proper containerField -->
    </rule>

    <!-- ========= abstract: NoChildNode ========== -->
    <rule id="NamedNoChildNode" abstract="true">
      <assert test="not(*) or (IS and (count(*) = 1)) or (*[starts-with(name(),'Metadata')] and (count(*) = 1)) or (IS and *[starts-with(name(),'Metadata')] and (count(*) = 2)) or (ProtoInstance and (count(*) = 1)) or ((local-name='GeoPositionInterpolator') and *[not(starts-with(name(),'Metadata')) and not(local-name='GeoOrigin')])" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; element has illegal child node (only single Metadata* node is allowed) </assert>
      <!-- TODO test contained metadata has proper containerField -->
    </rule>

    <!-- ========= abstract: NotX3dChildNode ========== -->
    <rule id="NotX3dChildNode" abstract="true">
      <report test="parent::Scene or parent::Anchor or parent::Billboard or parent::Collision or parent::Group or parent::StaticGroup or parent::LOD or parent::Switch or parent::Transform or parent::EspduTransform " role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; element has illegal parent node (<value-of select='local-name(..)'/>) </report>
    </rule>

    <!-- ========= abstract: NamedNeedsChildNode ========== -->
    <rule id="NamedNeedsChildNode" abstract="true">
      <!-- this warning can be silenced by contained comment -->
      <assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) > 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; element has no child node </assert>
    </rule>

    <!-- ========= abstract: NeedsChildNode ========== -->
    <rule id="NeedsChildNode" abstract="true">
      <!-- this warning can be silenced by contained comment -->
      <assert test="*[not(local-name()='ExternProtoDeclare') and not(local-name()='ProtoDeclare') and not(local-name()='ROUTE')] or (string-length(@USE) > 0) or (local-name(..)='LOD') or (local-name(..)='Switch') or comment() or ((local-name()='Group') and *[(local-name()='ExternProtoDeclare') or (local-name()='ProtoDeclare') or (local-name()='ROUTE')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; element has no child node </assert>
    </rule>

    <!-- ========= abstract: Metadata ========== -->
    <rule id="Metadata" abstract="true">
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="false()"/>
      <extends rule="DEFtests"/>
      <!-- <extends rule="requiredName"/> relaxed in X3D4 since some metadata vocabularies avoid required names -->
      <!-- Confirm that metadata node has containerField='value' if parent is MetadataSet, otherwise containerField='metadata' -->
      <assert test="(@containerField='metadata') or (                                 @containerField='value') or not(@containerField) or (string-length(@containerField) = 0) " role="error">&NamedNodeDEFname; containerField='<value-of select='@containerField'/>' but must be containerField='metadata' (default), or else containerField='value' when parent node is MetadataSet </assert>
      <report test="   (parent::MetadataSet) and not((@containerField='metadata') or (@containerField='value') or not(@containerField) or (string-length(@containerField) = 0))" role="error">&NamedNodeDEFname; containerField='<value-of select='@containerField'/>' can only have containerField='metadata' or containerField='value' when parent node is MetadataSet </report>
      <report test="$isX3D3 and not(parent::MetadataSet) and (@containerField='value')" role="error">&NamedNodeDEFUSEname; containerField='<value-of         select='@containerField'/>' is only allowed when parent node is MetadataSet </report>
      <report test="$isX3D4 and not(parent::MetadataSet) and (@containerField='value')" role="error">&NamedNodeDEFUSEname; default containerField='<value-of select='@containerField'/>' is only allowed when parent node is MetadataSet, need to explicitly define containerField='metadata' in X3D4 models </report>
      <report test="starts-with(normalize-space(@reference),'&quot;') or ends-with(normalize-space(@reference),'&quot;')" role="error">&NamedNodeDEFUSEname; reference='<value-of select='@reference'/>' has type SFString and is &quot;not quoted&quot; </report>
      <report test="(parent::GeoMetadata or parent::HAnimHumanoid) and ((@containerField = 'value') or ((string-length(@containerField) = 0) and starts-with(/X3D/@version, '4')))" role="warning"><value-of select='local-name(..)'/>/&NamedNodeDEFUSEname; contains containerField='<value-of select='@containerField '/>' which instead needs to be containerField='metadata' </report>
      <!-- TODO consider additional checks for reference field -->
    </rule>

    <!-- ========= abstract: boundingBoxTests ========== -->
    <rule id="boundingBoxTests" abstract="true">
      <let name="bboxSize"          value="normalize-space(translate(@bboxSize, ',',' '))"/>
      <let name="bboxCenter"        value="normalize-space(translate(@bboxCenter,',',' '))"/>
      <let name="bboxSizeCount"     value="string-length($bboxSize)    - string-length(translate($bboxSize,  ' ','')) + 1"/>
      <let name="bboxCenterCount"   value="string-length($bboxCenter)  - string-length(translate($bboxCenter,' ','')) + 1"/>
      <let name="bboxSizeResidue"   value="translate($bboxSize,        '+-0123456789Ee., ','')"/>
      <let name="bboxCenterResidue" value="translate($bboxCenter,      '+-0123456789Ee., ','')"/>
      <assert test="not(@bboxSize)   or (string-length($bboxSize)   = 0) or ($bboxSizeCount   = 0) or ($bboxSizeCount   = 3)"  role="error">&NodeDEFname; has illegal number of values (<value-of select='$bboxSizeCount'/>) in bboxSize field </assert>
      <assert test="not(@bboxCenter) or (string-length($bboxCenter) = 0) or ($bboxCenterCount = 0) or ($bboxCenterCount = 3)"  role="error">&NodeDEFname; has illegal number of values (<value-of select='$bboxCenterCount'/>) in bboxCenter field </assert>
      <assert test="string-length($bboxSizeResidue)   = 0" role="error">&NodeDEFname; has illegal character <value-of select='$bboxSizeResidue'/> in bboxSize field </assert>
      <assert test="string-length($bboxCenterResidue) = 0" role="error">&NodeDEFname; has illegal character <value-of select='$bboxCenterResidue'/> in bboxCenter field </assert>
      <assert test="($bboxSize = '-1 -1 -1') or ($bboxSize = '-1. -1. -1.') or ($bboxSize = '-1.0 -1.0 -1.0') or ($bboxSize = '-1E0 -1E0 -1E0') or ($bboxSize = '-1.0E0 -1.0E0 -1.0E0') or not(contains($bboxSize,'-')) or contains($bboxSize,'E-')" role="error">&NodeDEFname; bboxSize='<value-of select='@bboxSize'/>' must not include negative values unless using sentinel value '-1 -1 -1' (which indicates that no bounding box hint provided, X3D player can compute value)</assert>
    </rule>

    <!-- ========= abstract: sizeTests ========== -->
    <rule id="sizeTests" abstract="true">
      <!-- derived from boundingBoxTests -->
      <let name="size"          value="normalize-space(translate(@size, ',',' '))"/>
      <let name="sizeCount"     value="string-length($size)    - string-length(translate($size,  ' ','')) + 1"/>
      <let name="sizeResidue"   value="translate($size,        '+-0123456789Ee., ','')"/>
      <assert test="not(@size)   or (string-length($size)   = 0) or ($sizeCount   = 0) or ($sizeCount   = 3)"  role="error">&NodeDEFname; has illegal number of values (<value-of select='$sizeCount'/>) in size field </assert>
      <assert test="string-length($sizeResidue)   = 0" role="error">&NodeDEFname; has illegal character <value-of select='$sizeResidue'/> in size field </assert>
      <report test="contains($size,'-') and not(contains($size,'E-') or contains($size,'e-'))" role="error">&NodeDEFname; size='<value-of select='@size'/>' must not include negative values </report>
    </rule>

    <!-- ========= abstract: whitespaceNameWarning ========== -->
    <rule id="whitespaceNameWarning" abstract="true">
      <!-- used in combination with other name rules -->
      <report test="$enableWhitespaceNameWarning and (string-length(@name) > 1) and (contains(normalize-space(@name),' ') or not(string-length(normalize-space(@name)) = string-length(@name)))" role="warning">&NodeDEFname; name='<value-of select='@name'/>' contains whitespace, which may fail validation or matching corresponding names </report>
    </rule>

    <!-- ========= abstract: requiredName ========== -->
    <rule id="requiredName" abstract="true">
      <let name="name" value="@name"/>
      <let name="nodeName" value="local-name()"/>
      <extends rule="whitespaceNameWarning"/>
      <!-- TODO Mantis 1350 HAnimMotion lacks a name field -->
      <assert test="(string-length($name) > 0) or  (string-length(@USE) > 0) or IS/connect or ($nodeName = 'HAnimMotion')" role="error">&NodeDEFname; name field is required </assert>
      <report test="(string-length($name) > 0) and (string-length(@USE) > 0)" role="error">&NodeDEFname; is a USE node and should not include a name field </report>
      <report test="not(starts-with(local-name(),'Metadata')) and         (following::*[local-name() = $nodeName][@name = $name])" role="warning">&NodeDEFname; has the same name='<value-of select='@name'/>' as a following <name/> node </report>
      <report test="not(starts-with(local-name(),'Metadata')) and         (preceding::*[local-name() = $nodeName][@name = $name])" role="warning">&NodeDEFname; has the same name='<value-of select='@name'/>' as a preceding <name/> node </report>
      <report test="   (starts-with(local-name(),'Metadata')) and (following-sibling::*[local-name() = $nodeName][@name = $name])" role="warning">&NodeDEFname; has the same name='<value-of select='@name'/>' as a following-sibling <name/> node </report>
      <report test="   (starts-with(local-name(),'Metadata')) and (preceding-sibling::*[local-name() = $nodeName][@name = $name])" role="warning">&NodeDEFname; has the same name='<value-of select='@name'/>' as a preceding-sibling <name/> node </report>
      <!-- X3D Specification does not require checking for uniqueness, might not make sense anyway -->
      <!-- TODO inconsistency problem in ProtoInstance DTD, schema for USE instances -->
    </rule>

    <!-- ========= abstract: recommendedName ========== -->
    <rule id="recommendedName" abstract="true">
      <extends rule="whitespaceNameWarning"/>
      <assert test="@name or @USE or IS/connect" role="warning">&NodeDEFname; name field is recommended </assert>
      <report test="@name and @USE" role="error">&NodeDEFname; is a USE node and should not include a name field </report>
      <!-- X3D Specification does not require checking for uniqueness among name values, might not make sense anyway -->
    </rule>

    <!-- ========= abstract: optionalName ========== -->
    <rule id="optionalName" abstract="true">
      <extends rule="whitespaceNameWarning"/>
	  <!-- ignore missing name on CAD nodes since it often becomes unmanageable -->
      <assert test="@name or @USE or IS/connect or starts-with(local-name(),'CAD')" role="info">&NodeDEFname; does not have (optional) name field </assert>
      <report test="@name and @USE" role="error">&NodeDEFname; is a USE node and should not include a name field </report>
      <!-- X3D Specification does not require checking for uniqueness, might not make sense anyway -->
    </rule>

    <!-- ========= abstract: uniqueName ========== -->
    <rule id="uniqueName" abstract="true">
      <let name="nodeName" value="local-name()"/>
      <let name="nameAttribute" value="@name"/>
      <extends rule="whitespaceNameWarning"/>
      <assert test="@USE or  (@name and (string-length(@name) > 0) and not(preceding::*[local-name() = $nodeName][@name = $nameAttribute]) and not(following::*[local-name() = $nodeName][@name = $nameAttribute]))" role="warning">&NodeDEFname; name='<value-of select='@name'/>' is not unique </assert>
      <report test="@USE and (@name and (string-length(@name) > 0))" role="error">&NodeDEFname; is a USE node and should not include a name field </report>
    </rule>

    <!-- ========= abstract: hasUrl ========== -->
    <rule id="hasUrl" abstract="true">
      <!-- some of these rules are modified to run in ExternProtoDeclare, which cannot test @USE -->
      <let name="url"          value="normalize-space(translate(@url, ',',' '))"/>
      <let name="urlCount"     value="string-length($url)    - string-length(translate($url,  ' ','')) + 1"/>
      <let name="stringResidueApos"  value="translate(@url,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;# ', '')"/><!--  no whitespace result -->
      <let name="stringResidueHash1" value="translate(@url,'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;&quot;',  ' ')"/><!-- all whitespace result -->
      <let name="stringResidueHash2" value="normalize-space(translate($stringResidueHash1,'\&quot;',''))"/><!-- escaped quote mark -->
      <let name="stringResidue" value='translate($stringResidueApos,"&apos;","")'/>
      <let name="quoteCount" value="string-length($stringResidue)"/>
      <let name="normalizedStringUrl" value="normalize-space(@url)"/>
      <let name="lastCharacter" value="substring($normalizedStringUrl,string-length($normalizedStringUrl))"/>
      <let name="initialUrl" value="substring-before(substring-after(@url,'&quot;'),'&quot;')"/>
      <let name="remainingUrls" value="substring-after(@url,$initialUrl)"/>
      <!-- TODO also match node name for following test of preceding-url matches -->
      <report test="not(local-name()='Anchor') and not(parent::field) and not(parent::fieldValue) and not(ancestor::ProtoDeclare) and not(ancestor::ExternProtoDeclare) and (string-length($normalizedStringUrl) > 0) and preceding::*[normalize-space(@url) = $normalizedStringUrl] and (count(preceding::*[local-name()=$nodeName][normalize-space(@url) = $normalizedStringUrl]) > 0)" role="warning">&NodeDEFname; url array address(es) duplicate the url definition found in a preceding node, consider DEF/USE to reduce download delays and memory requirements for url content (url='<value-of select='@url'/>') </report> 
      <assert test="@USE or @url or boolean(IS/connect[@nodeField='url']) or (local-name()='Script') or contains(local-name(),'Shader')" role="error">&NodeDEFname; has no value(s) in url='' array </assert>
      <assert test="($urlCount gt 0)"  role="error">&NodeDEFname; has illegal number of values in url array (url='<value-of select='@url'/>') </assert>
      <assert test="not(contains($url,'&quot;&quot;'))"  role="error">&NodeDEFname; url array has adjacent &quot;quote marks&quot; unseparated by other characters (url='<value-of select='@url'/>') </assert>
      <report test="(@url) and not(@USE) and not(contains(@url,'http')) and not((local-name()='Anchor') and contains(@url,'#')) and not((local-name()='Script') and contains(@url,'ecmascript:'))" role="info">&NodeDEFname; url array address(es) missing online http/https references (url='<value-of select='@url'/>') </report>
      <report test="contains(substring-after(@url,'.wrl&quot;'),'.x3d&quot;') or contains(substring-after(@url,'.wrl#'),'.x3d#')" role="warning">&NodeDEFname; url array has .wrl scene reference before .x3d scene reference (url='<value-of select='@url'/>') </report>
      <report test="contains(@url,'\') or contains(@url,'\\')" role="error">&NodeDEFname; url array contains backslash \ character(s) (url='<value-of select='@url'/>') </report>
      <report test="contains(@url,'&quot;/')" role="warning">&NodeDEFname; url array contains contains entry starting at root directory / (url='<value-of select='@url'/>') </report>
      <report test="contains(@url,':///')" role="warning">&NodeDEFname; url array contains triple forward-slash :/// characters (url='<value-of select='@url'/>') </report>
      <report test="contains(@url,'file:/')" role="warning">&NodeDEFname; url array contains file:/ local address, not portable across Web servers (url='<value-of select='@url'/>') </report>
      <report test="contains(@url,'http:/')  and not(contains(@url,'http://'))"  role="warning">&NodeDEFname; url array contains http:/ rather than http:// (url='<value-of select='@url'/>') </report>
      <report test="contains(@url,'https:/') and not(contains(@url,'https://'))" role="warning">&NodeDEFname; url array contains https:/ rather than https:// (url='<value-of select='@url'/>') </report>
      <report test="contains(@url,':/') and not(contains(@url,'://')) and not(contains(@url,'http://')) and not(contains(@url,'https://'))" role="warning">&NodeDEFname; url array contains :/ rather than :// (url='<value-of select='@url'/>') </report>
      <report test="contains(@url,'.wrl') and not(contains(@url,'.x3d'))" role="warning">&NodeDEFname; url array contains .wrl link without corresponding .x3d version, some browsers may fail (url='<value-of select='@url'/>') </report>
      <report test="not(@USE) and contains($normalizedStringUrl,'&quot;&quot;') and not($normalizedStringUrl='&quot;&quot;') and not(contains($normalizedStringUrl,'\&quot;&quot;') or contains($normalizedStringUrl,'&quot;\&quot;') or contains($normalizedStringUrl,'&quot;&quot; &quot;') or contains($normalizedStringUrl,'&quot; &quot;&quot;'))"  role="error">&TextNodeDEFname; string array has questionable line-break &quot;&quot; quote marks (url='<value-of select='@url'/>') </report>
      <report test="not(@USE) and (@url) and not(contains(@url,'&quot;'))"    role="error">&NodeDEFname; url string array elements each need to begin and end with &quot;quote marks&quot;. </report><!-- Corrected example: &lt;<name/> DEF='<value-of select='$DEF'/>' url=&apos;&quot;<value-of select='(@url)'/>&quot;&apos;/&gt; -->
      <report test="not(@USE) and (@url) and    (contains(@url,'&quot;')) and (($quoteCount div 2)!=round($quoteCount div 2)) and not(contains(@url,'\&quot;'))"    role="error">&NodeDEFname; string array has <value-of select='($quoteCount)'/> unescaped &quot;quote marks&quot; but instead needs to have an even number of matched pairs(url='<value-of select='@url'/>') </report>
      <report test="not(@USE) and (@url) and (contains(@url,'\&quot;'))"    role="warning">&NodeDEFname; has <value-of select='($quoteCount)'/> quote marks with at least one escaped quote mark \&quot; so double-check to ensure paired &quot;quote marks&quot; for each line are matched (url='<value-of select='@url'/>') </report>
      <report test="not(@USE) and ($normalizedStringUrl) and not(starts-with($normalizedStringUrl,'&quot;')) and not($lastCharacter='&quot;') and (contains(@url,'&quot;'))"    role="error">&NodeDEFname; array of string values has incorrect quoting, each individual value needs to begin and end with &quot;quote marks&quot; (url='<value-of select='@url'/>') </report>
      <report test="not(@USE) and ($normalizedStringUrl) and not(starts-with($normalizedStringUrl,'&quot;')) and    ($lastCharacter='&quot;')"                                     role="error">&NodeDEFname; array of string values needs to begin with quote mark &quot; (url='<value-of select='@url'/>') </report>
      <report test="not(@USE) and ($normalizedStringUrl) and    (starts-with($normalizedStringUrl,'&quot;')) and not($lastCharacter='&quot;')"                                     role="error">&NodeDEFname; array of string values needs to end with quote mark &quot; (url='<value-of select='@url'/>') </report>
      <!-- trace: multiple # checks -->
      <report test="false() and (string-length($stringResidueHash2) > 0)" role="trace">$stringResidueHash2=<value-of select='$stringResidueHash2'/> </report>
      <report test="contains($stringResidueHash2, '# #')" role="error">&NodeDEFname; url array contains an address link with too many # characters - only one # is allowed for each bookmark, viewpoint or prototype reference </report>
	  <!-- trace: MFString array checks -->
      <report test="false()" role="trace">$quoteCount=<value-of select='$quoteCount'/>, $stringResidue=<value-of select='$stringResidue'/>, $stringResidueApos=<value-of select='$stringResidueApos'/> , $lastCharacter=<value-of select='$lastCharacter'/> </report>
      <!-- case mismatch with initial url value - TODO problem with fn:
      <report test="contains(fn:lower-case($remainingUrls),fn:lower-case($initialUrl)) and not(contains($remainingUrls,$initialUrl))" role="error">&TextNodeDEFname; file and directory names in similar url array entries must match case (url='<value-of select='@url'/>') </report>
      -->
      <report test="contains(lower-case($normalizedStringUrl),'savagedefense.nps.navy.mil')" role="error">&NodeDEFname; url contains 'savagedefense.nps.navy.mil' but server now renamed as 'savagedefense.nps.edu' (url='<value-of select='@url'/>') </report>
      <!-- TODO check for duplicate array entries using regex -->
      <!-- TODO, if possible: check for embedded space within a url; check for multiple bookmark # signs within a url; check bookmark # signs only in Inline, Anchor, ExternProtoDeclare -->
    </rule>

    <!-- ========= abstract: nameNotReservedWord (for ProtoDeclare, ExternProtoDeclare, ProtoInstance) ========== -->
    <rule id="nameNotReservedWord" abstract="true">
      <assert test="@name" role="error">&lt;<value-of select='local-name()'/> DEF='<value-of select='@DEF'/>'> must have name </assert>
      <assert test="((@name!='AS') and (@name!='component') and (@name!='DEF') and (@name!='EXPORT') and (@name!='FALSE') and (@name!='false') and (@name!='') and
                     (@name!='head') and (@name!='IMPORT') and (@name!='initializeOnly') and (@name!='inputOnly') and (@name!='outputOnly') and (@name!='inputOutput') and
                     (@name!='IS') and (@name!='meta') and (@name!='NULL') and (@name!='PROTO') and (@name!='ROUTE') and (@name!='Scene') and (@name!='TO') and
                     (@name!='TRUE') and (@name!='true') and (@name!='USE') and (@name!='X3D'))" role="error">&lt;<value-of select='local-name()'/> name='<value-of select='@name'/>' DEF='<value-of select='@DEF'/>'/&gt; has name that illegally overrides a reserved word from the X3D Specification </assert>
    </rule>

    <!-- ========= abstract: fieldNameNotReservedWord (for field, fieldValue) ========== -->
    <rule id="fieldNameNotReservedWord" abstract="true">
      <let name="fieldLabel" value="concat('&lt;',local-name(..),' name=&quot;',../@name,'&quot; DEF=&quot;',../@DEF,'&quot;&gt; &lt;',local-name(),' name=&quot;',@name,'&quot;')"/>
      <assert test="not(@name) or
                    ((@name!='AS') and (@name!='component') and (@name!='DEF') and (@name!='EXPORT') and (@name!='FALSE') and (@name!='false') and (@name!='') and
                     (@name!='head') and (@name!='IMPORT') and (@name!='initializeOnly') and (@name!='inputOnly') and (@name!='outputOnly') and (@name!='inputOutput') and
                     (@name!='IS') and (@name!='meta') and (@name!='NULL') and (@name!='PROTO') and (@name!='ROUTE') and (@name!='Scene') and (@name!='TO') and
                     (@name!='TRUE') and (@name!='true') and (@name!='USE') and (@name!='X3D'))" role="error"><value-of select='$fieldLabel'/>/&gt; has name that illegally overrides a reserved word from the X3D Specification </assert>
      <report test="(@value='TRUE')"  role="error"><value-of select='$fieldLabel'/> value='<value-of select='@value'/>'/&gt; contains boolean constant TRUE, use lower-case 'true' instead to match XML rules </report>
      <report test="(@value='FALSE')" role="error"><value-of select='$fieldLabel'/> value='<value-of select='@value'/>'/&gt; contains boolean constant FALSE, use lower-case 'false' instead to match XML rules </report>
    </rule>

    <!-- ========= abstract: NoLodSwitchParent ========== -->
    <rule id="NoLodSwitchParent" abstract="true">
      <report test="(ancestor::LOD)    and ends-with(local-name(),'Viewpoint')" role="error">&NodeDEFname; description='<value-of select='@description'/>' behavior not guaranteed as child (or descendant) of LOD node, avoid this design pattern or use ViewpointGroup instead of LOD </report>
      <report test="(ancestor::Switch) and ends-with(local-name(),'Viewpoint')" role="error">&NodeDEFname; description='<value-of select='@description'/>' behavior not guaranteed as child (or descendant) of Switch node, avoid this design pattern or use ViewpointGroup instead of Switch </report>
      <report test="(ancestor::LOD)    and not(ends-with(local-name(),'Viewpoint'))" role="error">&NodeDEFname; description='<value-of select='@description'/>' behavior not guaranteed as child (or descendant) of LOD node, avoid this design pattern </report>
      <report test="(ancestor::Switch) and not(ends-with(local-name(),'Viewpoint'))" role="error">&NodeDEFname; description='<value-of select='@description'/>' behavior not guaranteed as child (or descendant) of Switch node, avoid this design pattern </report>
    </rule>

    <!-- ========= abstract: creaseAngle ========== -->
    <rule id="creaseAngle" abstract="true">
      <report test="contains(@creaseAngle,'-')" role="info">&NodeDEFname; creaseAngle='<value-of select='@creaseAngle'/>' cannot be negative </report>
    </rule>

    <!-- ========= abstract: descriptionTests ========== -->
    <rule id="descriptionTests" abstract="true">
      <let name="description"     value="normalize-space(@description)"/>
      <!-- TimeSensor, ImageTexture and other listed sensors do not include description field but TODO the specification probably ought to include it
	       see Mantis issue 840 https://www.web3d.org/member-only/mantis/view.php?id=840
      <report test="(string-length(@description) = 0) and not(boolean(IS/connect/@nodeField='description')) and not(@USE) and ((local-name()='Anchor') or (local-name()='AudioClip') or (local-name()='ImageTexture') or (local-name()='MovieTexture') or (local-name()='LoadSensor') or (local-name()='ProximitySensor') or contains(local-name(),'Viewpoint') or (local-name()='VisibilitySensor'))" role="warning">&NodeDEFname; is missing description. Example: description='touch to activate' </report> -->
      <report test="(string-length(@description) = 0) and not(boolean(IS/connect/@nodeField='description')) and not(@USE) and ((local-name()='CylinderSensor') or (local-name()='SphereSensor'))" role="warning">&NodeDEFname; is missing description. Example: description='select and drag to rotate' </report>
      <report test="(string-length(@description) = 0) and not(boolean(IS/connect/@nodeField='description')) and not(@USE) and ((local-name()='PlaneSensor'))" role="warning">&NodeDEFname; is missing description. Example: description='select and drag to move' </report>
      <report test="(local-name()='Anchor')            and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))" role="warning">&NodeDEFname; is missing description which is important for accessibility and usability.  Example: description='Anchor link loads another scene...' or 'Anchor link goes to Viewpoint DEFname...' or 'Anchor link loads a Web page...' </report>
      <report test="(local-name()='AudioClip')         and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))" role="warning">&NodeDEFname; is missing description which is important for accessibility and usability.  Example: description='AudioClip sound of ___ is playing...' </report>
      <report test="(local-name()='MovieTexture')      and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))" role="warning">&NodeDEFname; is missing description which is important for accessibility and usability.  Example: description='MovieTexture video/sound of ___ is playing...' </report>
  <!-- TODO some Sensor nodes do not yet have description field https://www.web3d.org/member-only/mantis/view.php?id=667 -->
  <!-- TODO more precise coverage for Audio nodes -->
  <!--<report test="(local-name()='ImageTexture        and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))" role="warning">&NodeDEFname; is missing description which is important for accessibility and usability.  Example: description='my beautiful image' </report> -->
  <!--<report test="(local-name()='PixelTexture        and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))" role="warning">&NodeDEFname; is missing description which is important for accessibility and usability.  Example: description='my beautiful image' </report> -->
  <!--<report test="(local-name()='KeySensor')         and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))" role="warning">&NodeDEFname; is missing description which is important for accessibility and usability.  Example: description='KeySensor activated: please enter A for Apple, E for etc...' </report> -->
  <!--<report test="(local-name()='StringSensor')      and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))" role="warning">&NodeDEFname; is missing description which is important for accessibility and usability.  Example: description='StringSensor activated: please enter your new idea...' </report> -->
      <report test="(local-name()='LoadSensor')        and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))" role="warning">&NodeDEFname; is missing description which is important for accessibility and usability.  Example: description='LoadSensor monitoring url content ___...' </report>
      <report test="(local-name()='ProximitySensor')   and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))" role="warning">&NodeDEFname; is missing description which is important for accessibility and usability.  Example: description='ProximitySensor activated: within range of ___...' </report>
      <report test="(local-name()='VisibilitySensor')  and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))" role="warning">&NodeDEFname; is missing description which is important for accessibility and usability.  Example: description='VisibilitySensor activated: within sight of ___...' </report>
      <report test="contains(local-name(),'Viewpoint') and (string-length(@description) &lt; 1) and not(@USE) and not(boolean(IS/connect/@nodeField='description'))" role="warning">&NodeDEFname; is missing description which is important for accessibility and usability.  Example: description='initial view, rotate to examine object' </report>
      <assert test="not(@description = @DEF) or (string-length(@description) = 0)" role="hint">&NodeDEFname; description should be different than DEF, provide a descriptive phrase for description instead </assert>
      <assert test="contains(@description,' ') or (string-length(@description) &lt; 14) or (@description = @DEF) or contains(//meta[@name='title']/@content, @description) or ((local-name() ='Anchor') and contains(@url,@description))" role="hint">&NodeDEFname; description='<value-of select='@description'/>' can include space characters in description </assert>
      <report test="starts-with(normalize-space($description),'&quot;') or ends-with(normalize-space($description),'&quot;')" role="hint">&NodeDEFname; description='<value-of select='@description'/>' does not need wrapper quotes </report>
    </rule>

    <!-- ========= abstract: enabledOnTests ========== -->
    <rule id="enabledOnTests" abstract="true">
      <report test="(@enabled='false') and not(//ROUTE[@toNode=$DEF][(@toField='enabled') or (@toField='set_enabled')] or (IS/connect[nodeField='enabled']))" role="warning">&NodeDEFname; is inactive since enabled='false' (and no ROUTE is provided to change this value) </report>
      <report test="(@enabled='TRUE' )" role="error">&NodeDEFname; enabled='TRUE' is incorrect, define enabled='true' instead </report>
      <report test="(@enabled='FALSE')" role="error">&NodeDEFname; enabled='FALSE' is incorrect, define enabled='false' instead </report>
      <report test=     "(@on='TRUE' )" role="error">&NodeDEFname; on='TRUE' is incorrect, define on='true' instead </report>
      <report test=     "(@on='FALSE')" role="error">&NodeDEFname; on='FALSE' is incorrect, define on='false' instead </report>
    </rule>

    <!-- ========= html content ========== -->
    <rule context="*[not(ancestor-or-self::*[(upper-case(local-name()) = 'X3D')])]">
		<!-- ignore non-X3D content in this page -->
		<report test="not(@USE) and true()" role="diagnostic">element <value-of select='local-name()'/>: ignore non-X3D content in this page </report>
    </rule>

    <!-- ========= X3D ========== -->
    <rule context="X3D | *[(upper-case(local-name()) = 'X3D')]">
      <let name="xsltVersion"     value="system-property('xsl:version')"/>
      <let name="xsltVendor"      value="system-property('xsl:vendor')"/>
      <extends rule="noDEF"/>
      <extends rule="profileTests"/>
      <!-- Debug statement: set test="true()" to enable, test="false()" to disable -->
      <report test="false()" role="diagnostic">XSLT stylesheet information:  xsl:version=<value-of select='$xsltVersion'/>, xsl:vendor=<value-of select='$xsltVendor'/> </report>
      <!-- TODO check for presence and correctness of DTD -->
      <!-- TODO check for presence and correctness of stylesheet PI -->
      <report test="(@version='4.0')" role="diagnostic">X3D version 4.0 is approved by Web3D Consortium and focused on interoperability with HTML, glTF Physically Based Rendering (PBR) and Web Audio API, undergoing dinal review by ISO national bodies in 2022. </report>
      <report test="(@version='4.1')" role="diagnostic">X3D version 4.1 is experimental and not yet under development, focused on VR/AR/Mixed and Augmented Reality (MAR). </report>
      <report test="(local-name() != 'X3D')" role="error">&lt;<value-of select='local-name()'/>&gt; element capitalization must be upper-case &lt;X3D&gt; for proper validation </report>
      <assert test="@version" role="error">X3D root element must include version number. </assert>
      <assert test="(@version='3.0') or (@version='3.1') or (@version='3.2') or (@version='3.3') or (@version='4.0')" role="error">Approved X3D versions are 3.0, 3.1, 3.2, 3.3, or 4.0 </assert>
      <report test="(@version='2.0') or (@version='2.1')" role="error">Version &lt;<value-of select='@version'/>&gt;  corresponds to Virtual Reality Modeling Language (VRML97). Approved X3D versions are 3.0, 3.1, 3.2, 3.3, or 4.0 </report>
      <!-- X3D version 3.0, 3.1, 3.2, 3.3, 4.0 checks for illegal nodes handled on node-by-node basis -->
      <report test="(@version='3.4')" role="diagnostic">X3D version 3.4 was developmental and discontinued.  X3D version='3.4' is no longer a legal value, please correct it. </report>
      <!-- TODO xmlns -->
      <!-- X3D element experimental attributes -->
	  <report test="(string-length(@id)           > 0)" role="warning">X3D attribute id='<value-of           select='@id'          />' is experimental, allowed, and used by X3DOM when included within HTML page source </report>
	  <report test="(string-length(@showLog)      > 0)" role="warning">X3D attribute showLog='<value-of      select='@showLog'     />' is experimental, allowed, and used by X3DOM when included within HTML page source </report>
	  <report test="(string-length(@showStat)     > 0)" role="warning">X3D attribute showStat='<value-of     select='@showStat'    />' is experimental, allowed, and used by X3DOM when included within HTML page source </report>
	  <report test="(string-length(@showProgress) > 0)" role="warning">X3D attribute showProgress='<value-of select='@showProgress'/>' is experimental, allowed, and used by X3DOM when included within HTML page source </report>
	  <report test="(string-length(@width)        > 0)" role="warning">X3D attribute width='<value-of        select='@width'       />' is experimental, allowed, and used by X3DOM when included within HTML page source </report>
      <report test="(string-length(@height)       > 0)" role="warning">X3D attribute height='<value-of           select='@height'      />' is experimental, allowed, and used by X3DOM when included within HTML page source </report>
      <!-- TODO look for X3DOM css and script links in HTML page, report if not found -->
    </rule>

    <!-- ========= X3DCanvas (X_ITE) ========== -->
    <rule context="X3DCanvas">
	  <report test="not(@USE) and true()" role="warning">X3DCanvas <value-of select='@id'/> is experimental and used by X_ITE when included in HTML page source. See https://create3000.github.io/x_ite</report>
	  <assert test="(string-length(@url) > 0)" role="warning">X3DCanvas url attribute is missing </assert>
	  <report test="(string-length(@url) > 0)" role="info"   >X3DCanvas url='<value-of select='@url'/>' </report>
	  <!-- X3D Validator looks for X_ITE css and javascript links in HTML page -->
    </rule>

    <!-- ========= Scene ========== -->
    <rule context="Scene | *[(lower-case(local-name()) = 'scene')]">
      <!-- Diagnostic to check that root node can only be *children* of Grouping node or LayerSet -->
      <!-- https://www.web3d.org/documents/specifications/19775-1/V3.3/Part01/concepts.html#Rootnodes -->
      <!-- https://www.web3d.org/documents/specifications/19775-1/V3.3/Part01/concepts.html#InterfaceHierarchy-->
      <let name="legalNodeTest1"     value="*[
                      (local-name(..)='Anchor') or (local-name(..)='AudioClip') or (local-name()='Background') or (local-name()='Billboard') or
                      (local-name()='BooleanFilter') or (local-name()='BooleanToggle') or
                      (local-name()='CADAssembly') or (local-name()='CADFace') or (local-name()='CADLayer') or (local-name()='CADPart') or (local-name()='ClipPlane') or
                      (local-name()='Collision') or (local-name()='CollisionCollection') or (local-name()='CollidableOffset') or (local-name()='CollidableShape') or
                      (local-name()='DISEntityManager') or (local-name()='DISEntityTypeMapping') or (local-name()='EspduTransform') or (local-name()='Fog')]"/>
      <let name="legalNodeTest2"     value="*[
                      (contains(local-name(),'Chaser')) or (contains(local-name(),'Damper')) or (contains(local-name(),'Interpolator')) or (contains(local-name(),'HAnim')) or
                      (contains(local-name(),'Light')) or (contains(local-name(),'Pdu')) or (contains(local-name(),'Sensor')) or (contains(local-name(),'Sequencer')) or
                      (contains(local-name(),'Trigger')) or (contains(local-name(),'Viewpoint')) or (contains(local-name(),'VolumeData'))]"/>
      <let name="legalNodeTest3"     value="*[
                      (local-name()='GeoLocation') or (local-name()='GeoLOD') or (local-name()='GeoMetadata') or (local-name()='GeoTransform') or (local-name()='GeoViewpoint') or
                      (local-name()='Group') or (local-name()='Inline') or
                      (local-name()='Layout') or (local-name()='LayoutGroup') or (local-name()='LocalFog') or (local-name()='LOD') or
                      (local-name()='MovieTexture') or (local-name()='NavigationInfo') or
                      (local-name()='NurbsOrientationInterpolator') or (local-name()='NurbsPositionInterpolator') or (local-name()='NurbsSet') or (local-name()='NurbsSurfaceInterpolator')]"/>
      <let name="legalNodeTest4"     value="*[
                      (local-name()='ParticleSystem') or (local-name()='PickableGroup') or (local-name()='RigidBodyCollection') or
                      (local-name()='ScreenGroup') or (local-name()='Script') or (local-name()='Shape') or (local-name()='Sound') or (local-name()='StaticGroup') or
                      (local-name()='StaticGroup') or (local-name()='Switch') or (local-name()='TextureBackground') or (local-name()='TimeSensor') or (local-name()='Transform') or
                      (local-name()='Viewport') or (local-name()='WorldInfo') or
                      (local-name()='ProtoDeclare') or (local-name()='ExternProtoDeclare') or (local-name()='ProtoInstance') or (local-name()='LayerSet')]"/>
      <extends rule="noDEF"/>
      <report test="(local-name() != 'Scene')" role="error">&lt;<value-of select='local-name()'/>&gt; element capitalization must be &lt;Scene&gt; for proper validation </report>
      <report test="(count(*) = 0)" role="error">&lt;<value-of select='local-name()'/>&gt; is empty </report>
      <assert test="(boolean($legalNodeTest1) or boolean($legalNodeTest2) or boolean($legalNodeTest3) or boolean($legalNodeTest4))"  role="error">&lt;<value-of select='local-name()'/>&gt; root nodes can only be legal children of Grouping nodes, or LayerSet </assert>
      <!-- TODO EaseInEaseOut, Metadata nodes? -->
      <!-- TODO see mantis issue submitted 1 August 2015. -->
    </rule>

    <!-- ========= head and contained meta ========== -->
    <rule context="head | *[(lower-case(local-name()) = 'head')]">
      <let name="title"       value="meta[@name='title']/@content"/>
      <let name="identifier"  value="meta[@name='identifier']/@content"/>
      <let name="created"     value="meta[@name='created'   ]/@content"/>
      <let name="modified"    value="meta[@name='modified'  ]/@content"/>
      <let name="translated"  value="meta[@name='translated']/@content"/>
      <extends rule="noDEF"/>
      <!-- Identification of unit-test scenes rule is used in X3D Schematron and X3dToJson.xslt -->
      <report test="(meta[@name='title'][starts-with(lower-case(@content),'test') or ends-with(lower-case(@content),'test.x3d')]) or (meta[(@name='error') or (@name='warning') or (@name='hint') or (@name='info') or (@name='TODO')][starts-with(lower-case(@content),'test')])" role="diagnostic">Based on file name, <value-of select='$title'/> is considered a test model supporting X3D Quality Assurance (QA).&#10;  https://www.web3d.org/x3d/content/examples/X3dResources.html#QualityAssurance </report>
      <report test="(local-name() != 'head')" role="error">&lt;<value-of select='local-name()'/>&gt; element capitalization must be lower-case &lt;head&gt; for proper validation </report>
      <!-- document metadata checks -->
      <report test="meta/@content[starts-with(.,'*enter')]" role="warning">Update all meta tag(s) containing content='*enter new value...*' </report>
      <assert test="(meta/@name='title')" role="warning">Missing X3D filename in meta tag, should appear as &lt;meta name='title' content='FileName.x3d'/&gt; </assert>
      <assert test="(meta/@name='identifier')" role="warning">Correct url for X3D file should appear in &lt;meta name='identifier' content='https://someAddress/somePath/FileName.x3d'/&gt; </assert>
      <report test="(meta/@name='identifier') and (string-length($title) > 0) and not(contains($identifier, $title))" role="warning">X3D/head/meta title (i.e. filename '<value-of select='$title'/>') is expected at end of identifier (url) value </report>
      <report test="(count(meta[@name='identifier']) > 1)" role="warning"><value-of select="count(meta[@name='identifier'])"/> X3D/head/meta elements found with name='identifier' (url) values, only 1 is allowed </report>
      <assert test="(string-length($identifier)=0) or starts-with($identifier, 'http://') or starts-with($identifier, 'https://')" role="warning">X3D/head/meta identifier (url) content should start with http:// or 'https:// </assert>
      <assert test="(meta/@name='creator') or (meta/@name='creators')" role="info">Missing name of X3D scene author in meta tag, add &lt;meta name='creator' content='Author Name'/&gt; </assert>
      <assert test="(meta/@name='description')" role="info">Missing X3D scene description in meta tag, should appear as &lt;meta name='description' content='topic sentence plus good summary'/&gt; </assert>
      <assert test="(meta/@name='generator')" role="info">It is good practice to identify editor(s) used, for example &lt;meta name='generator' content='X3D-Edit, https://savage.nps.edu/X3D-Edit'/&gt; </assert>
      <report test="(string-length(meta/@key)   > 0)" role="error">Erroneous attribute found on meta element, key='' must be content='' for &lt;meta name='<value-of select="meta[(string-length(@key) > 0)]/@name"/>' <value-of select="meta[(string-length(@key) > 0)]/@key"/>'/&gt; </report>
      <report test="(string-length(meta/@value) > 0)" role="error">Erroneous attribute found on meta element, value='' must be content='' for &lt;meta name='<value-of select="meta[(string-length(@value) > 0)]/@name"/>' <value-of select="meta[(string-length(@value) > 0)]/@value"/>'/&gt; </report>
      <!-- TODO regex for ## Month #### -->
	  <!-- TODO check correct order: component unit meta -->
	</rule>

    <!-- Report all meta errors, warnings, hints and info as diagnostics -->
    <rule context="meta[(@name='error') or (@name='warning') or (@name='hint') or (@name='info') or starts-with(@name,'TODO')]">
      <report test="not(@USE) and true()" role="diagnostic">&lt;meta name='<value-of select='@name'/>' content='<value-of select='@content'/>'/&gt; </report>
      <assert test="@content" role="error">&lt;meta name='<value-of select='@name'/>' content=''/> is missing required value for content</assert>
	  <!-- reporting test scenes is accomplished under rule for head element -->
    </rule>

    <rule context="meta | *[(lower-case(local-name()) = 'meta')]">
      <let name="name" value="@name"/>
      <let name="content" value="content"/>
      <let name="hasPriorDuplicate" value="preceding::meta[normalize-space(@name) = normalize-space($name)][normalize-space(@content) = normalize-space($content)]"/>
      <let name="hasSingletonName" value="(@name='created') or (@name='modified') or (@name='description') or (@name='identifier') or (@name='title') or (@name='subject')"/>
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="false()"/>
      <!-- multiple meta tags with same name allowed <report test="preceding::meta[normalize-space(@name) = normalize-space($name)]" role="warning">&lt;<value-of select='local-name()'/> name='<value-of select='@name'/>' content='<value-of select='@content'/>'/&gt; has duplicate prior meta element with same name and content </report> -->
      <report test="(local-name() != 'meta')" role="error">&lt;<value-of select='local-name()'/>&gt; element capitalization must be lower-case &lt;meta&gt; for proper validation </report>
      <report test="$hasPriorDuplicate" role="error">&lt;meta name='<value-of select='@name'/>' content='<value-of select='@content'/>'/> has prior duplicate element </report>
      <report test="not($hasPriorDuplicate) and preceding::meta[@name = $name] and $hasSingletonName" role="error">&lt;meta name='<value-of select='@name'/>' content='<value-of select='@content'/>'/> has redundant prior element </report>
      <assert test="@content" role="error">&lt;meta name='<value-of select='@name'/>' content=''/> is missing required value for content</assert>
      <assert test="@name or @http-equiv"    role="error">&lt;meta name='<value-of select='@name'/>' content='<value-of select='@content'/>'/> is missing required value for name (or possibly http-equiv)</assert>
      <report test="@name and @http-equiv"   role="error">&lt;meta name='<value-of select='@name'/>' http-equiv='<value-of select='@http-equiv'/>'/>'/> meta name and http-equiv attributes cannot both be provided at one time, only use one (together with an optional content attribute) </report>
      <report test="(@name='image')"  role="warning">&lt;meta name='<value-of select='@name'/>' content='<value-of select='@content'/>'/> capitalization mismatch, use keyword name='Image' </report>
      <report test="(@name='movingImage') or (@name='movingimage')"  role="warning">&lt;meta name='<value-of select='@name'/>' content='<value-of select='@content'/>'/> capitalization mismatch, use keyword name='MovingImage' </report>
      <report test="(@name='sound')"  role="warning">&lt;meta name='<value-of select='@name'/>' content='<value-of select='@content'/>'/> capitalization mismatch, use keyword name='Sound' </report>
      <report test="(@name='description') and (count(preceding-sibling::*[@name='description']) gt 0) and (count(following-sibling::*[@name='description']) = 0)" role="warning">&lt;<name/> DEF='<value-of select="@DEF"/>'/&gt; has <value-of select="(count(preceding-sibling::*/@name='description') + 1)"/> meta nodes with name='description' which can confuse archive and catalog tools </report>
    </rule>

    <!-- ========= component ========== -->
    <rule context="component | *[(lower-case(local-name()) = 'component')]">
      <let name="name" value="@name"/>
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="true()"/>
      <extends rule="noDEF"/>
      <report test="preceding::component[@name = $name]" role="warning">&lt;<value-of select='local-name()'/> name='<value-of select='@name'/>'/&gt; has redundant prior component element with same name </report>
      <report test="(local-name() != 'component')" role="error">&lt;<value-of select='local-name()'/>&gt; element capitalization must be lower-case &lt;component&gt; for proper validation </report>
      <!-- check for legal level values for each component -->
      <!-- TODO note these values are for X3D v3.3 and do not include checks for X3D version differences -->
      <assert test="@name"  role="error">&lt;component name='' level='<value-of select='@level'/>'/&gt; is required to have a value for name field </assert>
      <assert test="@level" role="error">&lt;component name='<value-of select='@name'/>' level=''/&gt; is required to have a value for level field </assert>
      <assert test="(not(string-length(@name)  > 0)) or 
                    (not(string-length(@level) > 0)) or
                    (@name='Core'                 and (@level='1' or @level='2')) or
                    (@name='Time'                 and (@level='1' or @level='2')) or
                    (@name='Networking'           and (@level='1' or @level='2' or @level='3' or @level='4')) or
                    (@name='Grouping'             and (@level='1' or @level='2' or @level='3')) or
                    (@name='Rendering'            and (@level='1' or @level='2' or @level='3' or @level='4' or @level='5')) or
                    (@name='Shape'                and (@level='1' or @level='2' or @level='3' or @level='4')) or
                    (@name='Geometry3D'           and (@level='1' or @level='2' or @level='3' or @level='4')) or
                    (@name='Geometry2D'           and (@level='1' or @level='2')) or
                    (@name='Text'                 and (@level='1')) or
                    (@name='Sound'                and (@level='1')) or
                    (@name='Lighting'             and (@level='1' or @level='2' or @level='3')) or
                    (@name='Texturing'            and (@level='1' or @level='2' or @level='3')) or
                    (@name='Interpolation'        and (@level='1' or @level='2' or @level='3' or @level='4' or @level='5')) or
                    (@name='PointingDeviceSensor' and (@level='1')) or
                    (@name='KeyDeviceSensor'      and (@level='1' or @level='2')) or
                    (@name='EnvironmentalSensor'  and (@level='1' or @level='2' or @level='3')) or
                    (@name='Navigation'           and (@level='1' or @level='2' or @level='3')) or
                    (@name='EnvironmentalEffects' and (@level='1' or @level='2' or @level='3' or @level='4')) or
                    (@name='Geospatial'           and (@level='1' or @level='2')) or
                    (@name='H-Anim'               and (@level='1')) or
                    (@name='HAnim'                and (@level='1' or @level='2')) or
                    (@name='NURBS'                and (@level='1' or @level='2' or @level='3' or @level='4')) or
                    (@name='DIS'                  and (@level='1' or @level='2')) or
                    (@name='Scripting'            and (@level='1')) or
                    (@name='EventUtilities'       and (@level='1')) or
                    (@name='Shaders'              and (@level='1')) or
                    (@name='CADGeometry'          and (@level='1' or @level='2')) or
                    (@name='Texturing3D'          and (@level='1' or @level='2')) or
                    (@name='CubeMapTexturing'     and (@level='1' or @level='2' or @level='3')) or
                    (@name='Layering'             and (@level='1')) or
                    (@name='Layout'               and (@level='1' or @level='2')) or
                    (@name='RigidBodyPhysics'     and (@level='1' or @level='2')) or
                    (@name='Picking'              and (@level='1' or @level='2' or @level='3')) or
                    (@name='Followers'            and (@level='1')) or
                    (@name='ParticleSystems'      and (@level='1' or @level='2' or @level='3')) or
                    (@name='VolumeRendering'      and (@level='1' or @level='2' or @level='3' or @level='4'))" role="error">&lt;component&gt; name='<value-of select='@name'/>' has invalid value for level='<value-of select='@level'/>' (too high or undefined) </assert>
      <!-- see hanimProfile rule for HAnim/H-Anim component name checks -->
    </rule>

    <!-- ========= unit ========== -->
    <rule context="unit | *[(lower-case(local-name()) = 'unit')]">
      <let name="name" value="@name"/>
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="true()"/>
      <extends rule="noDEF"/>
      <report test="preceding::unit[@name = $name]" role="warning">&lt;<value-of select='local-name()'/> name='<value-of select='@name'/>'/&gt; has redundant prior unit element with same name </report>
      <report test="(local-name() != 'unit')" role="error">&lt;<value-of select='local-name()'/>&gt; element capitalization must be lower-case &lt;unit&gt; for proper validation </report>
      <!-- cannot use rule="X3Dversion3.3" since no DEF is allowed for unit statement -->
      <assert test="(/X3D/@version='3.3') or (/X3D/@version='4.0')" role="error">&lt;unit/&gt; statement requires X3D version='3.3' or greater, but found version='<value-of select='/X3D/@version'/>' </assert>
      <assert test="(@conversionFactor > 0)" role="error">&lt;unit conversionFactor='<value-of select='@conversionFactor'/>'/&gt; must be positive</assert>
      <!-- TODO value checks, order is component/unit/meta, conversionFactor positive -->
    </rule>

    <!-- ========= Body ========== -->
    <rule context="Body">
      <extends rule="noDEF"/>
      <assert test="*" role="warning"> Body of scene has no content, so there is nothing to render </assert>
    </rule>

    <!-- ========= XML comment() ==========
    <rule context="comment()">
      TODO not working?! comments seem to be ignored
      <report test="not(@USE) and true()" role="diagnostic">found XML comment... </report>
      TODO these XML comment tests are likely superfluous, since input document with hyphen problems fails XML well-formed test and thus remains unchecked by schematron XSLT
      TODO remove space between hyphens - -
      <assert test="not(starts-with(.,'-'))" role="error">XML comment cannot start with - character: &lt;!- -<value-of select='.'/>- -&gt; </assert>
      <assert test="not(contains(.,'- -'))" role="error">XML comment cannot include - - characters: &lt;!- -<value-of select='.'/>- -&gt; </assert>
    </rule>
     -->

    <!-- ========= Shape ========== -->
    <rule context="Shape">
      <extends rule="DEFtests"/>
      <extends rule="boundingBoxTests"/>
      <extends rule="NeedsChildNode"/>
      <!-- XML comment can silence warning about empty Shape (which is sometimes needed) -->
      <assert test="((@USE) and (string-length(@USE) > 0)) or comment() or boolean(Appearance | ProtoInstance | descendant::Color | descendant::ColorRGBA | IS | parent::ProtoBody | parent::field | parent::fieldValue) or ((local-name(..)='Collision') and (@containerField='proxy')) or ((local-name(..)='LOD') and not(*)) or ((local-name(..)='Switch') and not(*))" role="warning">&NodeDEFname; found without child Appearance or Color </assert>
      <report test="(count(*)=1) and (ProtoInstance) and not(parent::ProtoBody) and not(parent::field) and not(parent::fieldValue) and not(IS)" role="warning">&NodeDEFname; found with single ProtoInstance child, need to add Appearance or geometry node </report>
      <assert test="((@USE) and (string-length(@USE) > 0)) or comment() or boolean(count(*)>1) or (boolean(count(*)=1) and not(boolean(Appearance | ProtoInstance)))" role="warning">&NodeDEFname; found without child geometry node </assert>
      <report test="(count(*)=2) and not(Appearance) and not(ProtoInstance) and not(parent::ProtoBody) and not(parent::field) and not(parent::fieldValue) and not(IS)" role="warning">&NodeDEFname; found without child geometry node (test #2) </report>
      <report test="(/X3D[starts-with(@version,'3')] and (string-length(normalize-space(@castShadow)) > 0))" role="error">&NodeDEFname; castShadow='<value-of select='@castShadow'/>' requires X3D version='4.0' or greater </report>
      <report test="(string-length(normalize-space(@castShadows))           > 0)" role="error">&NodeDEFname; castShadows='<value-of select='@castShadows'/>' field name is mispelled, correct name is castShadow </report>
    </rule>

    <!-- ========= Appearance ========== -->
    <rule context="Appearance">
      <extends rule="DEFtests"/>
      <assert test="parent::Shape | parent::ProtoBody | parent::field | parent::fieldValue" role="error">&NodeDEFname; found outside of a parent Shape, ProtoBody, field or fieldValue element </assert>
      <assert test="((@USE) and (string-length(@USE) > 0)) or (Material | TwoSidedMaterial | PhysicalMaterial | UnlitMaterial | ImageTexture | LineProperties | PointProperties | MovieTexture | PixelTexture | MultiTexture | */Color | */ColorRGBA | ProtoInstance | IS | parent::ProtoBody | parent::field | parent::fieldValue)" role="warning">empty &NodeDEFname; found without child Material, TwoSidedMaterial, PhysicalMaterial, UnlitMaterial, FillProperties, LineProperties, PointProperties or texture node </assert>
      <report test="(count(*[contains(local-name(),'Material')]) > 1)"         role="error">&NodeDEFname; contains more than one *Material nodes </report>
      <report test="(count(*[contains(local-name(),'TextureTransform')]) > 1)" role="error">&NodeDEFname; contains more than one *TextureTransform nodes </report>
      <report test="(count(*[contains(local-name(),'Texture') and not(contains(local-name(),'TextureTransform'))]) > 1)" role="error">&NodeDEFname; contains more than one *Texture nodes </report>
      <report test="(count(*[contains(local-name(),'Material')][@containerField = 'material']) > 1)" role="error">&NodeDEFname; contains more than one *Material nodes having containerField='<value-of select='@containerField'/>' </report>
      <report test="(count(*[contains(local-name(),'Material')][@containerField = 'backMaterial']) > 1)" role="error">&NodeDEFname; contains more than one *Material nodes having containerField='<value-of select='@containerField'/>' </report>
      <report test="(count(*[contains(local-name(),'Material')][not(ends-with(@containerField, 'aterial'))]) > 1)" role="error">&NodeDEFname; contains <value-of select='local-name()'/> node with illegal containerField='<value-of select='@containerField'/>' </report>
      <report test="(count(AcousticProperties) > 1)" role="error">&NodeDEFname; contains more than one AcousticProperties nodes </report>
      <report test="(count(FillProperties)     > 1)" role="error">&NodeDEFname; contains more than one FillProperties nodes </report>
      <report test="(count(LineProperties)     > 1)" role="error">&NodeDEFname; contains more than one LineProperties nodes </report>
      <report test="(count(PointProperties)    > 1)" role="error">&NodeDEFname; contains more than one PointProperties nodes </report>
    </rule>

    <!-- ========= abstract: materialNode ========== -->
    <rule id="materialNode" abstract="true">
      <let name="diffuseColor"                     value="concat(' ',normalize-space(translate(@diffuseColor, ',',' ')))"/>
      <let name="diffuseColorCount"                value="string-length($diffuseColor)              - string-length(translate($diffuseColor,  ' ',''))"/>
      <let name="emissiveColor"                    value="concat(' ',normalize-space(translate(@emissiveColor, ',',' ')))"/>
      <let name="emissiveColorCount"               value="string-length($emissiveColor)              - string-length(translate($emissiveColor,  ' ',''))"/>
      <let name="specularColor"                    value="concat(' ',normalize-space(translate(@specularColor, ',',' ')))"/>
      <let name="specularColorCount"               value="string-length($specularColor)              - string-length(translate($specularColor,  ' ',''))"/>
      <extends rule="DEFtests"/>
      <report test="contains($diffuseColor,'-')"  role="warning">&NodeDEFname; diffuseColor='<value-of select='@diffuseColor'/>' contains a negative value </report>
      <!-- Check range of element values [0,1].  The following test does not catch values between 1.0 and 1.1 -->
      <report test="(contains($diffuseColor,' 2') or contains($diffuseColor,' 3') or contains($diffuseColor,' 4') or contains($diffuseColor,' 5') or contains($diffuseColor,' 6') or contains($diffuseColor,' 7') or contains($diffuseColor,' 8') or contains($diffuseColor,' 9') or contains($diffuseColor,' 1.1') or contains($diffuseColor,' 1.2') or contains($diffuseColor,' 1.3') or contains($diffuseColor,' 1.4') or contains($diffuseColor,' 1.5') or contains($diffuseColor,' 1.6') or contains($diffuseColor,' 1.7') or contains($diffuseColor,' 1.8') or contains($diffuseColor,' 1.9')) and not(contains($diffuseColor,'E-')) and not(contains($diffuseColor,'e-'))"  role="warning">&NodeDEFname; diffuseColor='<value-of select='@diffuseColor'/>' contains a value greater than 1 </report>
      <report test="(string-length(normalize-space($diffuseColor)) > 0) and ($diffuseColorCount != 3)"    role="warning">&NodeDEFname; diffuseColor='<value-of select='@diffuseColor'/>' has <value-of select='($diffuseColorCount)'/> values instead of 3 </report>
      <report test="contains($emissiveColor,'-')"  role="warning">&NodeDEFname; emissiveColor='<value-of select='@emissiveColor'/>' contains a negative value </report>
      <!-- Check range of element values [0,1].  The following test does not catch values between 1.0 and 1.1 -->
      <report test="(contains($emissiveColor,' 2') or contains($emissiveColor,' 3') or contains($emissiveColor,' 4') or contains($emissiveColor,' 5') or contains($emissiveColor,' 6') or contains($emissiveColor,' 7') or contains($emissiveColor,' 8') or contains($emissiveColor,' 9') or contains($emissiveColor,' 1.1') or contains($emissiveColor,' 1.2') or contains($emissiveColor,' 1.3') or contains($emissiveColor,' 1.4') or contains($emissiveColor,' 1.5') or contains($emissiveColor,' 1.6') or contains($emissiveColor,' 1.7') or contains($emissiveColor,' 1.8') or contains($emissiveColor,' 1.9')) and not(contains($emissiveColor,'E-')) and not(contains($emissiveColor,'e-'))"  role="warning">&NodeDEFname; emissiveColor='<value-of select='@emissiveColor'/>' contains a value greater than 1 </report>
      <report test="(string-length(normalize-space($emissiveColor)) > 0) and ($emissiveColorCount != 3)"   role="warning">&NodeDEFname; emissiveColor='<value-of select='@emissiveColor'/>' has <value-of select='($emissiveColorCount)'/> values instead of 3 </report>
      <report test="contains($specularColor,'-')"  role="warning">&NodeDEFname; specularColor='<value-of select='@specularColor'/>' contains a negative value </report>
      <!-- Check range of element values [0,1].  The following test does not catch values between 1.0 and 1.1 -->
      <report test="(contains($specularColor,' 2') or contains($specularColor,' 3') or contains($specularColor,' 4') or contains($specularColor,' 5') or contains($specularColor,' 6') or contains($specularColor,' 7') or contains($specularColor,' 8') or contains($specularColor,' 9') or contains($specularColor,' 1.1') or contains($specularColor,' 1.2') or contains($specularColor,' 1.3') or contains($specularColor,' 1.4') or contains($specularColor,' 1.5') or contains($specularColor,' 1.6') or contains($specularColor,' 1.7') or contains($specularColor,' 1.8') or contains($specularColor,' 1.9')) and not(contains($specularColor,'E-')) and not(contains($specularColor,'e-'))"  role="warning">&NodeDEFname; specularColor='<value-of select='@specularColor'/>' contains a value greater than 1 </report>
      <report test="(string-length(normalize-space($specularColor)) > 0) and ($specularColorCount != 3)"   role="warning">&NodeDEFname; specularColor='<value-of select='@specularColor'/>' has <value-of select='($specularColorCount)'/> values instead of 3 </report>
      <!-- unnecesarily verbose
      <report test="not(@USE)                 and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and (../../Appearance/ImageTexture or ../../Appearance/MovieTexture or ../../Appearance/PixelTexture or ../../Appearance/MultiTexture or ../../Appearance/ProtoInstance)"  role="info">&NodeDEFname; values are overridden by accompanying texture node </report>
      <report test="(string-length(@USE) > 0) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and (../../Appearance/ImageTexture or ../../Appearance/MovieTexture or ../../Appearance/PixelTexture or ../../Appearance/MultiTexture or ../../Appearance/ProtoInstance)"  role="info">&lt;<name/> USE='<value-of select='@USE'/>' values are overridden by accompanying texture node </report>
      -->
    </rule>

    <!-- ========= Material ========== -->
    <rule context="Material">
      <extends rule="materialNode"/>
      <assert test="parent::Appearance | parent::ProtoBody | parent::field | parent::fieldValue | parent::ShadedVolumeStyle" role="error">&NodeDEFname; found outside of a parent Appearance, ProtoBody, field, fieldValue or ShadedVolumeStyle element </assert>
      <!-- matching Material attribute DEF/USE tests? -->
    </rule>

    <!-- ========= TwoSidedMaterial ========== -->
    <rule context="TwoSidedMaterial">
      <extends rule="materialNode"/>
      <extends rule="X3Dversion3.2"/>
      <assert test="parent::Appearance | parent::ProtoBody | parent::field | parent::fieldValue | parent::ShadedVolumeStyle" role="error">&NodeDEFname; found outside of a parent Appearance, ProtoBody, field, fieldValue or ShadedVolumeStyle element </assert>
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Shape'][number(@level) ge 4]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Shape' level='4'/&gt; or &lt;X3D profile='Full'/&gt; </report>
      <!-- matching Material attribute DEF/USE tests? -->
      <!-- back tests -->
      <assert test="(@separateBackColor='true') or
                    ((@backDiffuseColor=''       or @backDiffuseColor ='0.8 0.8 0.8') and
                     (@backEmissiveColor=''      or @backEmissiveColor='0.8 0.8 0.8') and
                     (@backSpecularColor=''      or @backSpecularColor ='0.8 0.8 0.8') and
                     (@backAmbientIntensity=''   or @backAmbientIntensity='0.2') and
                     (@backTransparency=''       or @backTransparency='0.0' or @backTransparency='0') and
                     (@backShininess=''          or @backShininess='0.2'))" role="warning">&NodeDEFname; needs separateBackColor='true' or else the provided backside Material values are ignored </assert>
    </rule>

    <!-- ========= Sensor nodes ========== -->

    <rule id="NeedsInputROUTE" abstract="true">
      <assert test="(@DEF) or (string-length(@USE) > 0) or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect" role="warning">&lt;<name/>/&gt; must have DEF name in order to ROUTE input events </assert>
      <report test="((@DEF) and not(//ROUTE[@toNode=$DEF]) and not((local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect)) and    (contains(local-name(),'Interpolator') or contains(local-name(),'Sequencer'))" role="warning">&NodeDEFname; is missing ROUTE to receive input events, for example &lt;ROUTE fromNode='SomeTimeSensorDEFname' fromField='fraction_changed' toNode='<value-of select='@DEF'/>' toField='set_fraction'/&gt; </report>
      <report test="((@DEF) and not(//ROUTE[@toNode=$DEF]) and not((local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect)) and not(contains(local-name(),'Interpolator') or contains(local-name(),'Sequencer'))" role="warning">&NodeDEFname; is missing ROUTE to receive input events, for example &lt;ROUTE fromNode='SomeProducerDEFname' fromField='somethingElse_changed' toNode='<value-of select='@DEF'/>' toField='set_something'/&gt; </report>
    </rule>

    <rule id="NeedsOutputROUTE" abstract="true">
      <!-- covers CollisionSensor | CylinderSensor | GeoProximitySensor | GeoTouchSensor | LoadSensor | PlaneSensor | ProximitySensor | SphereSensor | TouchSensor | TransformSensor | VisibilitySensor -->
      <!-- TODO some Sensor nodes do not yet have description field https://www.web3d.org/member-only/mantis/view.php?id=667 -->
      <!-- TouchSensor, GeoTouchSensor sometimes used to provide tooltip popup message (similar to HTML title attribute) -->
      <let name="touchSensorNoDEF"          value="contains(local-name(),'TouchSensor') and (not(@DEF) or (string-length(@DEF) = 0))"/>
      <let name="touchSensorHasDescription" value="contains(local-name(),'TouchSensor') and (string-length(@description) > 0)"/>
      <report test="not(contains(local-name(),'TouchSensor')) and not(string-length(@DEF) > 0) and not(string-length(@USE) > 0)" role="warning">&lt;<name/>/&gt; must have DEF name in order to ROUTE output events </report>
      <report test="   (contains(local-name(),'TouchSensor')) and not(string-length(@DEF) > 0) and not(string-length(@USE) > 0) and not(string-length(@description) > 0) and not(IS/connect[@nodeField='description'])" role="warning">&lt;<name/> description='<value-of select='@description'/>'/&gt; must have DEF name in order to ROUTE output events, or a description field as a user tooltip for sibling geometry </report>
      <report test="not(    $touchSensorNoDEF  or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and     contains(local-name(),'Interpolator')"                                           role="warning">&NodeDEFname; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='<value-of select='@DEF'/>' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </report>
      <report test="not(    $touchSensorNoDEF  or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and    (local-name() = 'TimeSensor')"                                                    role="warning">&NodeDEFname; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='<value-of select='@DEF'/>' fromField='fraction_changed' toNode='SomeInterpolatorDEFname' toField='set_fraction'/&gt; </report>
      <report test="not(    $touchSensorNoDEF  or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and     contains(local-name(),'Sensor') and not(local-name() = 'TimeSensor')"            role="warning">&NodeDEFname; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='<value-of select='@DEF'/>' fromField='isActive/isOver/something_changed' toNode='SomeTargetDEFname' toField='set_enabled/set_something'/&gt; </report>
      <report test="not(    $touchSensorNoDEF  or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect) and not(contains(local-name(),'Interpolator')) and not(contains(local-name(),'Sensor'))" role="warning">&NodeDEFname; is missing ROUTE to send output events, for example &lt;ROUTE fromNode='<value-of select='@DEF'/>' fromField='value_changed' toNode='SomeTargetDEFname' toField='set_something'/&gt; </report>
      <!-- essentially same rule follows, but different output message is provided for TouchSensor nodes -->
      <assert test="not($touchSensorNoDEF) or $touchSensorHasDescription or not(@DEF) or //ROUTE[@fromNode=$DEF] or (local-name(..)='field') or (local-name(..)='fieldValue') or IS/connect" role="warning">&NodeDEFname; is missing ROUTE to send output events, or description field as a user tooltip for sibling geometry </assert>
    </rule>

    <!-- ========= BooleanFilter, BooleanTrigger ========== -->
    <rule context="BooleanFilter | BooleanTrigger">
      <extends rule="DEFtests"/>
      <extends rule="NeedsInputROUTE"/>
      <extends rule="NeedsOutputROUTE"/>
    </rule>

    <!-- ========= BooleanToggle ========== -->
    <rule context="BooleanToggle">
      <extends rule="DEFtests"/>
      <extends rule="NeedsInputROUTE"/>
      <extends rule="NeedsOutputROUTE"/>
      <report test="(@toggle='TRUE' )"    role="error">&NodeDEFname; toggle='TRUE' is incorrect, define toggle='true' instead </report>
      <report test="(@toggle='FALSE')"    role="error">&NodeDEFname; toggle='FALSE' is incorrect, define toggle='false' instead </report>
    </rule>

    <!-- ========= ProximitySensor,  VisibilitySensor,  TransformSensor ========== -->
    <rule context="ProximitySensor | VisibilitySensor | TransformSensor">
      <extends rule="DEFtests"/>
      <extends rule="enabledOnTests"/>
      <extends rule="sizeTests"/>
      <extends rule="NeedsOutputROUTE"/>
      <report test="(local-name()='ProximitySensor')  and not(/X3D[(@profile='Interactive') or (@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='EnvironmentalSensor'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='EnvironmentalSensor' level='1'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
      <report test="(local-name()='VisibilitySensor') and not(/X3D[                            (@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='EnvironmentalSensor'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='EnvironmentalSensor' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
      <report test="(local-name()='TransformSensor')  and not(/X3D[                                                      (@profile='Full')] or /X3D/head/component[@name='EnvironmentalSensor'][number(@level) ge 3] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='EnvironmentalSensor' level='3'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= IMPORT ========== -->
    <rule context="IMPORT">
      <let name="nodeName"     value="local-name()"/>
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Networking'][number(@level) ge 3] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Networking' level='3'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= EXPORT ========== -->
    <rule context="EXPORT">
      <let name="nodeName"     value="local-name()"/>
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Networking'][number(@level) ge 3] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Networking' level='3'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= KeySensor | StringSensor ========== -->
    <rule context="KeySensor | StringSensor">
      <extends rule="DEFtests"/>
      <extends rule="enabledOnTests"/>
      <extends rule="NeedsOutputROUTE"/>
      <!-- TODO some Sensor nodes do not yet have description field https://www.web3d.org/member-only/mantis/view.php?id=667 -->
      <!-- <extends rule="descriptionTests"/> -->
    </rule>

    <!-- ========= LoadSensor ========== -->
    <rule context="LoadSensor">
      <extends rule="DEFtests"/>
      <extends rule="enabledOnTests"/>
      <extends rule="NeedsOutputROUTE"/>
      <report test="*[not(@containerField='watchList')][not(starts-with(local-name(),'Metadata'))]" role="error">&NodeDEFname; children must have containerField='watchList' </report>
      <report test="*[not(starts-with(local-name(),'Metadata')) and not(contains(local-name(),'Texture')) and not(contains(local-name(),'Background')) and not(local-name()='Inline') and not(local-name()='AudioClip') and not(local-name()='Script') and not(local-name()='ProtoInstance')]" role="error">&NodeDEFname; children must be X3DUrlObject node(s) </report>
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Networking'][number(@level) ge 3] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Networking' level='3'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
      <!-- X3D4 Field name changes https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#fieldNameChanges -->
      <report test="$isX3D3 and (count(*[not(starts-with(local-name(),'Metadata')) and not(@containerField = 'watchList')]) > 0)" role="error">&NodeDEFname; in X3D version='<value-of select='/X3D/@version'/>' contains child node(s) not having containerField='watchList', which is only allowed value in X3D3 </report>
      <report test="$isX3D4 and (count(*[not(starts-with(local-name(),'Metadata')) and not(@containerField = 'children')]) > 0)"  role="error">&NodeDEFname; in X3D version='<value-of select='/X3D/@version'/>' contains child node(s) not having containerField='children', which is only allowed value in X3D4 </report>
    </rule>

    <!-- TODO Merge first DEF-less rule into second.  Include checks on routing sensor output to set_offset -->

    <rule context="TouchSensor | CylinderSensor | PlaneSensor | SphereSensor">
      <let name="peerTouchSensorNodes"    value="count(preceding-sibling::TouchSensor)    + count(following-sibling::TouchSensor)"/>
      <let name="peerCylinderSensorNodes" value="count(preceding-sibling::CylinderSensor) + count(following-sibling::CylinderSensor)"/>
      <let name="peerPlaneSensorNodes"    value="count(preceding-sibling::PlaneSensor)    + count(following-sibling::PlaneSensor)"/>
      <let name="peerSphereSensorNodes"   value="count(preceding-sibling::SphereSensor)   + count(following-sibling::SphereSensor)"/>
      <let name="peerNodesTotalCount"     value="number($peerTouchSensorNodes + $peerCylinderSensorNodes + $peerPlaneSensorNodes + $peerSphereSensorNodes)"/>
      <extends rule="DefaultSensorNode"/>
  <!--<report test="not(@USE) and true()" role="info">$peerTouchSensorNodes=<value-of select='$peerTouchSensorNodes'/>, $peerCylinderSensorNodes=<value-of select='$peerCylinderSensorNodes'/>, $peerPlaneSensorNodes=<value-of select='$peerPlaneSensorNodes'/>, $peerSphereSensorNodes=<value-of select='$peerSphereSensorNodes'/>, $peerNodesTotalCount=<value-of select='$peerNodesTotalCount'/> </report> -->
      <!-- axisRotation is for CylinderSensor | PlaneSensor only; other uses are invalid -->
      <report test="starts-with(normalize-space(@axisRotation),'0 0 0 ') or starts-with(normalize-space(@axisRotation),'0.0 0.0 0.0 ')" role="error">&NodeDEFname; axisRotation='<value-of select='@axisRotation'/>' has illegal zero-magnitude axis values (can omit if expecting default value) </report>
      <!-- detect if peer sensors are interfering (and potentially interfering) with each other -->
      <report test="../Billboard" role="warning">&NodeDEFname; has peer Billboard node which may make user selection of geometry difficult, consider superimposing additional transparent Shape geometry to assist selection </report>
      <report test="($peerNodesTotalCount > 0)" role="warning">&NodeDEFname; has peer pointing-device sensor nodes which may make which selection of geometry difficult </report>
    </rule>

    <rule id="DefaultSensorNode" abstract="true">
      <extends rule="DEFtests"/>
      <extends rule="enabledOnTests"/>
      <extends rule="NoChildNode"/>
      <extends rule="NeedsOutputROUTE"/>
      <!-- Not all Sensor nodes include a description field, X3D v3.3 Specification change proposed. The following rule checks for proper node types. -->
      <extends rule="descriptionTests"/>
      <report test="(@cycleInterval='0') or (@cycleInterval='0.0') or (contains(@cycleInterval,'-') and not(contains(@cycleInterval,'E-')))" role="warning">&lt;<name/>/&NodeDEFname; cycleInterval must be greater than 0 </report>
      <report test="(@autoOffset='TRUE' )" role="error">&NodeDEFname; autoOffset='TRUE' capitalization is incorrect, define as autoOffset='true' instead </report>
      <report test="(@autoOffset='FALSE')" role="error">&NodeDEFname; autoOffset='FALSE' capitalization is incorrect, define as autoOffset='false' instead </report>
      <report test="(@loop='TRUE' )" role="error">&NodeDEFname; loop='TRUE' capitalization is incorrect, define as loop='true' instead </report>
      <report test="(@loop='FALSE')" role="error">&NodeDEFname; loop='FALSE' capitalization is incorrect, define as loop='false' instead </report>
    </rule>

    <!-- ========= TimeSensor ========== -->
    <rule context="TimeSensor">
      <extends rule="DefaultSensorNode"/>
		<!-- TODO TimeSensor tests:
		- timing relationships, values
		- do not IS/connect set_startTime set_cycleInterval or related/munged field names, they can cause big problems
		-->
    </rule>

    <!-- ========= Trigger nodes ========== -->
    <rule context="IntegerTrigger | TimeTrigger">
      <extends rule="DEFtests"/>
      <extends rule="NoChildNode"/>
      <extends rule="NeedsInputROUTE"/>
      <extends rule="NeedsOutputROUTE"/>
    </rule>

    <!-- ========= Interpolator nodes ========== -->

    <rule id="InterpolatorNode" abstract="true">
      <let name="key"             value="normalize-space(translate(@key,     ',',' '))"/>
      <let name="keyValue"        value="concat(' ',normalize-space(translate(@keyValue,',',' ')))"/>
      <let name="keyCount"        value="string-length($key)      - string-length(translate($key,     ' ','')) + 1"/>
      <let name="keyValueCount"   value="string-length($keyValue) - string-length(translate($keyValue,' ',''))"/>
      <let name="keyResidue"      value="translate($key,     '+-0123456789Ee., ','')"/>
      <let name="keyValueResidue" value="translate(normalize-space($keyValue),'+-0123456789Ee., ','')"/>
      <extends rule="DEFtests"/>
      <extends rule="NoChildNode"/>
      <extends rule="NeedsInputROUTE"/>
      <extends rule="NeedsOutputROUTE"/>
      <assert test="(string-length(normalize-space($key))      > 0) or (@USE) or (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='key'])"      role="error">&NodeDEFname; missing key array </assert>
      <assert test="(string-length(normalize-space($keyValue)) > 0) or (@USE) or (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='keyValue'])" role="error">&NodeDEFname; missing keyValue array </assert>
      <report test="(string-length($key) > 0) and not($keyCount >= 2)" role="error">&NodeDEFname; key array length <value-of select='$keyCount'/> (and corresponding keyValue array length) needs to be 2 or greater </report>
      <assert test="string-length($keyResidue)      = 0"               role="error">&NodeDEFname; has illegal character <value-of select='$keyResidue'/> in key array </assert>
      <assert test="string-length($keyValueResidue) = 0"               role="error">&NodeDEFname; has illegal character <value-of select='$keyValueResidue'/> in keyValue array </assert>
    </rule>

    <rule context="ScalarInterpolator">
      <extends rule="InterpolatorNode"/>
      <assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or $keyCount=$keyValueCount" role="error">&NodeDEFname; key array (size=<value-of select="$keyCount"/>) must match keyValue array (size=<value-of select="$keyValueCount"/> values) </assert>
    </rule>
    <rule context="PositionInterpolator2D">
      <extends rule="InterpolatorNode"/>
      <assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or (2 * $keyCount)=$keyValueCount" role="error">&NodeDEFname; key array (size=<value-of select="$keyCount"/>) must match keyValue array (size=<value-of select="$keyValueCount div 2"/> sets of 2-tuple values) </assert>
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Interpolation'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Interpolation' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>
    <rule context="ColorInterpolator">
      <extends rule="InterpolatorNode"/>
      <!-- check for legal color values -->
      <report test="contains($keyValue,'-')"  role="warning">&NodeDEFname; contains a negative color array value, keyValue='<value-of select='@keyValue'/>' </report>
      <!-- Check range of element values [0,1].  The following test does not catch values between 1.0 and 1.1 -->
      <report test="(contains($keyValue,' 2') or contains($keyValue,' 3') or contains($keyValue,' 4') or contains($keyValue,' 5') or contains($keyValue,' 6') or contains($keyValue,' 7') or contains($keyValue,' 8') or contains($keyValue,' 9') or contains($keyValue,' 1.1') or contains($keyValue,' 1.2') or contains($keyValue,' 1.3') or contains($keyValue,' 1.4') or contains($keyValue,' 1.5') or contains($keyValue,' 1.6') or contains($keyValue,' 1.7') or contains($keyValue,' 1.8') or contains($keyValue,' 1.9')) and not(contains($keyValue,'E-')) and not(contains($keyValue,'e-'))"  role="warning">&NodeDEFname; contains a color array value greater than 1, keyValue='<value-of select='@keyValue'/>' </report>
      <assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or (3 * $keyCount)=$keyValueCount" role="error">&NodeDEFname; key array (size=<value-of select="$keyCount"/>) must match keyValue array (size=<value-of select="$keyValueCount div 3"/> sets of 3-tuple values) </assert>
    </rule>
    <rule context="NormalInterpolator">
      <extends rule="InterpolatorNode"/>
      <assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or round($keyValueCount div $keyCount)=($keyValueCount div $keyCount)" role="error">&NodeDEFname; key array (size=<value-of select="$keyCount"/>) does not evenly divide keyValue array (size=<value-of select="$keyValueCount div 3"/> sets of 3-tuple values) </assert>
      <!-- TODO check for legal normal values -->
    </rule>
    <rule context="PositionInterpolator">
      <extends rule="InterpolatorNode"/>
      <assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or (3 * $keyCount)=$keyValueCount" role="error">&NodeDEFname; key array (size=<value-of select="$keyCount"/>) must match keyValue array (size=<value-of select="$keyValueCount div 3"/> sets of 3-tuple values) </assert>
    </rule>
    <rule context="OrientationInterpolator">
      <extends rule="InterpolatorNode"/>
      <assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or (4 * $keyCount)=$keyValueCount" role="error">&NodeDEFname; key array (size=<value-of select="$keyCount"/>) must match keyValue array (size=<value-of select="$keyValueCount div 4"/> sets of 4-tuple values) </assert>
      <!-- TODO check for legal axis values, i.e. not 0 0 0 -->
    </rule>
    <rule context="CoordinateInterpolator">
      <extends rule="InterpolatorNode"/>
      <assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or round($keyValueCount div $keyCount)=($keyValueCount div $keyCount)" role="error">&NodeDEFname; key array (size=<value-of select="$keyCount"/>) does not evenly divide keyValue array (size=<value-of select="$keyValueCount"/> values) </assert>
    </rule>
    <rule context="CoordinateInterpolator2D">
      <extends rule="InterpolatorNode"/>
      <assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or round($keyValueCount div $keyCount div 2)=($keyValueCount div $keyCount div 2)" role="error">&NodeDEFname; key array (size=<value-of select="$keyCount"/>) does not evenly divide keyValue array (size=<value-of select="$keyValueCount div 2"/> sets of 2-tuple values) </assert>
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Interpolation'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Interpolation' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>
    <rule context="SplineScalarInterpolator">
      <extends rule="InterpolatorNode"/>
      <assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or $keyCount=$keyValueCount" role="error">&NodeDEFname; key array (size=<value-of select="$keyCount"/>) must match keyValue array (size=<value-of select="$keyValueCount"/> values) </assert>
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Interpolation'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Interpolation' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>
    <rule context="SplinePositionInterpolator2D">
      <extends rule="InterpolatorNode"/>
      <assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or round($keyValueCount div $keyCount div 2)=($keyValueCount div $keyCount div 2)" role="error">&NodeDEFname; key array (size=<value-of select="$keyCount"/>) does not evenly divide keyValue array (size=<value-of select="$keyValueCount div 2"/> sets of 2-tuple values) </assert>
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Interpolation'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Interpolation' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>
    <rule context="SplinePositionInterpolator">
      <extends rule="InterpolatorNode"/>
      <assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or (3 * $keyCount)=$keyValueCount" role="error">&NodeDEFname; key array (size=<value-of select="$keyCount"/>) must match keyValue array (size=<value-of select="$keyValueCount div 3"/> sets of 3-tuple values) </assert>
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Interpolation'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Interpolation' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>
    <rule context="SquadOrientationInterpolator">
      <extends rule="InterpolatorNode"/>
      <assert test="(@USE) or (IS) or (parent::field) or ((string-length($key) = 0) and (string-length($keyValue) = 0)) or (4 * $keyCount)=$keyValueCount" role="error">&NodeDEFname; key array (size=<value-of select="$keyCount"/>) must match keyValue array (size=<value-of select="$keyValueCount div 4"/> sets of 4-tuple values) </assert>
      <!-- TODO check for legal axis values, i.e. not 0 0 0 -->
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Interpolation'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Interpolation' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>

    <rule context="EaseInEaseOut">
		<!-- TODO verify easeInEaseOut rules -->
      <let name="key"                  value="normalize-space(translate(@key,     ',',' '))"/>
      <let name="easeInEaseOut"        value="concat(' ',normalize-space(translate(@easeInEaseOut,',',' ')))"/>
      <let name="keyCount"             value="string-length($key)      - string-length(translate($key,     ' ','')) + 1"/>
      <let name="easeInEaseOutCount"   value="string-length($easeInEaseOut) - string-length(translate($easeInEaseOut,' ',''))"/>
      <let name="keyResidue"           value="translate($key,     '+-0123456789Ee., ','')"/>
      <let name="easeInEaseOutResidue" value="translate(normalize-space($easeInEaseOut),'+-0123456789Ee., ','')"/>
      <extends rule="DEFtests"/>
      <extends rule="NoChildNode"/>
      <extends rule="NeedsInputROUTE"/>
      <extends rule="NeedsOutputROUTE"/>
      <assert test="(string-length(normalize-space($key))      > 0)      or (@USE) or (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='key'])"           role="error">&NodeDEFname; missing key array </assert>
      <assert test="(string-length(normalize-space($easeInEaseOut)) > 0) or (@USE) or (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='easeInEaseOut'])" role="error">&NodeDEFname; missing easeInEaseOut array </assert>
      <report test="(string-length($key) > 0) and not($keyCount >= 2)" role="error">&NodeDEFname; key array length <value-of select='$keyCount'/> (and corresponding easeInEaseOut array length) needs to be 2 or greater </report>
      <assert test="string-length($keyResidue)      = 0"               role="error">&NodeDEFname; has illegal character <value-of select='$keyResidue'/> in key array </assert>
      <assert test="string-length($easeInEaseOutResidue) = 0"          role="error">&NodeDEFname; has illegal character <value-of select='$easeInEaseOutResidue'/> in easeInEaseOut array </assert>
    </rule>
	
    <!-- TODO handle other cases for the above nodes? -->

    <!-- ========= Sequencer nodes ========== -->

    <rule id="SequencerNode" abstract="true">
      <let name="key"             value="normalize-space(translate(@key,',',' '))"/>
      <let name="keyValue"        value="normalize-space(translate(@keyValue,',',' '))"/>
      <let name="keyCount"        value="string-length($key)      - string-length(translate($key,' ',''))      + 1"/>
      <let name="keyValueCount"   value="string-length($keyValue) - string-length(translate($keyValue,' ','')) + 1"/>
      <let name="keyResidue"      value="translate($key,     '+-0123456789Ee., ','')"/>
      <let name="keyValueResidueBoolean" value="translate(normalize-space($keyValue),'truefalse, ','')"/>
      <let name="keyValueResidueInteger" value="translate(normalize-space($keyValue),'+-0123456789Ee, ','')"/>
      <extends rule="DEFtests"/>
      <extends rule="NoChildNode"/>
      <extends rule="NeedsInputROUTE"/>
      <extends rule="NeedsOutputROUTE"/>
      <assert test="$key      and not($key=' ')      and not (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='key'])"      role="error">&NodeDEFname; missing key array </assert>
      <assert test="$keyValue and not($keyValue=' ') and not (//Script/field/*[@DEF=$USE]) or (IS/connect[@nodeField='keyValue'])" role="error">&NodeDEFname; missing keyValue array </assert>
      <report test="(string-length($key) > 0) and not($keyCount >= 2)" role="error">&NodeDEFname; key array length <value-of select='$keyCount'/> (and corresponding keyValue array length) needs to be 2 or greater </report>
      <!-- both BooleanSequencer and IntegerSequencer have singleton keyValue array types -->
      <assert test="((string-length($key) = 0) and (string-length($keyValue) = 0)) or $keyCount=$keyValueCount" role="error">&NodeDEFname; key array (size=<value-of select="$keyCount"/>) must match keyValue array (size=<value-of select="$keyValueCount"/>) </assert>
    </rule>

    <rule context="BooleanSequencer">
      <extends rule="SequencerNode"/>
      <assert test="string-length($keyResidue)             = 0" role="error">&NodeDEFname; includes illegal character <value-of select='$keyResidue'     /> in key array </assert>
      <assert test="string-length($keyValueResidueBoolean) = 0" role="error">&NodeDEFname; includes illegal character <value-of select='$keyValueResidueBoolean'/> in keyValue array </assert>
      <report test="contains(keyValue,'TRUE' )"    role="error">&NodeDEFname; keyValue 'TRUE' values are incorrect, use 'true' instead </report>
      <report test="contains(keyValue,'FALSE')"    role="error">&NodeDEFname; keyValue 'FALSE' values are incorrect, use 'false' instead </report>
   </rule>

    <rule context="IntegerSequencer">
      <extends rule="SequencerNode"/>
      <assert test="string-length($keyResidue)             = 0" role="error">&NodeDEFname; includes illegal character <value-of select='$keyResidue'     /> in key array </assert>
      <assert test="string-length($keyValueResidueInteger) = 0" role="error">&NodeDEFname; includes illegal character <value-of select='$keyValueResidueInteger'/> in keyValue array </assert>
   </rule>

    <!-- ========= field element ========== -->
    <rule context="field | *[(lower-case(local-name()) = 'field')]">
      <let name="parentName" value="local-name(..)"/>
      <let name="fieldName" value="@name"/>
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="true()"/>
      <let name="value"     value="normalize-space(translate(@value,',',' '))"/>
      <let name="hasIS" value="boolean(../IS/connect[@nodeField = $fieldName])"/>
      <let name="valueRequired" value="(@accessType='initializeOnly' or @accessType='inputOutput') and not(@type='SFNode') and not(@type='SFString') and not(starts-with(@type,'MF')) and not($hasIS) and not(local-name(..)='ExternProtoDeclare')"/>
      <let name="MFBoolValueResidue"  value="translate($value,'truefalse, ','')"/>
      <let name="IntegerValueResidue" value="translate($value,'0123456789+-Ee, ','')"/>
      <let name="FloatValueResidue"   value="translate($value,'0123456789.+-Ee, ','')"/>
      <let name="ImageValueResidue"   value="translate($value,'0123456789+-Ee, 0xABCDEFabcdef','')"/>
      <let name="embeddedWhiteSpaceCount" value="string-length($value) - string-length(translate($value,' ',''))"/>
      <let name="embeddedPeriodCount"     value="string-length(@value) - string-length(translate(@value,'.',''))"/>
      <let name="embeddedCommaCount"      value="string-length(@value) - string-length(translate(@value,',',''))"/>
      <let name="tupleCount2"             value="(($embeddedWhiteSpaceCount + 1) div  2)"/>
      <let name="tupleCount3"             value="(($embeddedWhiteSpaceCount + 1) div  3)"/>
      <let name="tupleCount4"             value="(($embeddedWhiteSpaceCount + 1) div  4)"/>
      <let name="tupleCount9"             value="(($embeddedWhiteSpaceCount + 1) div  9)"/>
      <let name="tupleCount16"            value="(($embeddedWhiteSpaceCount + 1) div 16)"/>
      <let name="CDATAblock" value="normalize-space(..)"/>
      <let name="stringResidueApos" value="translate(@value,' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@#$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;','')"/>
      <let name="stringResidue" value='translate($stringResidueApos,"&apos;","")'/>
      <let name="quoteCount" value="string-length($stringResidue)"/>
      <extends rule="noDEF"/>
      <extends rule="fieldNameNotReservedWord"/>
      <!-- debug
      <report test="not(@USE) and true()" role="diagnostic">$parentName=<value-of select='$parentName'/>, $fieldName=<value-of select='$fieldName'/>, @type=<value-of select='@type'/>, @accessType=<value-of select='@accessType'/> </report>
      <report test="not(@USE) and true()" role="diagnostic">  $value=<value-of select='$value'/>, $embeddedWhiteSpaceCount=<value-of select='$embeddedWhiteSpaceCount'/>, $embeddedCommaCount=<value-of select='$embeddedCommaCount'/>, $tupleCount2=<value-of select='$tupleCount2'/>, $tupleCount3=<value-of select='$tupleCount3'/>, $tupleCount4=<value-of select='$tupleCount4'/>, $tupleCount9=<value-of select='$tupleCount9'/>, $tupleCount16=<value-of select='$tupleCount16'/> </report>
      <report test="not(@USE) and true()" role="diagnostic">  $valueRequired=<value-of select='$valueRequired'/>, $hasIS=<value-of select='$hasIS'/> </report>
      -->
      <report test="(local-name() != 'field')" role="error">&lt;<value-of select='local-name()'/>&gt; element capitalization must be lower-case &lt;field&gt; for proper validation </report>
      <assert test="@name"       role="error">&lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>' name='<value-of select='../@name'/>'> &lt;<name/> type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>'/&gt; field must have name defined </assert>
      <report test="not(@type)       and not(local-name(..)='ProtoInstance')" role="error">&lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>' name='<value-of select='../@name'/>'> &lt;<name/> name='<value-of select='@name'/>'/&gt; field must have type defined </report>
      <report test="not(@accessType) and not(local-name(..)='ProtoInstance')" role="error">&lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>' name='<value-of select='../@name'/>'> &lt;<name/> name='<value-of select='@name'/>'/&gt; field must have accessType defined </report>
      <!-- do not initialize fields which have IS/connect, results undefined: 4.4.4.3 PROTO definition semantics -->
      <report test="(string-length($value) > 0) and $hasIS" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; field initialization not allowed when IS/connect is also defined </report>
      <!-- test for duplicate definition -->
      <report test="(count(preceding-sibling::*[@name=$fieldName])!=0) and (local-name(..)='Script')"             role="error">&lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>'&gt; has duplicate field declarations with the same name defined &lt;<name/> name='<value-of select='@name'/>'/&gt; </report>
      <report test="(count(preceding-sibling::*[@name=$fieldName])!=0) and (local-name(..)='ExternProtoDeclare')" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>'&gt; has duplicate field declarations with the same name defined &lt;<name/> name='<value-of select='@name'/>'/&gt; </report>
      <report test="(count(preceding-sibling::*[@name=$fieldName])!=0) and (local-name(../..)='ProtoDeclare')"    role="error">&lt;<value-of select='local-name(../..)'/> name='<value-of select='../../@name'/>'&gt; has duplicate field declarations with the same name defined &lt;<name/> name='<value-of select='@name'/>'/&gt; </report>
      <!-- check accessType initializations -->
      <!-- check for initialization values/nodes present.  note SFNode can have value='NULL' -->
      <report test="(@type='SFBool') and $valueRequired and not(local-name(..)='ExternProtoDeclare') and not(@value='true' or @value='false')" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; SFBool field must have value='true' or value='false' </report>
      <report test="not(@type='SFBool') and $valueRequired and not(local-name(..)='ExternProtoDeclare') and not(@value)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; field declaration is missing initialization value </report>
      <!-- check for proper characters in initialization values -->
      <report test="(local-name(..)='ExternProtoDeclare') and (string-length(@value) gt 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; cannot be initialized inside ExternProtoDeclare </report>
      <report test="(@type='MFBool') and (string-length($MFBoolValueResidue) gt 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; MFBool field must only include values of true or false </report>
      <!-- TODO are hex values allowed for integers and floats? -->
      <report test="contains(@type,'FInt32') and $valueRequired and (string-length($IntegerValueResidue) gt 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has illegal characters in value: <value-of select='$IntegerValueResidue'/> </report>
      <report test="(contains(@type,'Float') or contains(@type,'Rotation') or contains(@type,'FVec') or contains(@type,'Color') or contains(@type,'Time') or contains(@type,'Matrix')) and $valueRequired and (string-length($FloatValueResidue) gt 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has illegal characters in value: <value-of select='$FloatValueResidue'/> </report>
      <report test="contains(@type,'Image') and $valueRequired and (string-length($ImageValueResidue) gt 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>'> DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has illegal characters in value: <value-of select='$ImageValueResidue'/> </report>
      <!-- check for proper number of initialization values.  whitespace includes commas. -->
      <!-- array tuple counts -->
      <report test="(string-length($value) > 0) and ((@type='SFBool')     or (@type='SFInt32') or (@type='SFFloat') or (@type='SFDouble') or (@type='SFTime')) and ($embeddedWhiteSpaceCount!=0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has illegal number of values (<value-of select='$embeddedWhiteSpaceCount + 1'/>) for type <value-of select='@type'/> </report>
      <report test="(string-length($value) > 0) and ((@type='SFVec2f')    or (@type='SFVec2d')) and ($embeddedWhiteSpaceCount!=1)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has illegal number of values (<value-of select='$embeddedWhiteSpaceCount + 1'/>) for 2-tuple type <value-of select='@type'/> </report>
      <report test="(string-length($value) > 0) and ((@type='SFVec3f')    or (@type='SFVec3d') or (@type='SFColor')) and ($embeddedWhiteSpaceCount!=2)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has illegal number of values (<value-of select='$embeddedWhiteSpaceCount + 1'/>) for 3-tuple type <value-of select='@type'/> </report>
      <report test="(string-length($value) > 0) and ((@type='SFVec4f')    or (@type='SFVec4d') or (@type='SFRotation') or (@type='SFColorRGBA')) and ($embeddedWhiteSpaceCount!=3)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has illegal number of values (<value-of select='$embeddedWhiteSpaceCount + 1'/>) for 4-tuple type <value-of select='@type'/> </report>
      <report test="(string-length($value) > 0) and ((@type='SFMatrix3f') or (@type='SFMatrix3d')) and ($embeddedWhiteSpaceCount!=8)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has illegal number of values (<value-of select='$embeddedWhiteSpaceCount + 1'/>) for 9-tuple type <value-of select='@type'/> </report>
      <report test="(string-length($value) > 0) and ((@type='SFMatrix4f') or (@type='SFMatrix4d')) and ($embeddedWhiteSpaceCount!=15)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has illegal number of values (<value-of select='$embeddedWhiteSpaceCount + 1'/>) for 16-tuple type <value-of select='@type'/> </report>
      <report test="(string-length($value) > 0) and ((@type='MFVec2f')    or (@type='MFVec2d')) and ((($embeddedWhiteSpaceCount + 1) mod 2) != 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has illegal number of values (<value-of select='(($embeddedWhiteSpaceCount + 1) div 2)'/>) for array of singleton SF values found in this 2-tuple type <value-of select='@type'/> </report>
      <report test="(string-length($value) > 0) and ((@type='MFVec3f')    or (@type='MFVec3d') or (@type='MFColor')) and ((($embeddedWhiteSpaceCount + 1) mod 3) != 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has illegal number of values (<value-of select='(($embeddedWhiteSpaceCount + 1) div 3)'/>) for array of singleton SF values found in this 3-tuple type <value-of select='@type'/> </report>
      <report test="(string-length($value) > 0) and ((@type='MFVec4f')    or (@type='MFVec4d') or (@type='MFRotation') or (@type='MFColorRGBA')) and ((($embeddedWhiteSpaceCount + 1) mod 4) != 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has illegal number of values (<value-of select='(($embeddedWhiteSpaceCount + 1) div 4)'/>'/>) for array of singleton SF values found in this 4-tuple type <value-of select='@type'/> </report>
      <report test="(string-length($value) > 0) and ((@type='MFMatrix3f') or (@type='SFMatrix3d')) and ((($embeddedWhiteSpaceCount + 1) mod 9) != 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has illegal number of values (<value-of select='(($embeddedWhiteSpaceCount + 1) div 9)'/>) for array of singleton SF values found in this 9-tuple type <value-of select='@type'/> </report>
      <report test="(string-length($value) > 0) and ((@type='MFMatrix4f') or (@type='MFMatrix4d')) and ((($embeddedWhiteSpaceCount + 1) mod 16) != 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has illegal number of values (<value-of select='(($embeddedWhiteSpaceCount + 1) div 16)'/>'/>) for array of singleton SF values found in this 16-tuple type <value-of select='@type'/> </report>
      <!-- comma counts warning -->
      <report test="(string-length($value) > 0) and ((@type='SFBool')     or (@type='SFInt32') or (@type='SFFloat') or (@type='SFDouble') or (@type='SFTime')) and ($embeddedCommaCount!=0)" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; has unexpected number of commas (<value-of select='$embeddedCommaCount'/>) for type <value-of select='@type'/>. Avoid including commas with singleton values. </report>
      <report test="(string-length($value) > 0) and ((@type='SFVec2f')    or (@type='SFVec2d')) and ($embeddedCommaCount!=0)" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; has unexpected number of commas (<value-of select='$embeddedCommaCount'/>) for 2-tuple type <value-of select='@type'/>. Avoid including commas within singleton values. </report>
      <report test="(string-length($value) > 0) and ((@type='SFVec3f')    or (@type='SFVec3d') or (@type='SFColor')) and ($embeddedCommaCount!=0)" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; has unexpected number of commas (<value-of select='$embeddedCommaCount'/>) for 3-tuple type <value-of select='@type'/>. Avoid including commas within singleton values. </report>
      <report test="(string-length($value) > 0) and ((@type='SFVec4f')    or (@type='SFVec4d') or (@type='SFRotation') or (@type='SFColorRGBA')) and ($embeddedCommaCount!=0)" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; has unexpected number of commas (<value-of select='$embeddedCommaCount'/>) for 4-tuple type <value-of select='@type'/>. Avoid including commas within singleton values. </report>
      <report test="(string-length($value) > 0) and ((@type='SFMatrix3f') or (@type='SFMatrix3d')) and ($embeddedCommaCount!=0)" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; has unexpected number of commas (<value-of select='$embeddedCommaCount'/>) for 9-tuple type <value-of select='@type'/>. Avoid including commas within singleton values. </report>
      <report test="(string-length($value) > 0) and ((@type='SFMatrix4f') or (@type='SFMatrix4d')) and ($embeddedCommaCount!=0)" role="awrning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; has unexpected number of commas (<value-of select='$embeddedCommaCount'/>) for 16-tuple type <value-of select='@type'/>. Avoid including commas within singleton values. </report>
      <report test="(string-length($value) > 0) and ((@type='MFVec2f')    or (@type='MFVec2d')) and ($embeddedCommaCount!=0) and ($embeddedCommaCount!=($tupleCount2 - 1))" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; has unexpected number of commas (expected zero or <value-of select='($tupleCount2 - 1)'/>, found <value-of select='$embeddedCommaCount'/>) for <value-of select='$tupleCount2'/> singleton values found in this 2-tuple type <value-of select='@type'/>. Avoid including commas within individual SF single-field values that make up n-tuple MF multiple-field arrays. </report>
      <report test="(string-length($value) > 0) and ((@type='MFVec3f')    or (@type='MFVec3d') or (@type='MFColor')) and ($embeddedCommaCount!=0) and ($embeddedCommaCount!=($tupleCount3 - 1))" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; has unexpected number of commas (expected zero or <value-of select='($tupleCount3 - 1)'/>, found <value-of select='$embeddedCommaCount'/>) for <value-of select='$tupleCount3'/> singleton values found in this 3-tuple type <value-of select='@type'/>. Avoid including commas within individual SF single-field values that make up n-tuple MF multiple-field arrays. </report>
      <report test="(string-length($value) > 0) and ((@type='MFVec4f')    or (@type='MFVec4d') or (@type='MFRotation') or (@type='MFColorRGBA')) and ($embeddedCommaCount!=0) and ($embeddedCommaCount!=($tupleCount4 - 1))" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; has unexpected number of commas (expected zero or <value-of select='($tupleCount4 - 1)'/>, found <value-of select='$embeddedCommaCount'/>) for <value-of select='$tupleCount4'/> singleton values found in this 4-tuple type <value-of select='@type'/>. Avoid including commas within individual SF single-field values that make up n-tuple MF multiple-field arrays. </report>
      <report test="(string-length($value) > 0) and ((@type='MFMatrix3f') or (@type='SFMatrix3d')) and ($embeddedCommaCount!=0) and ($embeddedCommaCount!=($tupleCount9 - 1))" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has unexpected number of commas (expected zero or <value-of select='($tupleCount9 - 1)'/>, found <value-of select='$embeddedCommaCount'/>) for <value-of select='$tupleCount9'/> singleton values found in this 9-tuple type <value-of select='@type'/>. Avoid including commas within individual SF single-field values that make up n-tuple MF multiple-field arrays. </report>
      <report test="(string-length($value) > 0) and ((@type='MFMatrix4f') or (@type='MFMatrix4d')) and ($embeddedCommaCount!=0) and ($embeddedCommaCount!=($tupleCount16 - 1))" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; has unexpected number of commas (expected zero or <value-of select='($tupleCount2 - 1)'/>, found <value-of select='$embeddedCommaCount'/>) for <value-of select='$tupleCount16'/> singleton values found in this 16-tuple type <value-of select='@type'/>. Avoid including commas within individual SF single-field values that make up n-tuple MF multiple-field arrays. </report>
      <!-- TODO even-tuple counting checks -->
      <!-- other counting checks -->
      <report test="(string-length($value) > 0) and (@type='MFString') and not(starts-with(@value,'&quot;')) and not(ends-with(@value,'&quot;'))" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' value='<value-of select='@value'/>'/&gt; must begin and end with &quot;quote marks&quot; &quot;for each contained string&quot; </report>
      <report test="(string-length($value) > 0) and ($embeddedPeriodCount > $embeddedWhiteSpaceCount + 1) and not(contains(@type,'FString'))" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; has excess number of periods (<value-of select='$embeddedPeriodCount'/>) compared to whitespace-separated values <value-of select='($embeddedWhiteSpaceCount + 1)'/> </report>
      <!-- check for function definitions and assignments -->
      <!-- <report test="parent::Script" role='diagnostic'>$CDATAblock=<value-of select='$CDATAblock'/> </report> -->
      <report test="parent::Script and not(../@url) and  (@accessType='inputOnly')    and not(contains($CDATAblock,concat('function ',    @name))) and (../IS/connect/@nodeField != @name)"            role="error">&lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' accessType='<value-of select='@accessType'/>'/&gt; must define function <value-of select='@name'/> (newValue) </report>
      <report test="parent::Script and not(../@url) and  (@accessType='inputOutput')  and not(contains($CDATAblock,concat('function set_',@name))) and (../IS/connect/@nodeField != @name)"            role="error">&lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' accessType='<value-of select='@accessType'/>'/&gt; must define function set_<value-of select='@name'/> (newValue) </report>
      <report test="parent::Script and not(../@url) and  (@accessType='inputOnly')    and     contains(substring-after($CDATAblock,concat('function ',@name)),    concat('function ',@name, '('))"     role="error">&lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' accessType='<value-of select='@accessType'/>'/&gt; function <value-of select='@name'/>() defined more than once </report>
      <report test="parent::Script and not(../@url) and  (@accessType='inputOnly')    and     contains(substring-after($CDATAblock,concat('function ',@name)),    concat('function ',@name,' ('))"     role="error">&lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' accessType='<value-of select='@accessType'/>'/&gt; function <value-of select='@name'/>() defined more than once </report>
      <report test="parent::Script and not(../@url) and  (@accessType='inputOutput')  and     contains(substring-after($CDATAblock,concat('function set_',@name)),concat('function set_',@name, '('))" role="error">&lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' accessType='<value-of select='@accessType'/>'/&gt; function set_<value-of select='@name'/>() defined more than once </report>
      <report test="parent::Script and not(../@url) and  (@accessType='inputOutput')  and     contains(substring-after($CDATAblock,concat('function set_',@name)),concat('function set_',@name,' ('))" role="error">&lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' accessType='<value-of select='@accessType'/>'/&gt; function set_<value-of select='@name'/>() defined more than once </report>
      <report test="parent::Script and not(../@url) and ((@accessType='initializeOnly') or (@accessType='outputOnly'))  and     contains($CDATAblock,concat('function ',@name))"  role="error">&lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' accessType='<value-of select='@accessType'/>'/&gt; cannot define function <value-of select='@name'/>() unless accessType is inputOnly or inputOutput </report>
      <!-- SFVec*f assignment might include subscript, e.g. value_changed [0] = ___ -->
      <report test="parent::Script and not(../@url) and ((@accessType='outputOnly')     or (@accessType='inputOutput')) and not(starts-with(@type,'MF')) and not(contains($CDATAblock,concat(' ',@name,'='))) and not(contains($CDATAblock,concat(' ',@name,' ='))) and not(contains($CDATAblock,concat(' ',@name,'['))) and not(contains($CDATAblock,concat(' ',@name,' [')))" role="warning">&lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' accessType='<value-of select='@accessType'/>'/&gt; does not send output event via assignment statement <value-of select='@name'/>=___; </report>
      <!-- TODO check setting of individual MF[index] values, if possible -->
      <!-- TODO check ROUTE types; need to fix, very rough
      <let name="fieldID" value="$parentName DEF="<value-of select='../@DEF'/>"&gt; &lt;<name/> name="<value-of select='@name'/>"/&gt;"/>
      <report test="parent::Script and not(@url) and ((@accessType='inputOnly) or (@accessType='inputOutput)) and not(//ROUTE[@toNode=$DEF])" role="error"><value-of select='$fieldID'/> must have accessType defined </report>
      -->
      <report test="ROUTE" role="hint">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; cannot be contained inside of &lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>' name='<value-of select='../@name'/>'> &lt;field name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>'/&gt; field /&gt; </report>
      <report test="not(@USE) and (@value) and (contains(@value, '&quot;')) and (($quoteCount div 2)!=round($quoteCount div 2)) and not(contains(@value,'\&quot;'))"    role="error">&NodeDEFname; string array has <value-of select='($quoteCount)'/> unescaped &quot;quote marks&quot; but instead needs to have an even number of matched pairs(value='<value-of select='@value'/>') </report>
      <report test="not(@USE) and (@value) and (contains(@value,'\&quot;'))"    role="warning">&NodeDEFname; has <value-of select='($quoteCount)'/> quote marks with at least one escaped quote mark \&quot; so double-check to ensure paired &quot;quote marks&quot; for each line are matched (value='<value-of select='@value'/>') </report>
      <!-- no need to reiterate warning about profile/component -->
      <!-- TODO confirm Script/field has no initial value if corresponding IS/connect is present, e.g. BvhSeamless3dExport1 -->
      <report test="boolean(parent::ProtoInterface) and boolean(ancestor::ProtoDeclare) and (count(ancestor::ProtoDeclare/ProtoBody//IS/connect[@protoField = $fieldName]) = 0)"  role="warning">Missing connection for field in ProtoBody: &lt;ProtoDeclare name='<value-of select='../../@name'/>'&gt; &lt;ProtoInterface&gt; &lt;field name='<value-of select='@name'/>' accessType='<value-of select='@accessType'/>' type='<value-of select='@type'/>'/&gt; is unused with no &lt;ProtoDeclare name='<value-of select='../../@name'/>'&gt; &lt;ProtoBody&gt; ... &lt;IS&gt; &lt;connect protoField='<value-of select='$fieldName'/>' nodeField='someParentNodeFieldName'/&gt; found in corresponding ProtoBody content </report>
    </rule>

    <!-- ========= fieldValue element ========== -->
    <rule context="fieldValue | *[(lower-case(local-name()) = 'fieldValue')]">
      <let name="parentName" value="local-name(..)"/>
      <let name="prototypeName"    value="../@name"/><!-- in ProtoInstance -->
      <let name="fieldValueName"   value="@name"/>
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="true()"/>
      <let name="value"     value="normalize-space(translate(@value,',',' '))"/>
      <let name="protoFound"       value="boolean(      //ProtoDeclare[@name = $prototypeName])"/>
      <let name="externProtoFound" value="boolean(//ExternProtoDeclare[@name = $prototypeName])"/>
      <let name="declarationFound" value="$protoFound or $externProtoFound"/>
      <let name="protoFieldFound"                        value="(count(      //ProtoDeclare[@name = $prototypeName]/field[@name = $fieldValueName]) gt 0)"/>
      <let name="externProtoFieldFound"                  value="(count(//ExternProtoDeclare[@name = $prototypeName]/field[@name = $fieldValueName]) gt 0)"/>
      <let name="protoFieldCapitalizationMismatch"       value="(count(      //ProtoDeclare[@name = $prototypeName]/field[lower-case(@name) = lower-case($fieldValueName)]) gt 0) and not($protoFieldFound)"/>
      <let name="externProtoFieldCapitalizationMismatch" value="(count(//ExternProtoDeclare[@name = $prototypeName]/field[lower-case(@name) = lower-case($fieldValueName)]) gt 0) and not($externProtoFieldFound)"/>
      <let name="declarationFieldFound"   value="$protoFieldFound or $externProtoFieldFound"/>
      <!-- field definition is found in ProtoDeclare or ExternProtoDeclare (but not both) so catenate them together to get single value from single query -->
      <let name="type"       value="concat((//ExternProtoDeclare[@name = $prototypeName]/field[@name = $fieldValueName]/@type),      (//ProtoDeclare[@name = $prototypeName]/ProtoInterface/field[@name = $fieldValueName]/@type))"/>
      <let name="accessType" value="concat((//ExternProtoDeclare[@name = $prototypeName]/field[@name = $fieldValueName]/@accessType),(//ProtoDeclare[@name = $prototypeName]/ProtoInterface/field[@name = $fieldValueName]/@accessType))"/>
      <let name="inputOutputOnly" value="boolean(      $protoFound and       //ProtoDeclare[@name=$prototypeName]/field[@name=$fieldValueName][@accessType='inputOnly' or @accessType='outputOnly']) or
                                         boolean($externProtoFound and //ExternProtoDeclare[@name=$prototypeName]/field[@name=$fieldValueName][@accessType='inputOnly' or @accessType='outputOnly'])"/>
      <let name="simpleType"      value="boolean(      $protoFound and       //ProtoDeclare[@name=$prototypeName]/field[@name=$fieldValueName][@accessType='initializeOnly' or @accessType='inputOutput'][starts-with(@type,'SF') and @type!='SFNode']) or
                                         boolean($externProtoFound and //ExternProtoDeclare[@name=$prototypeName]/field[@name=$fieldValueName][@accessType='initializeOnly' or @accessType='inputOutput'][starts-with(@type,'SF') and @type!='SFNode'])"/>
      <let name="hasIS"           value="boolean(../IS/connect[@nodeField  = $fieldValueName])"/>
      <let name="valueRequired" value="($accessType='initializeOnly' or $accessType='inputOutput') and not($type='SFNode') and not($type='SFString') and not(starts-with($type,'MF')) and not($hasIS) and not(local-name(..)='ExternProtoDeclare')"/>
      <let name="MFBoolValueResidue"  value="translate($value,'truefalse, ','')"/>
      <let name="IntegerValueResidue" value="translate($value,'0123456789+-Ee, ','')"/>
      <let name="FloatValueResidue"   value="translate($value,'0123456789.+-Ee, ','')"/>
      <let name="ImageValueResidue"   value="translate($value,'0123456789+-Ee, 0xABCDEFabcdef','')"/>
      <let name="embeddedWhiteSpaceCount" value="string-length($value) - string-length(translate($value,' ',''))"/>
      <let name="embeddedPeriodCount"     value="string-length(@value) - string-length(translate(@value,'.',''))"/>
      <let name="embeddedCommaCount"      value="string-length(@value) - string-length(translate(@value,',',''))"/>
      <let name="tupleCount2"             value="(($embeddedWhiteSpaceCount + 1) div  2)"/>
      <let name="tupleCount3"             value="(($embeddedWhiteSpaceCount + 1) div  3)"/>
      <let name="tupleCount4"             value="(($embeddedWhiteSpaceCount + 1) div  4)"/>
      <let name="tupleCount9"             value="(($embeddedWhiteSpaceCount + 1) div  9)"/>
      <let name="tupleCount16"            value="(($embeddedWhiteSpaceCount + 1) div 16)"/>
      <let name="stringResidueApos" value="translate(@value,' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@#$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;','')"/>
      <let name="stringResidue" value='translate($stringResidueApos,"&apos;","")'/>
      <let name="quoteCount" value="string-length($stringResidue)"/>
      <extends rule="noDEF"/>
      <extends rule="fieldNameNotReservedWord"/>
      <!-- debug
      <report test="not(@USE) and true()" role="diagnostic">$prototypeName=<value-of select='$prototypeName'/>, $fieldValueName=<value-of select='$fieldValueName'/>, $protoFound=<value-of select='$protoFound'/>, $externProtoFound=<value-of select='$externProtoFound'/>, $type=<value-of select='$type'/>, $accessType=<value-of select='$accessType'/> </report>
      <report test="not(@USE) and true()" role="diagnostic">  $value=<value-of select='$value'/>, $embeddedWhiteSpaceCount=<value-of select='$embeddedWhiteSpaceCount'/>, $embeddedCommaCount=<value-of select='$embeddedCommaCount'/>, $tupleCount2=<value-of select='$tupleCount2'/>, $tupleCount3=<value-of select='$tupleCount3'/>, $tupleCount4=<value-of select='$tupleCount4'/>, $tupleCount9=<value-of select='$tupleCount9'/>, $tupleCount16=<value-of select='$tupleCount16'/> </report>
      <report test="not(@USE) and true()" role="diagnostic">  @value=<value-of select='@value'/>, $protoFound=<value-of select='$protoFound'/>, (//ProtoDeclare[@name = $prototypeName]/ProtoInterface/field[@name = $fieldValueName]/@value)=<value-of select='(//ProtoDeclare[@name = $prototypeName]/ProtoInterface/field[@name = $fieldValueName]/@value)'/> </report>
      -->
      <report test="(local-name() != 'fieldValue')" role="error">&lt;<value-of select='local-name()'/>&gt; element capitalization must be &lt;fieldValue&gt; for proper validation </report>
      <assert test="parent::ProtoInstance" role="error">fieldValue initialization must have parent ProtoInstance, instead found parent &lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>' name='<value-of select='../@name'/>'> &lt;<name/> value='<value-of select='@value'/>'&gt; </assert>
      <assert test="boolean(parent::ProtoInstance) and (string-length(@name)  gt 0)"       role="error">fieldValue must have name defined for &lt;<value-of select='local-name(..)'/>&gt; &lt;<name/> value='<value-of select='@value'/>'&gt; </assert>
      <assert test="boolean(parent::ProtoInstance) and (string-length(@value) gt 0) or (count(*) gt 0) or ($type='SFString') or starts-with($type,'MF')" role="error">&lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>' name='<value-of select='../@name'/>'> &lt;<name/> name='<value-of select='@name'/>'/&gt; fieldValue with corresponding type='<value-of select='$type'/>' must have initialization value </assert>
      <!-- test for duplicate definition -->
      <assert test="count(preceding-sibling::*[@name=$fieldValueName])=0" role="error">&lt;ProtoInstance name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; has duplicate fieldValue declarations with the same name defined &lt;<name/> name='<value-of select='@name'/>'/&gt; </assert>
      <assert test="not(@name) or not($protoFound)       or       //ProtoDeclare[@name=$prototypeName]/ProtoInterface/field[@name=$fieldValueName]" role="error">&lt;ProtoInstance name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;fieldValue name='<value-of select='@name'/>'/&gt; has no matching &lt;field name='<value-of select='@name'/>'/&gt; in corresponding &lt;ProtoDeclare/&gt; </assert>
      <assert test="not(@name) or not($externProtoFound) or //ExternProtoDeclare[@name=$prototypeName]/field[@name=$fieldValueName]"                role="error">&lt;ProtoInstance name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;fieldValue name='<value-of select='@name'/>'/&gt; has no matching &lt;field name='<value-of select='@name'/>'/&gt; in corresponding &lt;ExternProtoDeclare/&gt; </assert>
      <!-- TODO test for value attribute or contained node -->
      <report test="@value and *" role="error">&lt;ProtoInstance name='<value-of select='../@name'/>' name='<value-of select='@name'/>'/&gt; cannot have both attribute value='<value-of select='@value'/>' and contained node content </report>
      <report test="$inputOutputOnly" role="error">&lt;ProtoInstance name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>'/&gt; initialization not allowed for accessType inputOnly/outputOnly </report>
      <report test="$simpleType and (@value= '' or not(@value)) and not($type='SFString')" role="error">&lt;ProtoInstance name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>'/&gt; has $simpleType=<value-of select='$simpleType'/> but is missing attribute value=&apos;&apos; </report>
      <!-- check accessType initializations -->
      <!-- check for initialization values/nodes present.  note SFNode can have value='NULL' -->
      <report test="($type='SFBool') and not(@value='true' or @value='false')" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; SFBool field must have value='true' or value='false' </report>
      <!-- check for proper characters in initialization values -->
      <report test="($type='MFBool') and (string-length($MFBoolValueResidue) gt 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; MFBool field must only include values of true or false </report>
      <!-- TODO are hex values allowed for integers and floats? -->
      <report test="contains($type,'FInt32') and (string-length($IntegerValueResidue) gt 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; integer field has illegal characters in value: <value-of select='$IntegerValueResidue'/> </report>
      <report test="(contains($type,'Float') or contains($type,'Rotation') or contains($type,'FVec') or contains($type,'Color') or contains($type,'Time') or contains($type,'Matrix')) and (string-length($FloatValueResidue) gt 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; floating-point field has illegal characters in value: <value-of select='$FloatValueResidue'/> </report>
      <report test="contains($type,'Image') and (string-length($ImageValueResidue) gt 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' type='<value-of select='@type'/>' accessType='<value-of select='@accessType'/>' value='<value-of select='@value'/>'/&gt; image field has illegal characters in value: <value-of select='$ImageValueResidue'/> </report>
      <!-- check for proper number of initialization values.  whitespace includes commas. -->
      <!-- array tuple counts -->
      <report test="(string-length($value) > 0) and (($type='SFBool')     or ($type='SFInt32') or ($type='SFFloat') or ($type='SFDouble') or ($type='SFTime')) and ($embeddedWhiteSpaceCount!=0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has illegal number of values (<value-of select='$embeddedWhiteSpaceCount + 1'/>) for type <value-of select='$type'/> </report>
      <report test="(string-length($value) > 0) and (($type='SFVec2f')    or ($type='SFVec2d')) and ($embeddedWhiteSpaceCount!=1)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has illegal number of values (<value-of select='$embeddedWhiteSpaceCount + 1'/>) for 2-tuple type <value-of select='$type'/> </report>
      <report test="(string-length($value) > 0) and (($type='SFVec3f')    or ($type='SFVec3d') or ($type='SFColor')) and ($embeddedWhiteSpaceCount!=2)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has illegal number of values (<value-of select='$embeddedWhiteSpaceCount + 1'/>) for 3-tuple type <value-of select='$type'/> </report>
      <report test="(string-length($value) > 0) and (($type='SFVec4f')    or ($type='SFVec4d') or ($type='SFRotation') or ($type='SFColorRGBA')) and ($embeddedWhiteSpaceCount!=3)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has illegal number of values (<value-of select='$embeddedWhiteSpaceCount + 1'/>) for 4-tuple type <value-of select='$type'/> </report>
      <report test="(string-length($value) > 0) and (($type='SFMatrix3f') or ($type='SFMatrix3d')) and ($embeddedWhiteSpaceCount!=8)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has illegal number of values (<value-of select='$embeddedWhiteSpaceCount + 1'/>) for 9-tuple type <value-of select='$type'/> </report>
      <report test="(string-length($value) > 0) and (($type='SFMatrix4f') or ($type='SFMatrix4d')) and ($embeddedWhiteSpaceCount!=15)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has illegal number of values (<value-of select='$embeddedWhiteSpaceCount + 1'/>) for 16-tuple type <value-of select='$type'/> </report>
      <report test="(string-length($value) > 0) and (($type='MFVec2f')    or ($type='MFVec2d')) and ((($embeddedWhiteSpaceCount + 1) mod 2) != 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has illegal number of values (<value-of select='(($embeddedWhiteSpaceCount + 1) div 2)'/>) for array of singleton SF values found in this 2-tuple type <value-of select='$type'/> </report>
      <report test="(string-length($value) > 0) and (($type='MFVec3f')    or ($type='MFVec3d') or ($type='MFColor')) and ((($embeddedWhiteSpaceCount + 1) mod 3) != 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has illegal number of values (<value-of select='(($embeddedWhiteSpaceCount + 1) div 3)'/>) for array of singleton SF values found in this 3-tuple type <value-of select='$type'/> </report>
      <report test="(string-length($value) > 0) and (($type='MFVec4f')    or ($type='MFVec4d') or ($type='MFRotation') or ($type='MFColorRGBA')) and ((($embeddedWhiteSpaceCount + 1) mod 4) != 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has illegal number of values (<value-of select='(($embeddedWhiteSpaceCount + 1) div 4)'/>) for array of singleton SF values found in this 4-tuple type <value-of select='$type'/> </report>
      <report test="(string-length($value) > 0) and (($type='MFMatrix3f') or ($type='SFMatrix3d')) and ((($embeddedWhiteSpaceCount + 1) mod 9) != 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has illegal number of values (<value-of select='(($embeddedWhiteSpaceCount + 1) div 9)'/>) for array of singleton SF values found in this 9-tuple type <value-of select='$type'/> </report>
      <report test="(string-length($value) > 0) and (($type='MFMatrix4f') or ($type='MFMatrix4d')) and ((($embeddedWhiteSpaceCount + 1) mod 16) != 0)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has illegal number of values (<value-of select='(($embeddedWhiteSpaceCount + 1) div 16)'/>) for array of singleton SF values found in this 16-tuple type <value-of select='$type'/> </report>
      <!-- comma counts warning -->
      <report test="(string-length($value) > 0) and ((@type='SFBool')     or (@type='SFInt32') or (@type='SFFloat') or (@type='SFDouble') or (@type='SFTime')) and ($embeddedCommaCount!=0)" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has unexpected number of commas (<value-of select='$embeddedCommaCount'/>) for type <value-of select='@type'/>. Avoid including commas with singleton values. </report>
      <report test="(string-length($value) > 0) and ((@type='SFVec2f')    or (@type='SFVec2d')) and ($embeddedCommaCount!=0)" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has unexpected number of commas (<value-of select='$embeddedCommaCount'/>) for 2-tuple type <value-of select='@type'/>. Avoid including commas within singleton values. </report>
      <report test="(string-length($value) > 0) and ((@type='SFVec3f')    or (@type='SFVec3d') or (@type='SFColor')) and ($embeddedCommaCount!=0)" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has unexpected number of commas (<value-of select='$embeddedCommaCount'/>) for 3-tuple type <value-of select='@type'/>. Avoid including commas within singleton values. </report>
      <report test="(string-length($value) > 0) and ((@type='SFVec4f')    or (@type='SFVec4d') or (@type='SFRotation') or (@type='SFColorRGBA')) and ($embeddedCommaCount!=0)" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has unexpected number of commas (<value-of select='$embeddedCommaCount'/>) for 4-tuple type <value-of select='@type'/>. Avoid including commas within singleton values. </report>
      <report test="(string-length($value) > 0) and ((@type='SFMatrix3f') or (@type='SFMatrix3d')) and ($embeddedCommaCount!=0)" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has unexpected number of commas (<value-of select='$embeddedCommaCount'/>) for 9-tuple type <value-of select='@type'/>. Avoid including commas within singleton values. </report>
      <report test="(string-length($value) > 0) and ((@type='SFMatrix4f') or (@type='SFMatrix4d')) and ($embeddedCommaCount!=0)" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has unexpected number of commas (<value-of select='$embeddedCommaCount'/>) for 16-tuple type <value-of select='@type'/>. Avoid including commas within singleton values. </report>
      <report test="(string-length($value) > 0) and ((@type='MFVec2f')    or (@type='MFVec2d')) and ($embeddedCommaCount!=0) and ($embeddedCommaCount!=($tupleCount2 - 1))" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has unexpected number of commas (expected zero or <value-of select='($tupleCount2 - 1)'/>, found <value-of select='$embeddedCommaCount'/>) for <value-of select='$tupleCount2'/> singleton values found in this 2-tuple type <value-of select='@type'/>. Avoid including commas within individual SF single-field values that make up n-tuple MF multiple-field arrays. </report>
      <report test="(string-length($value) > 0) and ((@type='MFVec3f')    or (@type='MFVec3d') or (@type='MFColor')) and ($embeddedCommaCount!=0) and ($embeddedCommaCount!=($tupleCount3 - 1))" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has unexpected number of commas (expected zero or <value-of select='($tupleCount3 - 1)'/>, found <value-of select='$embeddedCommaCount'/>) for <value-of select='$tupleCount3'/> singleton values found in this 3-tuple type <value-of select='@type'/>. Avoid including commas within individual SF single-field values that make up n-tuple MF multiple-field arrays. </report>
      <report test="(string-length($value) > 0) and ((@type='MFVec4f')    or (@type='MFVec4d') or (@type='MFRotation') or (@type='MFColorRGBA')) and ($embeddedCommaCount!=0) and ($embeddedCommaCount!=($tupleCount4 - 1))" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has unexpected number of commas (expected zero or <value-of select='($tupleCount4 - 1)'/>, found <value-of select='$embeddedCommaCount'/>) for <value-of select='$tupleCount4'/> singleton values found in this 4-tuple type <value-of select='@type'/>. Avoid including commas within individual SF single-field values that make up n-tuple MF multiple-field arrays. </report>
      <report test="(string-length($value) > 0) and ((@type='MFMatrix3f') or (@type='SFMatrix3d')) and ($embeddedCommaCount!=0) and ($embeddedCommaCount!=($tupleCount9 - 1))" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has unexpected number of commas (expected zero or <value-of select='($tupleCount9 - 1)'/>, found <value-of select='$embeddedCommaCount'/>) for <value-of select='$tupleCount9'/> singleton values found in this 9-tuple type <value-of select='@type'/>. Avoid including commas within individual SF single-field values that make up n-tuple MF multiple-field arrays. </report>
      <report test="(string-length($value) > 0) and ((@type='MFMatrix4f') or (@type='MFMatrix4d')) and ($embeddedCommaCount!=0) and ($embeddedCommaCount!=($tupleCount16 - 1))" role="warning">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has unexpected number of commas (expected zero or <value-of select='($tupleCount16 - 1)'/>, found <value-of select='$embeddedCommaCount'/>) for <value-of select='$tupleCount16'/> singleton values found in this 16-tuple type <value-of select='@type'/>. Avoid including commas within individual SF single-field values that make up n-tuple MF multiple-field arrays. </report>
      <!-- TODO even-tuple counting checks -->
      <!-- other counting checks -->
      <report test="(string-length($value) > 0) and ($type='MFString') and not(starts-with(@value,'&quot;')) and not(ends-with(@value,'&quot;'))" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' with type='<value-of select='@type'/>' must begin and end with &quot;quote marks&quot; &quot;for each contained string&quot; </report>
      <report test="(string-length($value) > 0) and ($embeddedPeriodCount > $embeddedWhiteSpaceCount + 1) and not(contains($type,'FString'))" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has excess number of periods (<value-of select='$embeddedPeriodCount'/>) compared to whitespace-separated values (<value-of select='($embeddedWhiteSpaceCount + 1)'/>) </report>
      <report test="(string-length($value) > 0) and $protoFound and (@value=(//ProtoDeclare[@name = $prototypeName]/ProtoInterface/field[@name = $fieldValueName]/@value))" role="hint">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>' has default value and so this fieldValue is optional </report>
      <report test="ROUTE" role="hint">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; cannot be contained inside of &lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>' name='<value-of select='../@name'/>'> &lt;fieldValue name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; with defined type='<value-of select='$type'/>' accessType='<value-of select='$accessType'/>'  </report>
      <report test="(@value) and (contains(@value, '&quot;')) and (($quoteCount div 2)!=round($quoteCount div 2)) and not(contains(@value,'\&quot;'))"    role="error">&NodeDEFname; string array has <value-of select='($quoteCount)'/> unescaped &quot;quote marks&quot; but instead needs to have an even number of matched pairs(value='<value-of select='@value'/>') </report>
      <report test="(@value) and (contains(@value,'\&quot;'))"    role="warning">&NodeDEFname; has <value-of select='($quoteCount)'/> quote marks with at least one escaped quote mark \&quot; so double-check to ensure paired &quot;quote marks&quot; for each line are matched (value='<value-of select='@value'/>') </report>
      <report test="      $protoFound and not(      $protoFieldFound)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has matching ProtoDeclare with same name, but no corresponding field match for this fieldValue name='<value-of select='$fieldValueName'/>' </report>
      <report test="$externProtoFound and not($externProtoFieldFound)" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has matching ExternProtoDeclare with same name, but no corresponding field match for this fieldValue name='<value-of select='fieldValueName'/>' </report>
      <report test="      $protoFieldCapitalizationMismatch" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has matching ProtoDeclare with same name, but corresponding field has capitalization mismatch for this fieldValue name='<value-of select='$fieldValueName'/>' </report>
      <report test="$externProtoFieldCapitalizationMismatch" role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' value='<value-of select='@value'/>'/&gt; has matching ExternProtoDeclare with same name, but corresponding field has capitalization mismatch for this fieldValue name='<value-of select='$fieldValueName'/>' </report>
      <!-- TODO warn if @value provided when type SFNode/MFNode -->
      <!-- no need to reiterate warning about profile/component -->
    </rule>

    <!-- ========= Script node ==========  -->
    <rule context="Script">
      <let name="CDATAblock"         value=          "normalize-space(.)"/>
      <let name="CDATAblockNoSpaces" value="translate(normalize-space(.),' ','')"/>
      <extends rule="DEFtests"/>
      <extends rule="hasUrl"/>
      <!-- TODO check miscapitalization of data types, MFVec3F etc. -->
      <!-- TODO check external script -->
      <!--
      <let name="firstScriptUrl"  value="substring-before(substring-after($normalizedString,'&quot;'),'&quot;')"/>
      <report test="not(@USE) and true()" role="trace">$firstScriptUrl=<value-of select='$firstScriptUrl'/> </report>
      OK so far...  however document() does not resolve to correct directory :(
      <let name="firstScriptUrlDocument"  value="document($firstScriptUrl)"/>
      <report test="not(@USE) and true()" role="trace">$firstScriptUrlDocument=&#10;<value-of select='$firstScriptUrlDocument'/> </report>
      -->
      <!-- support for text() or . seems inconsistent, so check both -->
      <!-- <let name="CDATAtext" value="normalize-space(text())"/> -->
      <!-- <report test="not(@USE) and true()"  role="diagnostic">$CDATAblock=<value-of select='$CDATAblock'/> </report> -->
      <assert test="@DEF or @USE or (local-name(..)='ProtoBody') or contains(translate($CDATAblock,' ',''),'initialize()')" role="warning">&lt;<name/>/&gt; must have DEF name in order to ROUTE events </assert>
      <assert test="@url or @USE or boolean(IS/connect[@nodeField='url']) or (string-length($CDATAblock) gt 1)" role="error">&NodeDEFname; needs url or contained CDATA source </assert>
      <report test="starts-with(normalize-space(@url),'javascript') or starts-with($CDATAblock,'javascript')"  role="error">&NodeDEFname; contained source block must start with 'ecmascript:' rather than 'javascript:' </report>
      <report test="starts-with(normalize-space(@url),'javascript') or starts-with($CDATAblock,'vrmlscript')"  role="error">&NodeDEFname; contained source block must start with 'ecmascript:' rather than 'vrmlscript:' </report>
      <assert test="@url or @USE or boolean(IS/connect[@nodeField='url']) or (string-length($CDATAblock) &lt; 2) or starts-with($CDATAblock,'ecmascript:')" role="error">&NodeDEFname; contained CDATA source block must start with 'ecmascript:'</assert> <!-- "<value-of select='$CDATAblock'/>" -->
      <assert test="@url or @USE or boolean(IS/connect[@nodeField='url']) or (string-length($CDATAblock) &lt; 2) or field or contains($CDATAblock,'initialize()')" role="warning">&NodeDEFname; contained CDATA source block needs initialize() method when no fields and no url are defined, otherwise has no action </assert>
      <!-- Xj3D and others say that var declarations are OK
      <report test="contains($CDATAblock,'var ')" role="error">&NodeDEFname; contains var declarations, use &lt;field /&gt; declarations for variables instead </report>
      -->
      <report test="contains(@url,'ecmascript:')  and contains(@url,'//')" role="error">&NodeDEFname; url='ecmascript: ...' also contains // inline comments, which can hide all source code that follows </report>
      <report test="contains($CDATAblock,'TRUE')  and not(contains($CDATAblock,'createVrmlFromString'))" role="error">&NodeDEFname; source code contains boolean constant TRUE, use lower-case 'true' instead to match XML and JavaScript/ECMAScript rules </report>
      <report test="contains($CDATAblock,'FALSE') and not(contains($CDATAblock,'createVrmlFromString'))" role="error">&NodeDEFname; source code contains boolean constant FALSE, use lower-case 'false' instead to match XML and JavaScript/ECMAScript rules </report>
      <report test="contains($CDATAblock,'TRUE')  and     contains($CDATAblock,'function initialize')  and not(contains($CDATAblockNoSpaces,'functioninitialize()'))" role="error">&NodeDEFname; initialize() method in contained CDATA source block cannot have any calling parameters </report>
      <!-- TODO check ROUTEs in/out for matching DEF name -->
      <assert test="(not(//ROUTE[@toNode=$DEF]) and not(//ROUTE[@fromNode=$DEF])) or field" role="error">&NodeDEFname; missing field definition to receive ROUTE events </assert>
      <report test="fieldValue" role="error">&NodeDEFname; contains &lt;fieldValue name='<value-of select='fieldValue/@name'/>/&gt; but instead should be &lt;field name='<value-of select='fieldValue/@name'/>/&gt; </report>
      <!-- TODO check ROUTEs in/out for accessType -->
      <!-- TODO DEF/USE for a Script seems questionable... maybe passed as a parameter? -->
      <report test="(string-length($CDATAblock) > 2) and (string-length(normalize-space(@url)) > 2)"  role="warning">&NodeDEFname; contains both external url reference and internal CDATA source; note that external url takes precedence, but will fall back to contained CDATA source if no external script is found </report>
      <!-- file extension checks -->
      <report test="(string-length(@url) > 2) and not(contains(@url,'ecmascript:')) and not(contains(@url,'.js')) and not(contains(@url,'.class')) and not(contains(@url,'.jar'))" role="warning">&NodeDEFname; url array does not contains link to .js .class or .jar scripts, browsers not required to support other scripting languages (url='<value-of select='@url'/>') </report>
      <report test="(@directOutput='TRUE' )" role="error">&NodeDEFname; directOutput='TRUE' capitalization is incorrect, define as directOutput='true' instead </report>
      <report test="(@directOutput='FALSE')" role="error">&NodeDEFname; directOutput='FALSE' capitalization is incorrect, define as directOutput='false' instead </report>
      <report test="(@mustEvaluate='TRUE' )" role="error">&NodeDEFname; mustEvaluate='TRUE' capitalization is incorrect, define as mustEvaluate='true' instead </report>
      <report test="(@mustEvaluate='FALSE')" role="error">&NodeDEFname; mustEvaluate='FALSE' capitalization is incorrect, define as mustEvaluate='false' instead </report>
      <!-- TODO XSLT 2.0:
      and not(contains(@url,'.js&quot;')) and not(contains(@url,'.class&quot;')) and not(contains(@url,'.jar&quot;'))
                                                                                    and not(ends-with(@url,'.js'))      and not(ends-with(@url,'.class'))      and not(ends-with(@url,'.jar')) -->    
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Scripting'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Scripting' level='1'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= IS element ========== -->
    <rule context="IS | *[(upper-case(local-name()) = 'IS')]">
      <extends rule="noDEF"/>
      <report test="(local-name() != 'IS')" role="error">&lt;<value-of select='local-name()'/>&gt; element capitalization must be upper-case &lt;IS&gt; for proper validation </report>
      <assert test="ancestor::ProtoDeclare" role="error">&lt;<value-of select='local-name(..)'/> DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/>/&gt; must have ancestor::ProtoDeclare </assert>
      <!-- no need to reiterate warning about profile/component -->
    </rule>

    <!-- ========= connect element ========== -->
    <rule context="connect | *[(lower-case(local-name()) = 'connect')]">
      <let name="nodeField" value="@nodeField"/>
      <let name="protoField" value="@protoField"/>
      <extends rule="noDEF"/>
      <report test="(local-name() != 'connect')" role="error">&lt;<value-of select='local-name()'/>&gt; element capitalization must be lower-case &lt;connect&gt; for proper validation </report>
      <report test="not(ancestor::ProtoBody)"    role="error">&lt;<name/> nodeField='<value-of select='@nodeField'/>' protoField='<value-of select='@protoField'/>'/&gt; is not within a ProtoBody </report>
      <report test="not(ancestor::ProtoDeclare)" role="error">&lt;<name/> nodeField='<value-of select='@nodeField'/>' protoField='<value-of select='@protoField'/>'/&gt; is not within a ProtoDeclare </report>
      <assert test="boolean(ancestor::ProtoDeclare/ProtoInterface/field[@name = $protoField])" role="error">Not finding connect protoField: &lt;IS&gt; &lt;<name/> nodeField='<value-of select='@nodeField'/>' protoField='<value-of select='$protoField'/>'/&gt; does not have a corresponding protoField declaration &lt;ProtoDeclare name='<value-of select='ancestor::ProtoDeclare/@name'/>'&gt; &lt;ProtoInterface&gt; &lt;field name='<value-of select='@protoField'/>'&gt;</assert>
      <assert test="parent::IS" role="error">&lt;<name/> nodeField=<value-of select='@nodeField'/> protoField=<value-of select='@protoField'/>/&gt; must have parent IS </assert>
      <!-- test for multiple definitions fanning into a single nodeField -->
      <report test="(@nodeField='DEF') or (@nodeField='USE') or (@nodeField='class') or (@nodeField='containerField')" role="error">&lt;<name/> nodeField=<value-of select='@nodeField'/>/&gt; is not a field name (DEF, USE, class, containerField not allowed) </report>
      <report test="(preceding-sibling::connect[@nodeField=$nodeField]) and not(following-sibling::connect[@nodeField=$nodeField])" role="error">&lt;<name/> nodeField=<value-of select='@nodeField'/>/&gt; cannot have multiple definitions to a single field of this node </report>
      <!-- no need to reiterate warning about profile/component -->
    </rule>

    <!-- ========= ProtoDeclare element ========== -->
    <rule context="ProtoDeclare">
      <let name="name" value="@name"/>
      <let name="nodeName"                  value="local-name()"/>
      <let name="priorProtoFound"           value="preceding::ProtoDeclare[@name = $name]"/>
      <let name="externProtoFound"          value="     ExternProtoDeclare[@name = $name]"/>
      <let name="ProtoDeclareLabel"   value="concat('&lt;ProtoDeclare name=&quot;',$name,'&quot;/&gt;')"/>
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="true()"/>
      <extends rule="noDEF"/>
      <extends rule="nameNotReservedWord"/>
      <assert test="$name"  role="error">&lt;ProtoDeclare name=''/>'/&gt; is required to have a name </assert>
      <assert test="ProtoBody" role="error"><value-of select='$ProtoDeclareLabel'/> must include ProtoBody </assert>
      <report test="//ProtoInstance and not(//ProtoInstance[@name=$name])" role="warning"><value-of select='$ProtoDeclareLabel'/> has no corresponding &lt;ProtoInstance name='<value-of select='@name'/>'/&gt; </report>
      <report test="$priorProtoFound"   role="error"><value-of select='$ProtoDeclareLabel'/> has multiple ProtoDeclare definitions with same name </report>
      <report test="$externProtoFound"  role="error"><value-of select='$ProtoDeclareLabel'/> has both ProtoDeclare and ExternProtoDeclare definitions with same name </report>
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Core'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Core' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= ProtoInterface element ========== -->
    <rule context="ProtoInterface">
      <extends rule="noDEF"/>
      <assert test="*" role="error">&lt;ProtoDeclare name='<value-of select='../@name'/>'&gt; ProtoInterface, if used, must contain one or more field declarations </assert>
      <assert test="count(*)=count(field)" role="error">&lt;ProtoDeclare name='<value-of select='../@name'/>'&gt; ProtoInterface can only contain field declarations or comments </assert>
      <report test="fieldValue" role="error">&lt;ProtoDeclare name='<value-of select='../@name'/>'&gt; ProtoInterface contains &lt;fieldValue name='<value-of select='fieldValue/@name'/>/&gt; rather than &lt;field name='<value-of select='fieldValue/@name'/>/&gt; </report>
      <!-- no need to reiterate warning about profile/component -->
    </rule>

    <!-- ========= ProtoBody element ========== -->
    <rule context="ProtoBody">
      <extends rule="noDEF"/>
      <!-- TODO ensure ROUTE source and target nodes within ProtoBody scope -->
      <assert test="node()" role="error">&lt;ProtoDeclare name='<value-of select='../@name'/>'&gt; ProtoBody must contain at least one node </assert>
      <report test="not(ProtoBody/comment()[position()=1]) and not(ProtoBody/comment()[position()=2]) and (ProtoBody/Shape[position()>1] or ProtoBody/*[position()>1]//Shape)" role="error">&lt;ProtoDeclare name='<value-of select='../@name'/>'&gt; ProtoBody child (or descendant) Shape following first child will not be rendered, since the first child determines node type. (Authors can silence this warning by placing a comment as second child.) </report>
      <!-- no need to reiterate warning about profile/component -->
    </rule>

    <!-- ========= ExternProtoDeclare element ========== -->
    <rule context="ExternProtoDeclare">
      <let name="name" value="@name"/>
      <let name="url" value="normalize-space(translate(@url, ',',' '))"/>
      <let name="nodeName"                  value="local-name()"/>
      <let name="protoFound"                value="                 ProtoDeclare[@name = $name]"/>
      <let name="priorExternProtoNameFound" value="preceding::ExternProtoDeclare[@name = $name]"/>
      <let name="priorExternProtoUrlFound"  value="preceding::ExternProtoDeclare[normalize-space(@url) = normalize-space($url)]"/>
      <let name="ExternProtoDeclareLabel"   value="concat('&lt;ExternProtoDeclare name=&quot;',$name,'&quot;/&gt;')"/>
      <let name="urlCount"     value="string-length($url)    - string-length(translate($url,  ' ','')) + 1"/>
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="true()"/>
      <extends rule="noDEF"/>
      <extends rule="nameNotReservedWord"/>
      <!-- illegal:  no DEF in ExternProtoDeclare <extends rule="hasUrl"/> -->
      <assert test="$name"  role="error">&lt;ExternProtoDeclare name=''/>'/&gt; is required to have a name, but name is missing </assert>
      <assert test="//ProtoInstance[@name=$name]" role="warning"><value-of select='$ExternProtoDeclareLabel'/> has no corresponding ProtoInstance </assert>
      <report test="$priorExternProtoNameFound"     role="error"><value-of select='$ExternProtoDeclareLabel'/> has multiple ExternProtoDeclare declarations with same name </report>
      <report test="$priorExternProtoUrlFound"      role="error"><value-of select='$ExternProtoDeclareLabel'/> has a prior ExternProtoDeclare declaration with same url </report>
      <report test="$protoFound"                    role="error"><value-of select='$ExternProtoDeclareLabel'/> has both ProtoDeclare or ExternProtoDeclare declarations with same name </report>
      <assert test="@url"                           role="error"><value-of select='$ExternProtoDeclareLabel'/> must contain url array address(es) to find external prototype declaration </assert>
      <assert test="@url"                           role="warning"><value-of select='$ExternProtoDeclareLabel'/> author warning: url correctness cannot be checked by X3D Schematron, be sure to confirm correct reference to external file! </assert>
      <report test="(@url) and not(contains(@url,'#'))" role="warning"><value-of select='$ExternProtoDeclareLabel'/> url array address(es) missing #<value-of select='$name'/> appended </report>
      <report test="(@url) and contains(@url,'#') and not(contains(@url,concat('#',$name)))" role="info"><value-of select='$ExternProtoDeclareLabel'/> url array references remote prototype name different from #<value-of select='$name'/> </report>
      <report test="(@url) and contains(@url,'#&quot;')" role="warning"><value-of select='$ExternProtoDeclareLabel'/> url array contains url ending with # reference to a specific prototype, but without required #PrototypeName </report>
      <!-- the following rules are adapted from hasUrl -->
      <assert test="($urlCount gt 0)"  role="error"><value-of select='$ExternProtoDeclareLabel'/> has illegal number of values in url array, must list at least 1 file address </assert>
      <assert test="not(contains($url,'&quot;&quot;'))"  role="error"><value-of select='$ExternProtoDeclareLabel'/> url array has adjacent &quot;quote marks&quot; unseparated by other characters </assert>
      <report test="contains(substring-after(@url,'.wrl&quot;'),'.x3d#')" role="warning"><value-of select='$ExternProtoDeclareLabel'/> url array has .wrl scene reference before .x3d scene reference </report>
      <report test="(@url) and not(contains(@url,'http'))" role="info"><value-of select='$ExternProtoDeclareLabel'/> url array address(es) missing online http references </report>
      <report test="contains(@url,':///')" role="warning"><value-of select='$ExternProtoDeclareLabel'/> url array contains triple forward-slash :/// characters </report>
      <report test="contains(@url,':/') and not(contains(@url,'://'))" role="warning"><value-of select='$ExternProtoDeclareLabel'/> url array contains :/ rather than :// </report>
      <report test="contains(@url,'\') or contains(@url,'\\')" role="error"><value-of select='$ExternProtoDeclareLabel'/> url array contains backslash \ character(s) (url='<value-of select='@url'/>') </report>
      <report test="contains(@url,'&quot;/')" role="warning"><value-of select='$ExternProtoDeclareLabel'/> url array contains contains entry starting at root directory / (url='<value-of select='@url'/>') </report>
      <report test="contains(@url,'file:/')" role="warning"><value-of select='$ExternProtoDeclareLabel'/> url array contains file:/ local address, not portable across Web servers (url='<value-of select='@url'/>') </report>
      <report test="contains(@url,'http:/')  and not(contains(@url,'http://'))"  role="warning"><value-of select='$ExternProtoDeclareLabel'/> url array contains http:/ rather than http:// (url='<value-of select='@url'/>') </report>
      <report test="contains(@url,'https:/') and not(contains(@url,'https://'))" role="warning"><value-of select='$ExternProtoDeclareLabel'/> url array contains https:/ rather than https:// (url='<value-of select='@url'/>') </report>
      <report test="contains(@url,':/') and not(contains(@url,'://')) and not(contains(@url,'http://')) and not(contains(@url,'https://'))" role="warning"><value-of select='$ExternProtoDeclareLabel'/> url array contains :/ rather than :// (url='<value-of select='@url'/>') </report>
      <report test="contains(@url,'.wrl') and not(contains(@url,'.x3d'))" role="warning"><value-of select='$ExternProtoDeclareLabel'/> url array contains .wrl link without corresponding .x3d version, some browsers may fail (url='<value-of select='@url'/>') </report>
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Core'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Core' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= ProtoInstance node ========== -->
    <rule context="ProtoInstance">
      <let name="name" value="@name"/>
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="true()"/>
      <let name="USEname"                   value="@USE"/>
      <let name="protoNameForUSEnode"       value="//ProtoInstance[@DEF = $USEname]/@name"/>
      <let name="DEFUSEnameLabel"           value="concat('DEF=&quot;',@DEF,'&quot; USE=&quot;',@USE,'&quot; name=&quot;',@name,'&quot;')"/>
      <let name="protoFound"                value="      //ProtoDeclare[@name = $name] or       //ProtoDeclare[@name = $protoNameForUSEnode]"/>
      <let name="externProtoFound"          value="//ExternProtoDeclare[@name = $name] or //ExternProtoDeclare[@name = $protoNameForUSEnode]"/>
      <let name="declarationFound"          value="$protoFound or $externProtoFound"/>
      <let name="doubleDeclaration"         value="not($externProtoFound and $protoFound)"/>
      <let name="precedingProtoFound"                        value="preceding::ProtoDeclare      [@name = $name] or preceding::ProtoDeclare      [@name = $protoNameForUSEnode]"/>
      <let name="precedingExternProtoFound"                  value="preceding::ExternProtoDeclare[@name = $name] or preceding::ExternProtoDeclare[@name = $protoNameForUSEnode]"/>
      <let name="precedingProtoCapitalizationMismatch"       value="(preceding::ProtoDeclare      [lower-case(@name) = lower-case($name)] or preceding::ProtoDeclare      [lower-case(@name) = lower-case($protoNameForUSEnode)]) and not($precedingProtoFound)"/>
      <let name="precedingExternProtoCapitalizationMismatch" value="(preceding::ExternProtoDeclare[lower-case(@name) = lower-case($name)] or preceding::ExternProtoDeclare[lower-case(@name) = lower-case($protoNameForUSEnode)]) and not($precedingExternProtoFound)"/>
      <let name="nodeLabel"                 value="concat('&lt;ProtoInstance ',$DEFUSEnameLabel,'/&gt;')"/>
      <extends rule="DEFtests"/>
      <assert test="(string-length($name) > 0) or (string-length(@USE) > 0)" role="error"><value-of select='$nodeLabel'/> is required to have a name </assert>
      <assert test="$declarationFound"  role="error"><value-of select='$nodeLabel'/> has no ProtoDeclare or ExternProtoDeclare with same name </assert>
      <assert test="$doubleDeclaration" role="error"><value-of select='$nodeLabel'/> has both ProtoDeclare and ExternProtoDeclare with same name </assert>
      <report test="$declarationFound and not($externProtoFound) and $protoFound and not($precedingProtoFound)"       role="error"><value-of select='$nodeLabel'/> precedes &lt;ProtoDeclare name='<value-of select='$name'/> </report>
      <report test="$declarationFound and not($protoFound) and $externProtoFound and not($precedingExternProtoFound)" role="error"><value-of select='$nodeLabel'/> precedes &lt;ExternProtoDeclare name='<value-of select='$name'/> </report>
      <report test="      $precedingProtoCapitalizationMismatch" role="error"><value-of select='$nodeLabel'/> has name capitalization mismatch with preceding &lt;ProtoDeclare name='<value-of       select='(preceding::ProtoDeclare      [lower-case(@name) = lower-case($name)]/@name)'/> </report>
      <report test="$precedingExternProtoCapitalizationMismatch" role="error"><value-of select='$nodeLabel'/> has name capitalization mismatch with preceding &lt;ExternProtoDeclare name='<value-of select='(preceding::ExternProtoDeclare[lower-case(@name) = lower-case($name)]/@name)'/> </report>
      <report test="field" role="error"><value-of select='$nodeLabel'/> has field instead of fieldValue, replace &lt;field name='<value-of select='field/@name'/>'/&gt; with &lt;fieldValue name='<value-of select='field/@name'/>'/&gt; </report>
      <report test="(string-length(@name) > 0) and (string-length(@USE) > 0)" role="error"><value-of select='$nodeLabel'/> includes unnecessary attribute name='<value-of select='/X3D/Scene/ProtoInstance[@DEF = $USEname]/@name'/>' which is not permitted for ProtoInstance USE node </report>
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Core'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Core' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= Extrusion ========== -->
    <rule context="Extrusion">
      <let name="crossSection"             value="normalize-space(translate(@crossSection,',',' '))"/>
      <let name="spine"                    value="normalize-space(translate(@spine,       ',',' '))"/>
      <let name="scale"                    value="normalize-space(translate(@scale,       ',',' '))"/>
      <let name="orientation"              value="normalize-space(translate(@orientation, ',',' '))"/>
      <let name="crossSectionCount"        value="string-length($crossSection)      - string-length(translate($crossSection,' ','')) + 1"/>
      <let name="spineCount"               value="string-length($spine)             - string-length(translate($spine,       ' ','')) + 1"/>
      <let name="scaleCount"               value="string-length($scale)             - string-length(translate($scale,       ' ','')) + 1"/>
      <let name="orientationCount"         value="string-length($orientation)       - string-length(translate($orientation, ' ','')) + 1"/>
      <let name="crossSectionResidue"      value="translate($crossSection,     '+-0123456789Ee., ','')"/>
      <let name="spineResidue"             value="translate($spine,            '+-0123456789Ee., ','')"/>
      <let name="scaleResidue"             value="translate($scale,            '+-0123456789Ee., ','')"/>
      <let name="orientationResidue"       value="translate($orientation,      '+-0123456789Ee., ','')"/>
      <extends rule="geometryNode"/>
      <extends rule="NoChildNode"/>
      <extends rule="creaseAngle"/>
      <report test="($crossSectionCount = 0) and not(IS/connect[@nodeField='crossSection'])" role="warning">&NodeDEFname; missing crossSection </report>
      <report test="($spineCount = 0) and not(IS/connect[@nodeField='spine'])"        role="warning">&NodeDEFname; missing spine </report>
      <assert test="string-length($crossSectionResidue) = 0" role="error">&NodeDEFname; has illegal character <value-of select='$crossSectionResidue'/> in crossSection array (crossSection='<value-of select='@crossSection'/>') </assert>
      <assert test="string-length($scaleResidue)        = 0" role="error">&NodeDEFname; has illegal character <value-of select='$scaleResidue'/> in scale array (scale='<value-of select='@scale'/>') </assert>
      <assert test="string-length($spineResidue)        = 0" role="error">&NodeDEFname; has illegal character <value-of select='$spineResidue'/> in spine array (spine='<value-of select='@spine'/>') </assert>
      <assert test="string-length($orientationResidue)  = 0" role="error">&NodeDEFname; has illegal character <value-of select='$orientationResidue'/> in orientation array (orientation='<value-of select='@orientation'/>') </assert>
      <!-- check for legal array tuples -->
      <assert test="(($crossSectionCount mod 2) = 0)" role="warning">&NodeDEFname; crossSection array size <value-of select='$crossSectionCount div 2'/> does not have legal number of MFVec2f values, must be evenly divisible by 2 (crossSection='<value-of select='@crossSection'/>') </assert>
      <assert test="(($scaleCount mod 2)        = 0)" role="warning">&NodeDEFname; scale array size <value-of select='$scaleCount div 2'/> does not have legal number of MFVec2f values, must be evenly divisible by 2 (scale='<value-of select='@scale'/>') </assert>
      <assert test="(($spineCount mod 3)        = 0)" role="warning">&NodeDEFname; spine array size <value-of select='$spineCount div 3'/> does not have legal number of MFVec3f values, must be evenly divisible by 3 (spine='<value-of select='@spine'/>') </assert>
      <assert test="(($orientationCount mod 4)  = 0)" role="warning">&NodeDEFname; orientation array size <value-of select='$orientationCount div 4'/> does not have legal number of MFRotation values, must be evenly divisible by 4 (orientation='<value-of select='@orientation'/>') </assert>
      <!-- check for sufficient array size -->
      <assert test="(($spineCount = 0)      or ($spineCount gt 5))" role="error">&NodeDEFname; spine array size of <value-of select='$spineCount'/> is insufficient to define a line segment, must have 6 or more values (spine='<value-of select='@spine'/>') </assert>
      <!-- check for matching array sizes -->
      <assert test="($scaleCount = 0)       or ($scaleCount = 2)       or (($scaleCount div 2)       = ($spineCount div 3))" role="warning">&NodeDEFname; scale array size <value-of select='$scaleCount div 2'/> (scale='<value-of select='@scale'/>') must match spine array size <value-of select='$spineCount div 3'/> </assert>
      <assert test="($orientationCount = 0) or ($orientationCount = 4) or (($orientationCount div 4) = ($spineCount div 3))" role="warning">&NodeDEFname; orientation array size <value-of select='$orientationCount div 4'/> (orientation='<value-of select='@orientation'/>') must match spine array size <value-of select='$spineCount div 3'/> </assert>
      <report test="(@beginCap='TRUE' )" role="error">&NodeDEFname; beginCap='TRUE' capitalization is incorrect, define as beginCap='true' instead </report>
      <report test="(@beginCap='FALSE')" role="error">&NodeDEFname; beginCap='FALSE' capitalization is incorrect, define as beginCap='false' instead </report>
      <report test="(@endCap='TRUE')"  role="error">&NodeDEFname; endCap='TRUE' capitalization is incorrect, define as endCap='true' instead </report>
      <report test="(@endCap='FALSE')" role="error">&NodeDEFname; endCap='FALSE' capitalization is incorrect, define as endCap='false' instead </report>
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Geometry3D'][number(@level) ge 4] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Geometry3D' level='4'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= Text ========== -->
    <rule context="Text">
      <let name="stringResidueApos" value="translate(@string,' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@#$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;','')"/>
      <let name="stringResidue" value='translate($stringResidueApos,"&apos;","")'/>
      <!-- this approach to counting "quotation marks" supports internationalization I18N, but doesn't count escaped quotes -->
      <let name="quot" value="substring('&quot;&quot;',1,1)"/>
      <let name="unquotedString" value="translate(@string,$quot,'')"/>
      <let name="escapedQuoteCharacters" value='concat("\\",$quot)'/> 
      <!-- TODO no apparent way to count $escapedQuoteCharacters substrings;  + count(@string,$escapedQuoteCharacters) &#92; \ Backslash; #34; amp; -->
      <let name="quoteCount" value='string-length(@string) - string-length($unquotedString)'/>
      <let name="normalizedString" value="normalize-space(@string)"/>
      <let name="lastCharacter" value="substring($normalizedString,string-length($normalizedString))"/>
      <extends rule="geometryNode"/>
      <report test="(@lineBounds) and (/X3D/@version = '3.0')" role="warning">&NodeDEFname; lineBounds='<value-of select='@lineBounds'/>' requires &lt;X3D version=&apos;3.1&apos;&gt; or higher, but found version='<value-of select='/X3D/@version'/>' </report>
      <report test="(@textBounds) and (/X3D/@version = '3.0')" role="warning">&NodeDEFname; textBounds='<value-of select='@textBounds'/>' requires &lt;X3D version=&apos;3.1&apos;&gt; or higher, but found version='<value-of select='/X3D/@version'/>' </report>
      <assert test="@USE or @string or (@string = ' ') or //ROUTE[@toNode=$DEF] or boolean(IS/connect[@nodeField='string']) or (//ProtoDeclare/ProtoInterface/field/*[@DEF=$USE]) or (//Script/field/*[@DEF=$USE])" role="warning">&TextNodeDEFname; has no value(s) in string='' array </assert>
      <!-- TODO need fn:count function <let name="quoteCount" value="count(@string,'&quot;') - count(@string,'\&quot;')"/> -->
      <report test="false()" role="trace">$quoteCount=<value-of select='$quoteCount'/>, $quot=<value-of select='$quot'/>, $escapedQuoteCharacters=<value-of select='$escapedQuoteCharacters'/>, $unquotedString=<value-of select='$unquotedString'/>, $stringResidueApos=<value-of select='$stringResidueApos'/> , $lastCharacter=<value-of select='$lastCharacter'/> </report>
      <!-- MFString array checks -->
      <report test="not(@USE) and contains($normalizedString,'&quot;&quot;') and not(contains($normalizedString,'\&quot;&quot;') or contains($normalizedString,'&quot;\&quot;') or contains($normalizedString,'&quot;&quot; &quot;') or contains($normalizedString,'&quot; &quot;&quot;'))"  role="error">&TextNodeDEFname; string array has questionable line-break &quot;&quot; quote marks </report>
      <report test="not(@USE) and (@string) and not(contains(@string,'&quot;'))"    role="error">&TextNodeDEFname; string array elements each need to begin and end with &quot;quote marks&quot;.  Corrected example: &lt;<name/> DEF='<value-of select='$DEF'/>' string=&apos;&quot;<value-of select='(@string)'/>&quot;&apos;/&gt; </report>
      <report test="not(@USE) and (@string) and    (contains(@string,'&quot;')) and (($quoteCount div 2)!=round($quoteCount div 2)) and not(contains(@string,'\&quot;'))"    role="error">&TextNodeDEFname; string array has <value-of select='($quoteCount)'/> unescaped &quot;quote marks&quot; but instead needs to have an even number of matched pairs </report>
      <report test="not(@USE) and (@string) and (contains(@string,'\&quot;'))"    role="warning">&TextNodeDEFname; has <value-of select='($quoteCount)'/> quote marks with at least one escaped quote mark \&quot; so double-check to ensure paired &quot;quote marks&quot; for each line are matched </report>
      <report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&quot;')) and not($lastCharacter='&quot;') and (contains(@string,'&quot;'))"    role="error">&TextNodeDEFname; array of string values needs to begin and end with &quot;quote marks&quot; </report>
      <report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&quot;')) and    ($lastCharacter='&quot;')"                                     role="error">&TextNodeDEFname; array of string values needs to begin with quote mark &quot; </report>
      <report test="not(@USE) and ($normalizedString) and    (starts-with($normalizedString,'&quot;')) and not($lastCharacter='&quot;')"                                     role="error">&TextNodeDEFname; array of string values needs to end with quote mark &quot; </report>
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Text'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Text' level='1'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= FontStyle ========== -->
    <rule context="FontStyle">
      <let name="stringResidueApos" value="translate(@family,' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@#$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;','')"/>
      <let name="stringResidue" value='translate($stringResidueApos,"&apos;","")'/>
      <let name="quoteCount" value="string-length($stringResidue)"/>
      <let name="normalizedString" value="normalize-space(@family)"/>
      <let name="lastCharacter" value="substring($normalizedString,string-length($normalizedString))"/>
      <let name="justifyStringResidueApos" value="translate(@justify,' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@#$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;','')"/>
      <let name="justifyStringResidue" value='translate($justifyStringResidueApos,"&apos;","")'/>
      <let name="justifyQuoteCount" value="string-length($justifyStringResidue)"/>
      <let name="justifyNormalizedString" value="normalize-space(@justify)"/>
      <let name="justifyLastCharacter" value="substring($justifyNormalizedString,string-length($justifyNormalizedString))"/>
      <let name="justifyValuesResidue" value="translate(@justify,' ,BEGINENDFIRSTMIDDLE&quot;','')"/>
      <let name="justifyIllegalValue" value="not(@USE) and (@justify) and (string-length($justifyValuesResidue) > 0)"/>
      <extends rule="DEFtests"/>
      <report test="not(parent::Text) and not(parent::field) and not(parent::fieldValue)" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/> node, must be contained by Text node </report>
      <!-- family field MFString array checks -->
      <report test="false()" role="trace">$quoteCount=<value-of select='$quoteCount'/>, $stringResidue=<value-of select='$stringResidue'/>, $stringResidueApos=<value-of select='$stringResidueApos'/> , $lastCharacter=<value-of select='$lastCharacter'/> </report>
      <report test="not(@USE) and contains($normalizedString,'&quot;&quot;') and not(contains($normalizedString,'\&quot;&quot;') or contains($normalizedString,'&quot;\&quot;') or contains($normalizedString,'&quot;&quot; &quot;') or contains($normalizedString,'&quot; &quot;&quot;'))"  role="error">&NodeDEFname; array family='<value-of select='@family'/>' has questionable line-break &quot;&quot; quote marks </report>
      <report test="not(@USE) and (@family) and not(contains(@family,'&quot;'))"    role="error">&NodeDEFname; array family='<value-of select='@family'/>' needs to begin and end with &quot;quote marks&quot;.  Corrected example: &lt;<name/> DEF='<value-of select='$DEF'/>' family=&apos;&quot;<value-of select='(@family)'/>&quot;&apos;/&gt; </report>
      <report test="not(@USE) and (@family) and    (contains(@family,'&quot;')) and (($quoteCount div 2)!=round($quoteCount div 2)) and not(contains(@family,'\&quot;'))"    role="error">&NodeDEFname; array family='<value-of select='@family'/>' has <value-of select='($quoteCount)'/> unescaped &quot;quote marks&quot; but instead needs to have an even number of matched pairs </report>
      <report test="not(@USE) and (@family) and (contains(@family,'\&quot;'))"    role="warning">&NodeDEFname; array family='<value-of select='@family'/>' has <value-of select='($quoteCount)'/> quote marks with at least one escaped quote mark \&quot; so double-check to ensure paired &quot;quote marks&quot; for each line are matched </report>
      <report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&quot;')) and not($lastCharacter='&quot;') and (contains(@family,'&quot;'))"    role="error">&NodeDEFname; array family='<value-of select='@family'/>' needs to begin and end with &quot;quote marks&quot; </report>
      <report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&quot;')) and    ($lastCharacter='&quot;')"                                     role="error">&NodeDEFname; array family='<value-of select='@family'/>' needs to begin with quote mark &quot; </report>
      <report test="not(@USE) and ($normalizedString) and    (starts-with($normalizedString,'&quot;')) and not($lastCharacter='&quot;')"                                     role="error">&NodeDEFname; array family='<value-of select='@family'/>' needs to end with quote mark &quot; </report>
      <!-- justify field MFString array checks -->
      <report test="false()" role="trace">$justifyQuoteCount=<value-of select='$justifyQuoteCount'/>, $justifyStringResidue=<value-of select='$justifyStringResidue'/>, $justifyStringResidueApos=<value-of select='$justifyStringResidueApos'/> , $justifyLastCharacter=<value-of select='$justifyLastCharacter'/> </report>
      <report test="not(@USE) and contains($justifyNormalizedString,'&quot;&quot;') and not(contains($justifyNormalizedString,'\&quot;&quot;') or contains($justifyNormalizedString,'&quot;\&quot;') or contains($justifyNormalizedString,'&quot;&quot; &quot;') or contains($justifyNormalizedString,'&quot; &quot;&quot;'))"  role="error">&NodeDEFname; array justify has questionable line-break &quot;&quot; quote marks </report>
      <report test="not(@USE) and (@justify) and not(contains(@justify,'&quot;'))"    role="error">&NodeDEFname; array justify needs to begin and end with &quot;quote marks&quot;.  Corrected example: &lt;<name/> DEF='<value-of select='$DEF'/>' justify=&apos;&quot;<value-of select='(@justify)'/>&quot;&apos;/&gt; </report>
      <report test="not(@USE) and (@justify) and    (contains(@justify,'&quot;')) and (($justifyQuoteCount div 2)!=round($justifyQuoteCount div 2)) and not(contains(@justify,'\&quot;'))"    role="error">&NodeDEFname; array justify has <value-of select='($justifyQuoteCount)'/> unescaped &quot;quote marks&quot; but instead needs to have an even number of matched pairs </report>
      <report test="not(@USE) and (@justify) and (contains(@justify,'\&quot;'))"    role="warning">&NodeDEFname; has <value-of select='($justifyQuoteCount)'/> quote marks with at least one escaped quote mark \&quot; so double-check to ensure paired &quot;quote marks&quot; for each line are matched </report>
      <report test="not(@USE) and ($justifyNormalizedString) and not(starts-with($justifyNormalizedString,'&quot;')) and not($justifyLastCharacter='&quot;') and (contains(@justify,'&quot;'))"    role="error">&NodeDEFname; array justify needs to begin and end with &quot;quote marks&quot; </report>
      <report test="not(@USE) and ($justifyNormalizedString) and not(starts-with($justifyNormalizedString,'&quot;')) and    ($justifyLastCharacter='&quot;')"                                     role="error">&NodeDEFname; array justify needs to begin with quote mark &quot; </report>
      <report test="not(@USE) and ($justifyNormalizedString) and    (starts-with($justifyNormalizedString,'&quot;')) and not($justifyLastCharacter='&quot;')"                                     role="error">&NodeDEFname; array justify needs to end with quote mark &quot; </report>
      <!-- additional checks -->
      <report test="(@family) and not(contains(@family,'SANS')) and not(contains(@family,'SERIF')) and not(contains(@family,'TYPEWRITER'))"    role="warning">&NodeDEFname; array family='<value-of select='@family'/>' does not contain any of the guaranteed-support fonts (&quot;SANS&quot; &quot;SERIF&quot; or &quot;TYPEWRITER&quot;) </report>
      <report test="$justifyIllegalValue"    role="error">&NodeDEFname; array justify='<value-of select='@justify'/>' has illegal value, need to include 2 legal values: &quot;BEGIN&quot; &quot;END&quot; &quot;FIRST&quot; &quot;MIDDLE&quot; </report>
      <report test="contains(@family, ' ') and not(contains(@family, '&quot; &quot;'))"    role="error">&NodeDEFname; array family='<value-of select='@family'/>' values must each be quoted </report>
      <report test="contains(@justify,' ') and not(contains(@justify,'&quot; &quot;'))"    role="error">&NodeDEFname; array justify='<value-of select='@justify'/>' values must each be quoted, need to include 2 legal values: &quot;BEGIN&quot; &quot;END&quot; &quot;FIRST&quot; &quot;MIDDLE&quot; </report>
      <report test="contains(upper-case(@justify),'LEFT')" role="error">&NodeDEFname; array justify='<value-of select='@justify'/>' value &quot;LEFT&quot; is not a legal enumeration value for justify field, use &quot;BEGIN&quot; instead (legal values: &quot;BEGIN&quot; &quot;END&quot; &quot;FIRST&quot; &quot;MIDDLE&quot;) </report>
      <report test="contains(upper-case(@justify),'RIGHT')" role="error">&NodeDEFname; array justify='<value-of select='@justify'/>' value &quot;RIGHT&quot; is not a legal enumeration value for justify field,allowed, use &quot;END&quot; instead (legal values: &quot;BEGIN&quot; &quot;END&quot; &quot;FIRST&quot; &quot;MIDDLE&quot;) </report>
      <report test="contains(upper-case(@justify),'TOP')" role="error">&NodeDEFname; array justify='<value-of select='@justify'/>' value &quot;TOP&quot; is not a legal enumeration value for justify field, use &quot;BEGIN&quot; instead (legal values: &quot;BEGIN&quot; &quot;END&quot; &quot;FIRST&quot; &quot;MIDDLE&quot;) </report>
      <report test="contains(upper-case(@justify),'BOTTOM')" role="error">&NodeDEFname; array justify='<value-of select='@justify'/>' value &quot;BOTTOM&quot; is not a legal enumeration value for justify field, use &quot;END&quot; instead (legal values: &quot;BEGIN&quot; &quot;END&quot; &quot;FIRST&quot; &quot;MIDDLE&quot;) </report>
      <report test="contains(upper-case(@justify),'CENTER')" role="error">&NodeDEFname; array justify='<value-of select='@justify'/>' value &quot;CENTER&quot; is not a legal enumeration value for justify field, use &quot;MIDDLE&quot; instead (legal values: &quot;BEGIN&quot; &quot;END&quot; &quot;FIRST&quot; &quot;MIDDLE&quot;) </report>
      <report test="not(@USE) and (@justify) and not($justifyIllegalValue) and not(@justify='&quot;BEGIN&quot;') and ($justifyQuoteCount = 2)"  role="warning">&NodeDEFname; array justify='<value-of select='@justify'/>' has only 1 value for major-axis justification, add another value for minor-axis justification:  &quot;BEGIN&quot; &quot;END&quot; &quot;FIRST&quot; &quot;MIDDLE&quot; (default is &quot;FIRST&quot;) </report>
      <report test="not(@USE) and (@justify) and ($justifyQuoteCount > 4)"  role="warning">&NodeDEFname; array justify='<value-of select='@justify'/>' has too many values, only 2 quoted values are needed: &quot;BEGIN&quot; &quot;END&quot; &quot;FIRST&quot; &quot;MIDDLE&quot; </report>
      <report test="(@horizontal='TRUE' )"  role="error">&NodeDEFname; horizontal='TRUE' capitalization is incorrect, define as horizontal='true' instead </report>
      <report test="(@horizontal='FALSE')"  role="error">&NodeDEFname; horizontal='FALSE' capitalization is incorrect, define as horizontal='false' instead </report>
      <report test="(@leftToRight='TRUE' )" role="error">&NodeDEFname; leftToRight='TRUE' capitalization is incorrect, define as leftToRight='true' instead </report>
      <report test="(@leftToRight='FALSE')" role="error">&NodeDEFname; leftToRight='FALSE' capitalization is incorrect, define as leftToRight='false' instead </report>
      <report test="(@topToBottom='TRUE' )" role="error">&NodeDEFname; topToBottom='TRUE' capitalization is incorrect, define as topToBottom='true' instead </report>
      <report test="(@topToBottom='FALSE')" role="error">&NodeDEFname; topToBottom='FALSE' capitalization is incorrect, define as topToBottom='false' instead </report>
      <!-- extraneous-quote tests for SFString enumeration fields -->
      <report test="contains(@language, '&quot;')" role="error">&NodeDEFname; language='<value-of select='@language'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <report test="contains(@style,    '&quot;')" role="error">&NodeDEFname; style='<value-of select='@style'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <report test="contains(@justify,  ',')"      role="warning">&NodeDEFname; justify='<value-of select='@style'/>' needs comments removed in order to pass strict XML Schema validation </report>
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Text'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Text' level='1'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= FillProperties ========== -->
    <rule context="FillProperties">
      <extends rule="DEFtests"/>
      <report test="(@hatchStyle &lt; 1)" role="warning">&NodeDEFname; hatchStyle='<value-of select='@hatchStyle'/>' is less than minimum defined value of 1 </report>
      <report test="(@hatchStyle > 19)" role="warning">&NodeDEFname; hatchStyle='<value-of select='@hatchStyle'/>' is greater than maximum defined value of 19 </report>
      <report test="(@filled='TRUE' )" role="error">&NodeDEFname; filled='TRUE' capitalization is incorrect, define as filled='true' instead </report>
      <report test="(@filled='FALSE')" role="error">&NodeDEFname; filled='FALSE' capitalization is incorrect, define as filled='false' instead </report>
      <report test="(@hatched='TRUE' )" role="error">&NodeDEFname; hatched='TRUE' capitalization is incorrect, define as hatched='true' instead </report>
      <report test="(@hatched='FALSE')" role="error">&NodeDEFname; hatched='FALSE' capitalization is incorrect, define as hatched='false' instead </report>
      <assert test="((/X3D[@profile='Full']) or (/X3D/head/component[@name='Shape'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Shape' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
    </rule>

    <!-- ========= LineProperties ========== -->
    <rule context="LineProperties">
      <extends rule="DEFtests"/>
      <report test="(number(@linetype) &lt; 1)" role="warning">&NodeDEFname; linetype='<value-of select='@linetype'/>' is less than minimum defined value of 1 </report>
      <report test="(number(@linetype) > 19)" role="warning">&NodeDEFname; linetype='<value-of select='@linetype'/>' is greater than maximum defined value of 19 </report>
      <report test="(@applied='TRUE' )" role="error">&NodeDEFname; applied='TRUE' capitalization is incorrect, define as applied='true' instead </report>
      <report test="(@applied='FALSE')" role="error">&NodeDEFname; applied='FALSE' capitalization is incorrect, define as applied='false' instead </report>
      <assert test="((/X3D[@profile='Full']) or (/X3D/head/component[@name='Shape'][number(@level) ge 2]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Shape' level='2'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
      <!-- commonly mismatched capitalization -->
      <report test="(count(@*[lower-case(local-name()) = 'linetype']            [not(local-name() = 'linetype')]            ) > 0)" role="error">&NodeDEFname; <value-of select="local-name(@*[lower-case(local-name()) = 'linetype'][1])"/> attribute capitalization-case mismatch, name instead needs to be linetype </report>
      <report test="(count(@*[lower-case(local-name()) = 'linewidthscalefactor'][not(local-name() = 'linewidthScaleFactor')]) > 0)" role="error">&NodeDEFname; <value-of select="local-name(@*[lower-case(local-name()) = 'linetype'][1])"/> attribute capitalization-case mismatch, name instead needs to be linewidthScaleFactor </report>
    </rule>

    <!-- ========= PointProperties ========== -->
    <rule context="PointProperties">
      <extends rule="DEFtests"/>
      <report test="(@pointSizeMaxValue &lt; @pointSizeMinValue)" role="warning">&NodeDEFname; pointSizeMaxValue='<value-of select='@pointSizeMaxValue'/>' is less than pointSizeMinValue='<value-of select='@pointSizeMinValue'/>' </report>
      <assert test="((/X3D[@profile='Full']) or (/X3D/head/component[@name='Shape'][number(@level) ge 5]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Shape' level='5'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
      <!-- commonly mismatched capitalization -->
      <report test="(count(@*[lower-case(local-name()) = 'pointsizemaxvalue']   [not(local-name() = 'pointSizeMaxValue')]   ) > 0)" role="error">&NodeDEFname; <value-of select="local-name(@*[lower-case(local-name()) = 'pointsizemaxvalue'][1])"/> attribute capitalization-case mismatch, name instead needs to be pointSizeMaxValue </report>
      <report test="(count(@*[lower-case(local-name()) = 'pointsizeminvalue']   [not(local-name() = 'pointSizeMinValue')]   ) > 0)" role="error">&NodeDEFname; <value-of select="local-name(@*[lower-case(local-name()) = 'pointsizeminvalue'][1])"/> attribute capitalization-case mismatch, name instead needs to be pointSizeMinValue </report>
      <report test="(count(@*[lower-case(local-name()) = 'pointsizescalefactor'][not(local-name() = 'pointSizeScaleFactor')]) > 0)" role="error">&NodeDEFname; <value-of select="local-name(@*[lower-case(local-name()) = 'pointsizescalefactor'][1])"/> attribute capitalization-case mismatch, name instead needs to be pointSizeScaleFactor </report>
      <report test="(string-length(@pointSizeAttenuation) > 0)" role="error">&NodeDEFname; field pointSizeAttenuation='<value-of select='@pointSizeAttenuation'/>' is misnamed, correct name is attenuation </report>
    </rule>

    <!-- ========= Sound ========== -->
    <rule context="Sound">
      <extends rule="DEFtests"/>
      <assert test="@USE or AudioClip or MovieTexture" role="warning">&NodeDEFname; has no child AudioClip or MovieTexture node </assert>
      <report test="MovieTexture[not(@containerField='source')]" role="error">&NodeDEFname; MovieTexture containerField='<value-of select='@containerField'/>' is incorrect, must have containerField='source' instead </report>
      <report test="AudioClip[   not(@containerField='source')]" role="error">&NodeDEFname; AudioClip containerField='<value-of select='@containerField'/>' is incorrect, must have containerField='source' instead </report>
      <report test="(@spatialize='TRUE' )" role="error">&NodeDEFname; spatialize='TRUE' capitalization is incorrect, define as spatialize='true' instead </report>
      <report test="(@spatialize='FALSE')" role="error">&NodeDEFname; spatialize='FALSE' capitalization is incorrect, define as spatialize='false' instead </report>
      <report test="not(@USE) and (contains(@location,' 0 ') or contains(@location,' 0.0 ')) and not(parent::Transform)" role="warning">&NodeDEFname; location='<value-of select='@location'/>' has height of sound ellipse centered on ground plane, consider changing location y-value to 1.6 in order to match typical avatar height (in meters) </report>
      <report test="not(@USE) and ((0 > number(@minBack))  or (0 > number(@maxBack)))"  role="error">&NodeDEFname; minBack='<value-of select='@minBack'/>' maxBack='<value-of select='@maxBack'/>' has negative value for distance along back direction </report>
      <report test="not(@USE) and ((0 > number(@minFront)) or (0 > number(@maxFront)))" role="error">&NodeDEFname; minFront='<value-of select='@minFront'/>' maxFront='<value-of select='@maxFront'/>' has negative value for distance along front direction </report>
      <report test="not(@USE) and (number(@minBack)  > number(@maxBack))  and (number(@minBack)  > 0) and (number(@maxBack)  > 0)" role="error">&NodeDEFname; minBack='<value-of select='@minBack'/>' (number=<value-of select='number(@minBack)'/>) maxBack='<value-of select='@maxBack'/>' (number=<value-of select='number(@maxBack)'/>) has minBack value greater than maxBack value </report>
      <report test="not(@USE) and (number(@minBack)  > 10) and (string-length(@maxBack)=0)"  role="error">&NodeDEFname; minBack='<value-of select='@minBack'/>' maxBack='<value-of select='@maxBack'/>' has minBack value greater than default maxBack value of 10 </report>
      <report test="not(@USE) and (number(@minFront) > number(@maxFront)) and (number(@minFront) > 0) and (number(@maxFront) > 0)" role="error">&NodeDEFname; minFront='<value-of select='@minFront'/>' (number=<value-of select='number(@minFront)'/>) maxFront='<value-of select='@maxFront'/>' (number=<value-of select='number(@mazFront)'/>) has minFront value greater than maxFront value </report>
      <report test="not(@USE) and (number(@minFront) > 10) and (string-length(@maxFront)=0)" role="error">&NodeDEFname; minFront='<value-of select='@minFront'/>' maxFront='<value-of select='@maxFront'/>' has minFront value greater than default maxFront value of 10 </report>
      <report test="not(@USE) and (1 > number(@maxBack) ) and (number(@maxBack)  > 0) and (string-length(@minBack)=0)"  role="error">&NodeDEFname; minBack='<value-of select='@minBack'/>' maxBack='<value-of select='@maxBack'/>' has maxBack value less than default minBack value of 1 </report>
      <report test="not(@USE) and (1 > number(@maxFront)) and (number(@maxFront) > 0) and (string-length(@minFront)=0)" role="error">&NodeDEFname; minFront='<value-of select='@minFront'/>' maxFront='<value-of select='@maxFront'/>' has maxFront value less than default minFront value of 1 </report>
      <!-- TODO check other fields -->
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Sound'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Sound' level='1'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= AudioClip ========== -->
    <rule context="AudioClip">
      <let name="parentAudioGraphNode" value="(local-name(..) = 'Analyser') or (local-name(..) = 'AudioDestination') or (local-name(..) = 'BiquadFilter') or (local-name(..) = 'BufferAudioSource') or (local-name(..) = 'ChannelMerger') or (local-name(..) = 'ChannelSelector') or (local-name(..) = 'ChannelSplitter') or (local-name(..) = 'Convolver') or (local-name(..) = 'Delay') or (local-name(..) = 'DynamicsCompressor') or (local-name(..) = 'Gain') or (local-name(..) = 'ListenerPointSource') or (local-name(..) = 'MicrophoneSource') or (local-name(..) = 'OscillatorSource') or (local-name(..) = 'SpatialSound') or (local-name(..) = 'StreamAudioDestination') or (local-name(..) = 'StreamAudioSource') or (local-name(..) = 'WaveShaper')"/>
      <extends rule="DEFtests"/>
      <extends rule="hasUrl"/>
      <extends rule="descriptionTests"/>
      <report test="../Sound and not(@containerField='source') and not(@containerField='')" role="error">&NodeDEFname; has illegal @containerField=<value-of select='@containerField'/>, must use @containerField=&apos;source&apos; when parent node is &lt;Sound&gt; </report>
      <report test="not(starts-with(/X3D/@version, '4')) and not(parent::LoadSensor) and not(parent::Sound) and not(parent::field) and not(parent::fieldValue)" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/> node, must be contained by Sound or LoadSensor node (or else within field declaration or fieldValue initialization) </report>
      <report test="    starts-with(/X3D/@version, '4')  and not(parent::LoadSensor) and not(parent::Sound) and not(parent::field) and not(parent::fieldValue) and not($parentAudioGraphNode)" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/> node, must be contained by Sound or LoadSensor or audio-processing node (or else within field declaration or fieldValue initialization) </report>
      <report test="    starts-with(/X3D/@version, '4')  and ((parent::LoadSensor) or ($parentAudioGraphNode)) and not(@containerField='children')" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/> node with @containerField=&apos;<value-of select='@containerField'/>&apos; but must have @containerField=&apos;children&apos; in X3D4 </report>
      <!-- file extension checks -->
      <report test="(string-length(@url) > 2) and not(contains(@url,'.wav')) and not(contains(@url,'.mid')) and not(contains(@url,'.midi'))" role="warning">&NodeDEFname; url array does not contains link to .wav or .midi sound files, browsers not required to support other formats (url='<value-of select='@url'/>') </report>
      <report test="(@loop='TRUE' )" role="error">&NodeDEFname; loop='TRUE' capitalization is incorrect, define as loop='true' instead </report>
      <report test="(@loop='FALSE')" role="error">&NodeDEFname; loop='FALSE' capitalization is incorrect, define as loop='false' instead </report>
      <!-- TODO XSLT 2.0:
      and not(contains(@url,'.wav&quot;')) and not(contains(@url,'.midi&quot;'))
                                              and not(ends-with(@url,'.wav'))      and not(ends-with(@url,'.midi'))
      -->
      <!-- TODO test other parameters -->
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Sound'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Sound' level='1'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= ImageTexture | MovieTexture ========== -->
    <rule context="ImageTexture | MovieTexture">
      <let name="parentAudioGraphNode" value="(local-name(..) = 'Analyser') or (local-name(..) = 'AudioDestination') or (local-name(..) = 'BiquadFilter') or (local-name(..) = 'BufferAudioSource') or (local-name(..) = 'ChannelMerger') or (local-name(..) = 'ChannelSelector') or (local-name(..) = 'ChannelSplitter') or (local-name(..) = 'Convolver') or (local-name(..) = 'Delay') or (local-name(..) = 'DynamicsCompressor') or (local-name(..) = 'Gain') or (local-name(..) = 'ListenerPointSource') or (local-name(..) = 'MicrophoneSource') or (local-name(..) = 'OscillatorSource') or (local-name(..) = 'SpatialSound') or (local-name(..) = 'StreamAudioDestination') or (local-name(..) = 'StreamAudioSource') or (local-name(..) = 'WaveShaper')"/>
      <extends rule="DEFtests"/>
      <extends rule="hasUrl"/>
      <!-- MovieTexture has description field, TODO ImageTexture needs it too -->
      <extends rule="descriptionTests"/>
      <report test="(parent::Shape)" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/> node, but must be contained by Appearance node </report>
      <report test="(local-name()='ImageTexture') and not(parent::Shape) and not(parent::Appearance) and not(parent::LoadSensor) and not(parent::MultiTexture) and not(parent::TextureBackground) and not(parent::ComposedCubeMapTexture)                        and not(parent::field) and not(parent::fieldValue)" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/> node, but must be contained by Appearance, LoadSensor, MultiTexture, TextureBackground or ComposedCubeMapTexture node (or else within field declaration or fieldValue initialization) </report>
      <report test="(local-name()='MovieTexture') and not(parent::Shape) and not(parent::Appearance) and not(parent::LoadSensor) and not(parent::MultiTexture) and not(parent::TextureBackground) and not(parent::ComposedCubeMapTexture) and not(parent::Sound) and not(parent::field) and not(parent::fieldValue)" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/> node, but must be contained by Sound, Appearance, LoadSensor, MultiTexture, TextureBackground or ComposedCubeMapTexture node (or else within field declaration or fieldValue initialization) </report>
      <report test="../Appearance and not(@containerField='texture') and not(@containerField='')"  role="error">&NodeDEFname; has illegal @containerField=<value-of select='@containerField'/>, must use @containerField=&apos;texture&apos; when parent node is &lt;Appearance&gt; </report>
      <report test="(local-name()='MovieTexture') and ../Sound and not(@containerField='source') and not(@containerField='') and (local-name()='MovieTexture')" role="error">&NodeDEFname; has illegal @containerField=<value-of select='@containerField'/>, must use @containerField=&apos;source&apos; when parent node is &lt;Sound&gt; </report>
      <report test="(local-name()='MovieTexture') and not(starts-with(/X3D/@version, '4')) and not(parent::LoadSensor) and not(parent::Sound) and not(parent::field) and not(parent::fieldValue)" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/> node, must be contained by Sound or LoadSensor node (or else within field declaration or fieldValue initialization) </report>
      <report test="(local-name()='MovieTexture') and     starts-with(/X3D/@version, '4')  and not(parent::LoadSensor) and not(parent::Sound) and not(parent::field) and not(parent::fieldValue) and not($parentAudioGraphNode)" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/> node, must be contained by Sound or LoadSensor or audio-processing node (or else within field declaration or fieldValue initialization) </report>
      <report test="(local-name()='MovieTexture') and     starts-with(/X3D/@version, '4')  and ((parent::LoadSensor) or ($parentAudioGraphNode)) and not(@containerField='children')" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/> node with @containerField=&apos;<value-of select='@containerField'/>&apos; but must have @containerField=&apos;children&apos; in X3D4 </report>
      <report test="../TextureBackground and not(@containerField='topTexture') and not(@containerField='bottomTexture') and not(@containerField='leftTexture') and not(@containerField='rightTexture') and not(@containerField='topTexture') and not(@containerField='bottomTexture')"  role="error">&NodeDEFname; has illegal @containerField=<value-of select='@containerField'/>, must use @containerField=&apos;topTexture&apos; (bottomTexture leftTexture rightTexture frontTexture or backTexture) when parent node is &lt;TextureBackground&gt; </report>
      <!-- file extension checks -->
      <report test="(local-name()='ImageTexture') and (string-length(@url) > 2) and not(contains(@url,'.png')) and not(contains(@url,'.PNG')) and not(contains(@url,'.jpg')) and not(contains(@url,'.JPG'))and not(contains(@url,'.jpg')) and not(contains(@url,'.jpeg')) and not(contains(@url,'.JPEG')) and not(contains(@url,'.gif')) and not(contains(@url,'.GIF')) " role="warning">&NodeDEFname; url array does not contains link to .png .jpg or .gif image(s), browsers not required to support other formats (url='<value-of select='@url'/>') </report>
      <!-- TODO XSLT 2.0:
      and not(contains(@url,'.png&quot;')) and not(contains(@url,'.jpg&quot;')) and not(contains(@url,'.gif&quot;'))
                                                                       and not(ends-with(@url,'.png'))      and not(ends-with(@url,'.jpg'))      and not(ends-with(@url,'.gif'))
      -->
      <report test="(local-name()='MovieTexture') and (string-length(@url) > 2) and not(contains(@url,'.mpg'))" role="warning">&NodeDEFname; url array does not contain link to .mpg movie(s), browsers not required to support other formats (url='<value-of select='@url'/>') </report>
      <report test="(@repeatS='TRUE' )" role="error">&NodeDEFname; repeatS='TRUE' capitalization is incorrect, define as repeatS='true' instead </report>
      <report test="(@repeatS='FALSE')" role="error">&NodeDEFname; repeatS='FALSE' capitalization is incorrect, define as repeatS='false' instead </report>
      <report test="(@repeatT='TRUE' )" role="error">&NodeDEFname; repeatT='TRUE' capitalization is incorrect, define as repeatT='true' instead </report>
      <report test="(@repeatT='FALSE')" role="error">&NodeDEFname; repeatT='FALSE' capitalization is incorrect, define as repeatT='false' instead </report>
      <!-- TODO XSLT 2.0:
      and not(contains(@url,'.mpg&quot;')) and not(ends-with(@url,'.mpg'))
      -->
      <!-- TODO test other parameters -->
      <report test="(local-name()='MovieTexture') and not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Texturing'][number(@level) ge 3] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Texturing' level='3'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= PixelTexture ========== -->
    <rule context="PixelTexture">
      <let name="image"             value="@image"/>
      <let name="width"             value="number(substring-before(@image,' '))"/>
      <let name="height"            value="number(substring-before(substring-after(@image,' '),' '))"/>
      <let name="components"        value="number(substring-before(substring-after(substring-after(@image,' '),' '),' '))"/>
      <let name="nonNumericResidue" value="translate(normalize-space(@image),'+-0123456789ABCDEFabcdef#x, ','')"/>
      <let name="defaultImage"      value="(normalize-space(@image)='0 0 0') or (normalize-space(@image)=' ') or (normalize-space(@image)='')"/>
      <let name="valueCount"        value="string-length($image)  - string-length(translate($image,  ' ','')) + 1 - 3"/>
      <extends rule="DEFtests"/>
      <report test="(parent::Shape)" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/> node, but must be contained by Appearance node </report>
      <report test="not(parent::Shape) and not(parent::Appearance) and not(parent::MultiTexture) and not(parent::TextureBackground) and not(parent::ComposedCubeMapTexture) and not(parent::field) and not(parent::fieldValue)" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/> node, but must be contained by Appearance, MultiTexture, TextureBackground or ComposedCubeMapTexture node (or else within field declaration or fieldValue initialization) </report>
      <assert test="@image"  role="error">&NodeDEFname; has no image array for pixel values </assert>
      <report test="not(@USE) and ($defaultImage)"  role="warning">&lt;<name/> DEF='<value-of select='$DEF'/>' image='<value-of select='(@image)'/>'/&gt; has empty or default image array values </report>
      <report test="not(@USE) and ($image) and not ($defaultImage) and preceding::PixelTexture[@image=$image] and not //ROUTE[@toField=$DEF] and not(ancestor::ProtoDeclare) and not(parent::field or parent::fieldValue)"  role="warning">&NodeDEFname; has identical image array matching a preceding PixelTexture, consider DEF/USE to avoid duplication (image='<value-of select='substring(@image,0,40)'/>') </report>
      <assert test="not(@image) or $defaultImage or ($width ge 0)"  role="error">&NodeDEFname; illegal value for image width: <value-of select='$width'/> </assert>
      <assert test="not(@image) or $defaultImage or ($height ge 0)" role="error">&NodeDEFname; illegal value for image height: <value-of select='$height'/> </assert>
      <assert test="not(@image) or $defaultImage or (($components gt 0) and ($components le 4))" role="error">&NodeDEFname; illegal value for image component count: <value-of select='$components'/> (must be 0..4) </assert>
      <assert test="not(@image) or ($nonNumericResidue='')"  role="error">&NodeDEFname; illegal non-numeric characters in image array: <value-of select='$nonNumericResidue'/> </assert>
      <!-- array-size counting checks, adjusted to remove first three array-size values -->
      <assert test="($valueCount = ($width * $height)) or (($height=0) and ($width=0) and ($valueCount=0))"  role="error">&NodeDEFname; illegal number of image values (expected zero or <value-of select='($width * $height)'/> values after initial 3 array-size parameters, found <value-of select='$valueCount'/>) </assert>
      <report test="(local-name()='MovieTexture') and (string-length(@url) > 2) and not(contains(@url,'.mpg'))" role="warning">&NodeDEFname; url array does not contain link to .mpg movie(s), browsers not required to support other formats (url='<value-of select='@url'/>') </report>
      <report test="(@repeatS='TRUE' )" role="error">&NodeDEFname; repeatS='TRUE' capitalization is incorrect, define as repeatS='true' instead </report>
      <report test="(@repeatS='FALSE')" role="error">&NodeDEFname; repeatS='FALSE' capitalization is incorrect, define as repeatS='false' instead </report>
      <report test="(@repeatT='TRUE' )" role="error">&NodeDEFname; repeatT='TRUE' capitalization is incorrect, define as repeatT='true' instead </report>
      <report test="(@repeatT='FALSE')" role="error">&NodeDEFname; repeatT='FALSE' capitalization is incorrect, define as repeatT='false' instead </report>
    </rule>

    <!-- ========= Anchor ========== -->
    <rule context="Anchor">
      <let name="bookmark"  value="translate(substring-after(normalize-space(@url),'#'),'&quot;','')"/>
      <let name="parameterStringResidueApos" value="translate(@parameter,' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@#$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;','')"/>
      <let name="parameterStringResidue" value='translate($parameterStringResidueApos,"&apos;","")'/>
      <let name="parameterQuoteCount" value="string-length($parameterStringResidue)"/>
      <let name="parameterNormalizedString" value="normalize-space(@parameter)"/>
      <let name="parameterLastCharacter" value="substring($parameterNormalizedString,string-length($parameterNormalizedString))"/>
      <extends rule="DEFtests"/>
      <extends rule="boundingBoxTests"/>
      <extends rule="NeedsChildNode"/>
      <extends rule="hasUrl"/>
      <extends rule="descriptionTests"/>
      <!-- test bookmark -->
      <report test="(string-length(@url) > 2) and starts-with(normalize-space(@url),'#') and not(//Viewpoint[@DEF=$bookmark]) and not(//OrthoViewpoint[@DEF=$bookmark]) and not(//ProtoInstance[@DEF=$bookmark])"  role="warning">&NodeDEFname; with bookmark url='<value-of select='@url'/>' does not have corresponding &lt;Viewpoint DEF='<value-of select='$bookmark'/>'/&gt;, OrthoViewpoint or ProtoInstance node </report>
      <!-- parameter field MFString array checks -->
      <report test="false()" role="trace">$parameterQuoteCount=<value-of select='$parameterQuoteCount'/>, $parameterStringResidue=<value-of select='$parameterStringResidue'/>, $parameterStringResidueApos=<value-of select='$parameterStringResidueApos'/> , $parameterLastCharacter=<value-of select='$parameterLastCharacter'/> </report>
      <report test="not(@USE) and contains($parameterNormalizedString,'&quot;&quot;') and not(contains($parameterNormalizedString,'\&quot;&quot;') or contains($parameterNormalizedString,'&quot;\&quot;') or contains($parameterNormalizedString,'&quot;&quot; &quot;') or contains($parameterNormalizedString,'&quot; &quot;&quot;'))"  role="error">&NodeDEFname; array parameter='<value-of select='@parameter'/>' has questionable line-break &quot;&quot; quote marks </report>
      <report test="not(@USE) and (@parameter) and not(contains(@parameter,'&quot;'))"    role="error">&NodeDEFname; array parameter='<value-of select='@parameter'/>' needs to begin and end with &quot;quote marks&quot;.  Corrected example: &lt;<name/> DEF='<value-of select='$DEF'/>' parameter=&apos;&quot;<value-of select='(@parameter)'/>&quot;&apos;/&gt; </report>
      <report test="not(@USE) and (@parameter) and    (contains(@parameter,'&quot;')) and (($parameterQuoteCount div 2)!=round($parameterQuoteCount div 2)) and not(contains(@parameter,'\&quot;'))"    role="error">&NodeDEFname; array parameter='<value-of select='@parameter'/>' has <value-of select='($parameterQuoteCount)'/> unescaped &quot;quote marks&quot; but instead needs to have an even number of matched pairs </report>
      <report test="not(@USE) and (@parameter) and (contains(@parameter,'\&quot;'))"    role="warning">&NodeDEFname; array parameter='<value-of select='@parameter'/>' has <value-of select='($parameterQuoteCount)'/> quote marks with at least one escaped quote mark \&quot; so double-check to ensure paired &quot;quote marks&quot; for each line are matched </report>
      <report test="not(@USE) and ($parameterNormalizedString) and not(starts-with($parameterNormalizedString,'&quot;')) and not($parameterLastCharacter='&quot;') and (contains(@parameter,'&quot;'))"    role="error">&NodeDEFname; array parameter='<value-of select='@parameter'/>' needs to begin and end with &quot;quote marks&quot; </report>
      <report test="not(@USE) and ($parameterNormalizedString) and not(starts-with($parameterNormalizedString,'&quot;')) and    ($parameterLastCharacter='&quot;')"                                     role="error">&NodeDEFname; array parameter='<value-of select='@parameter'/>' needs to begin with quote mark &quot; </report>
      <report test="not(@USE) and ($parameterNormalizedString) and    (starts-with($parameterNormalizedString,'&quot;')) and not($parameterLastCharacter='&quot;')"                                     role="error">&NodeDEFname; array parameter='<value-of select='@parameter'/>' needs to end with quote mark &quot; </report>
    </rule>

    <!-- ========= Inline ========== -->
    <rule context="Inline">
      <extends rule="DEFtests"/>
      <extends rule="NoChildNode"/>
      <extends rule="boundingBoxTests"/>
      <extends rule="hasUrl"/>
      <!-- file extension checks -->
      <report test="(string-length(@url) > 2) and not(contains(@url,'.x3d')) and not(contains(@url,'.x3dv')) and not(contains(@url,'.x3db')) and not(contains(@url,'.wrl'))" role="warning">&NodeDEFname; url array does not contains link to .x3d .x3dv .x3db or .wrl scenes, browsers not required to support other scene formats (url='<value-of select='@url'/>') </report>
      <report test="(@load='TRUE' )" role="error">&NodeDEFname; load='TRUE' capitalization is incorrect, define as load='true' instead </report>
      <report test="(@load='FALSE')" role="error">&NodeDEFname; load='FALSE' capitalization is incorrect, define as load='false' instead </report>
      <!-- TODO XSLT 2.0:
      and not(contains(@url,'.x3d&quot;')) and not(contains(@url,'.x3dv&quot;')) and not(contains(@url,'.x3db&quot;')) and not(contains(@url,'.wrl&quot;'))
                                              and not(ends-with(@url,'.x3d'))      and not(ends-with(@url,'.x3dv'))      and not(ends-with(@url,'.x3db'))      and not(ends-with(@url,'.wrl'))
      -->
      <!-- TODO Check for proper X3D version within Inline that is less than or equal to parent scene.  XSLT v2.0 only
      <let name="x3dVersion"        value="//X3D/@version"/>
      <let name="firstUrl"          value="substring-before(substring-after(@url,'&quot;'),'&quot;')"/>
      <let name="httpUrl"           value="concat('http',substring-before(substring-after(@url,'&quot;http'),'&quot;'))"/>
      <report test="not(@USE) and true()" role="diagnostic"> firstUrl=<value-of select='$firstUrl'/>, httpUrl=<value-of select='$httpUrl'/> </report>
      <let name="httpUrlAvailable"  value="doc-available($httpUrl)"/>
      <let name="httpUrlDocument"  value="document($httpUrl)"/>
      <let name="httpUrlDocumentX3dVersion"          value="if (not($httpUrl='http')) then "/>
      <report test="not($httpUrl='http')" role="trace"> httpUrlDocument X3D version=<value-of select='document($httpUrl)//X3D/@version'/> </report>
      <report test="not($httpUrl='http') and not($x3dVersion=document($httpUrl)//X3D/@version)" role="error">Parent document X3D version='<value-of select='$x3dVersion'/>' containing &NodeDEFname; must match Inline X3D version='<value-of select='document($httpUrl)//X3D/@version'/>' </report>
      -->
      <!-- Security check: detect first-order recursion, note security vulnerability if found. Difficult to test directly without knowing name of file. -->
      <!-- X3D players need to implement this test at run time, both for initial and subsequent Inline loading. -->
	  <report test="(string-length(normalize-space(//meta[@name='title']/@content)) > 0) and contains(@url, //meta[@name='title']/@content)" role="error">&NodeDEFname; appears to recursively load itself, which is a major security violation! https://www.web3d.org/x3d/content/examples/X3dResources.html#Security </report>
      <!-- TODO test load and other parameters -->
      <!-- TODO test no recursive self-referential load of url matching head/meta/title or head/meta/identifier values -->
      <!-- TODO test profile match with external files, both for Inline and ExternProtoDeclare, possibly using document() function -->
      <report test="not(/X3D[(@profile='Interactive') or (@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Networking'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Networking' level='2'/&gt; or &lt;X3D profile='Interactive'/&gt; </report>
    </rule>

    <!-- ========= Billboard ========== -->
    <rule context="Billboard">
      <extends rule="DEFtests"/>
      <extends rule="boundingBoxTests"/>
      <extends rule="NeedsChildNode"/>
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Navigation'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Navigation' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
      <!-- axisOfRotation='0 0 0' is legal and always faces viewer -->
    </rule>

    <!-- ========= Collision ========== -->
    <rule context="Collision">
      <extends rule="DEFtests"/>
      <extends rule="enabledOnTests"/>
      <extends rule="boundingBoxTests"/>
      <extends rule="NeedsChildNode"/>
      <report test="count(*/@containerField='proxy') > 1" role="warning">&NodeDEFname; has <value-of select="count(*/@containerField='proxy')"/> child nodes with containerField='proxy' but no more than one is allowed </report>
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Navigation'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Navigation' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= Group ========== -->
    <rule context="Group">
      <extends rule="DEFtests"/>
      <extends rule="boundingBoxTests"/>
      <extends rule="NeedsChildNode"/>
    </rule>

    <!-- ========= StaticGroup ========== -->
    <rule context="StaticGroup">
      <!-- DEFtests include checks to avoid DEF or USE nodes under a StaticGroup -->
      <extends rule="DEFtests"/>
      <extends rule="boundingBoxTests"/>
      <extends rule="NeedsChildNode"/>
      <assert test="((/X3D[@profile='Full']) or (/X3D/head/component[@name='Grouping'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Grouping' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
      <!-- ROUTE rules test that no events connect from/to StaticGroup descendants -->
    </rule>

    <!-- ========= LOD ========== -->
    <rule context="LOD">
      <extends rule="DEFtests"/>
      <extends rule="boundingBoxTests"/>
      <extends rule="NeedsChildNode"/>
      <report test="starts-with(normalize-space(@range),'-') or contains(normalize-space(@range),' -')" role="warning">&NodeDEFname; range='<value-of select='@range'/>' values must not be negative </report>
      <report test="(@forceTransitions='true') and (/X3D/@version = '3.0')" role="error">&NodeDEFname; forceTransitions='<value-of select='@forceTransitions'/>' requires &lt;X3D version=&apos;3.1&apos;&gt; or higher, but found version='<value-of select='/X3D/@version'/>' </report>
      <report test="(@forceTransitions='TRUE' )" role="error">&NodeDEFname; forceTransitions='TRUE' capitalization is incorrect, define as forceTransitions='true' instead </report>
      <report test="(@forceTransitions='FALSE')" role="error">&NodeDEFname; forceTransitions='FALSE' capitalization is incorrect, define as forceTransitions='false' instead </report>
      <!-- TODO test range array and number of children -->
      <!-- TODO warn if nested LOD nodes are present -->
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Navigation'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Navigation' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= Switch ========== -->
    <rule context="Switch">
      <let name="parentName" value="local-name(..)"/>
      <extends rule="DEFtests"/>
      <extends rule="boundingBoxTests"/>
      <extends rule="NeedsChildNode"/>
      <report test="ExternProtoDeclare" role="warning">&NodeDEFname; child element ExternProtoDeclare is ambiguous since it is not a node and not a switchable child </report>
      <report test="ProtoDeclare" role="warning">&NodeDEFname; child element ProtoDeclare is ambiguous since it is not a node and not a switchable child </report>
      <report test="ROUTE" role="warning">&NodeDEFname; child element ROUTE  is ambiguous since it is not a node and not a switchable child... </report>
      <report test="ROUTE" role="hint">&lt;ROUTE fromNode='<value-of select='ROUTE/@fromNode'/>' fromField='<value-of select='ROUTE/@fromField'/>' toNode='<value-of select='ROUTE/@toNode'/>' toField='<value-of select='ROUTE/@toField'/>'/&gt; cannot be contained inside of &NodeDEFname; </report>
      <assert test="(/X3D[(@profile='Interactive') or (@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Grouping'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Grouping' level='2'/&gt; or &lt;X3D profile='Interactive'/&gt; </assert>
      <!-- TODO test whichChoice value and number of children -->
    </rule>

    <!-- ========= Transform ========== -->
    <rule context="Transform">
      <extends rule="DEFtests"/>
      <extends rule="boundingBoxTests"/>
      <extends rule="NeedsChildNode"/>
      <report test="starts-with(normalize-space(@rotation),'0 0 0 ') or starts-with(normalize-space(@rotation),'0.0 0.0 0.0 ')" role="error">&NodeDEFname; rotation='<value-of select='@rotation'/>' has illegal zero-magnitude axis values (can omit if expecting default value) </report>
      <report test="starts-with(normalize-space(@scaleOrientation),'0 0 0 ') or starts-with(normalize-space(@scaleOrientation),'0.0 0.0 0.0 ')" role="error">&NodeDEFname; scaleOrientation='<value-of select='@scaleOrientation'/>' has illegal zero-magnitude axis values (can omit if expecting default value) </report>
    </rule>

    <!-- ========= abstract: backgroundNode ========== -->
    <rule id="backgroundNode" abstract="true">
      <let name="skyColor"                     value="concat(' ',normalize-space(translate(@skyColor, ',',' ')))"/>
      <let name="skyColorCount"                value="string-length($skyColor)              - string-length(translate($skyColor,  ' ',''))"/>
      <let name="groundColor"                  value="concat(' ',normalize-space(translate(@groundColor, ',',' ')))"/>
      <let name="groundColorCount"             value="string-length($groundColor)              - string-length(translate($groundColor,  ' ',''))"/>
      <extends rule="DEFtests"/>
      <extends rule="NoLodSwitchParent"/>
      <report test="contains($skyColor,'-')"  role="warning">&NodeDEFname; contains a negative skyColor array value, skyColor='<value-of select='@skyColor'/>' </report>
      <!-- the following test does not catch values between 1.0 and 2.0 -->
      <report test="contains($skyColor,' 2') or contains($skyColor,' 3') or contains($skyColor,' 4') or contains($skyColor,' 5') or contains($skyColor,' 6') or contains($skyColor,' 7') or contains($skyColor,' 8') or contains($skyColor,' 9') or contains($skyColor,' 1.1') or contains($skyColor,' 1.2') or contains($skyColor,' 1.3') or contains($skyColor,' 1.4') or contains($skyColor,' 1.5') or contains($skyColor,' 1.6') or contains($skyColor,' 1.7') or contains($skyColor,' 1.8') or contains($skyColor,' 1.9')"  role="warning">&NodeDEFname; skyColor='<value-of select='@skyColor'/>' contains a value greater than 1 </report>
      <report test="(string-length(normalize-space($skyColor)) > 0) and (($skyColorCount div 3)!=round($skyColorCount div 3))"    role="warning">&NodeDEFname; skyColor array has <value-of select='($skyColorCount div 3)'/> triples, likely has incorrect number of values or missing whitespace </report>
      <report test="contains($groundColor,'-')"  role="warning">&NodeDEFname; contains a negative groundColor array value, groundColor='<value-of select='@groundColor'/>' </report>
      <!-- the following test does not catch values between 1.0 and 2.0 -->
      <report test="contains($groundColor,' 2') or contains($groundColor,' 3') or contains($groundColor,' 4') or contains($groundColor,' 5') or contains($groundColor,' 6') or contains($groundColor,' 7') or contains($groundColor,' 8') or contains($groundColor,' 9') or contains($groundColor,' 1.1') or contains($groundColor,' 1.2') or contains($groundColor,' 1.3') or contains($groundColor,' 1.4') or contains($groundColor,' 1.5') or contains($groundColor,' 1.6') or contains($groundColor,' 1.7') or contains($groundColor,' 1.8') or contains($groundColor,' 1.9')"  role="warning">&NodeDEFname; groundColor='<value-of select='@groundColor'/>' contains a value greater than 1 </report>
      <report test="(string-length(normalize-space($groundColor)) > 0) and (($groundColorCount div 3)!=round($groundColorCount div 3))"    role="warning">&NodeDEFname; groundColor array has <value-of select='($groundColorCount div 3)'/> triples, likely has incorrect number of values or missing whitespace </report>
      <!-- TODO if geospatial scene, ensure proper parent node -->
      <!-- TODO comparison counting checks between corresponding Color and Angle arrays -->
    </rule>

    <!-- ========= Background ========== -->
    <rule context="Background">
      <extends rule="backgroundNode"/>
      <extends rule="NoChildNode"/>
    </rule>

    <!-- ========= TextureBackground ========== -->
    <rule context="TextureBackground">
      <extends rule="backgroundNode"/>
      <!-- check for containerField mixup, Background and TextureBackground -->
      <report test="(*[@containerField='texture'])"   role="error">&NodeDEFname; child node with default containerField='texture' attribute needs to be uniquely renamed containerField='frontTexture' or backTexture, leftTexture, rightTexture, topTexture or bottomTexture </report>
      <report test="(*[@containerField='frontUrl'])"  role="error">&NodeDEFname; child node with containerField='frontUrl' attribute needs to be renamed containerField='frontTexture' </report>
      <report test="(*[@containerField='backUrl'])"   role="error">&NodeDEFname; child node with containerField='backUrl' attribute needs to be renamed containerField='backTexture' </report>
      <report test="(*[@containerField='leftUrl'])"   role="error">&NodeDEFname; child node with containerField='leftUrl' attribute needs to be renamed containerField='leftTexture' </report>
      <report test="(*[@containerField='rightUrl'])"  role="error">&NodeDEFname; child node with containerField='rightUrl' attribute needs to be renamed containerField='rightTexture' </report>
      <report test="(*[@containerField='topUrl'])"    role="error">&NodeDEFname; child node with containerField='topUrl' attribute needs to be renamed containerField='topTexture' </report>
      <report test="(*[@containerField='bottomUrl'])" role="error">&NodeDEFname; child node with containerField='bottomUrl' attribute needs to be renamed containerField='bottomTexture' </report>
      <report test="count(*[local-name() = 'frontTexture'])  > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='frontTexture' </report>
      <report test="count(*[local-name() = 'backTexture'])   > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='backTexture' </report>
      <report test="count(*[local-name() = 'leftTexture'])   > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='leftTexture' </report>
      <report test="count(*[local-name() = 'rightTexture'])  > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='rightTexture' </report>
      <report test="count(*[local-name() = 'topTexture'])    > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='topTexture' </report>
      <report test="count(*[local-name() = 'bottomTexture']) > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='bottomTexture' </report>
      <!-- X3D v3.0 but requires extra component statement even for Immersive profile -->
      <assert test="((/X3D[@profile='Full']) or (/X3D/head/component[@name='EnvironmentalEffects'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='EnvironmentalEffects' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
    </rule>
    
    <!-- ========= abstract: fogNode ========== -->
    <rule id="fogNode" abstract="true">
      <!--<let name="color"                     value="normalize-space(translate(@color, ',',' '))"/>
      <let name="colorCount"                value="string-length($color)              - string-length(translate($color,  ' ','')) + 1"/>
      <extends rule="DEFtests"/>-->
      <extends rule="colorField"/>
      <extends rule="NoChildNode"/>
      <extends rule="NoLodSwitchParent"/>
      <report test="(string-length(normalize-space($color)) > 0)  and ($colorCount != 3)"    role="warning">&NodeDEFname; color='<value-of select='@color'/>' has <value-of select='($colorCount)'/> values instead of 3 </report>
    </rule>

    <!-- ========= Fog ========== -->
    <rule context="Fog">
      <extends rule="fogNode"/>
      <!-- extraneous-quote tests for SFString enumeration fields -->
      <report test="contains(@fogType, '&quot;')" role="error">&NodeDEFname; fogType='<value-of select='@fogType'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <report test="not(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='EnvironmentalEffects'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='EnvironmentalEffects' level='2'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
    </rule>

    <!-- ========= LocalFog ========== -->
    <rule context="LocalFog">
      <extends rule="fogNode"/>
      <extends rule="X3Dversion3.1"/>
      <!-- extraneous-quote tests for SFString enumeration fields -->
      <report test="contains(@fogType, '&quot;')" role="error">&NodeDEFname; fogType='<value-of select='@fogType'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <assert test="((/X3D[@profile='Full']) or (/X3D/head/component[@name='EnvironmentalEffects'][number(@level) ge 4]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='EnvironmentalEffects' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
    </rule>

    <!-- ========= FogCoordinate ========== -->
    <rule context="FogCoordinate">
      <extends rule="DEFtests"/>
      <extends rule="NoChildNode"/>
      <!-- TODO depth is MFFloat array with length matching number of vertices -->
      <assert test="((/X3D[@profile='Full']) or (/X3D/head/component[@name='EnvironmentalEffects'][number(@level) ge 4]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='EnvironmentalEffects' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
    </rule>

    <!-- ========= NavigationInfo ========== -->
    <rule context="NavigationInfo">
      <let name="stringResidueApos" value="translate(@type,' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@#$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;','')"/>
      <let name="stringResidue" value='translate($stringResidueApos,"&apos;","")'/>
      <let name="quoteCount" value="string-length($stringResidue)"/>
      <let name="normalizedString" value="normalize-space(translate(@type,',',' '))"/>
      <let name="embeddedWhiteSpaceCount" value="string-length($normalizedString) - string-length(translate($normalizedString,' ',''))"/>
      <let name="lastCharacter" value="substring($normalizedString,string-length($normalizedString))"/>
      <let name="transitionTypeStringResidueApos" value="translate(@transitionType,' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@#$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;','')"/>
      <let name="transitionTypeStringResidue" value='translate($transitionTypeStringResidueApos,"&apos;","")'/>
      <let name="transitionTypeQuoteCount" value="string-length($transitionTypeStringResidue)"/>
      <let name="transitionTypeNormalizedString" value="normalize-space(@transitionType)"/>
      <let name="transitionTypeLastCharacter" value="substring($transitionTypeNormalizedString,string-length($transitionTypeNormalizedString))"/>
      <let name="avatarSize" value="normalize-space(@avatarSize)"/>
      <!-- TODO split out individual values from avatarSize array and then check them, e.g. Octaga rule that avatarSize[2] step <= [1] height - [0] collision distance -->
      <extends rule="DEFtests"/>
      <extends rule="NoChildNode"/>
      <extends rule="NoLodSwitchParent"/>
      <!-- type MFString array checks -->
      <report test="false()" role="trace">$quoteCount=<value-of select='$quoteCount'/>, $stringResidue=<value-of select='$stringResidue'/>, $stringResidueApos=<value-of select='$stringResidueApos'/> , $lastCharacter=<value-of select='$lastCharacter'/> </report>
      <report test="not(@USE) and contains($normalizedString,'&quot;&quot;') and not(contains($normalizedString,'\&quot;&quot;') or contains($normalizedString,'&quot;\&quot;') or contains($normalizedString,'&quot;&quot; &quot;') or contains($normalizedString,'&quot; &quot;&quot;'))"  role="error">&NodeDEFname; array type='<value-of select='@type'/>' has questionable line-break &quot;&quot; quote marks </report>
      <report test="not(@USE) and (@type) and not(contains(@type,'&quot;'))"    role="error">&NodeDEFname; array type='<value-of select='@type'/>' needs to begin and end with &quot;quote&quot; &quot;marks&quot;.  Corrected example: &lt;<name/> DEF='<value-of select='$DEF'/>' type=&apos;&quot;<value-of select='(@type)'/>&quot;&apos;/&gt; </report>
      <report test="not(@USE) and (@type) and    (contains(@type,'&quot;')) and (($quoteCount div 2)!=round($quoteCount div 2)) and not(contains(@type,'\&quot;'))"     role="error">&NodeDEFname; array type='<value-of select='@type'/>' has <value-of select='($quoteCount)'/> unescaped &quot;quote marks&quot; but instead needs to have an even number of matched pairs </report>
      <report test="not(@USE) and (@type) and (contains(@type,'\&quot;'))"    role="warning">&NodeDEFname; array type='<value-of select='@type'/>' has <value-of select='($quoteCount)'/> quote marks with at least one escaped quote mark \&quot; so double-check to ensure paired &quot;quote marks&quot; for each line are matched </report>
      <report test="not(@USE) and (@type) and (contains(@type,'ALL'))"        role="warning">&NodeDEFname; array type='<value-of select='@type'/>' has illegal value &quot;ALL&quot;, replace with &quot;ANY&quot; </report>
      <report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&quot;')) and not($lastCharacter='&quot;') and (contains(@type,'&quot;'))" role="error">&NodeDEFname; array type='<value-of select='@type'/>' needs to begin and end with &quot;quote&quot; &quot;marks&quot; </report>
      <report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&quot;')) and    ($lastCharacter='&quot;')"                                role="error">&NodeDEFname; array type='<value-of select='@type'/>' needs to begin with quote mark &quot; </report>
      <report test="not(@USE) and ($normalizedString) and    (starts-with($normalizedString,'&quot;')) and not($lastCharacter='&quot;')"                                role="error">&NodeDEFname; array type='<value-of select='@type'/>' needs to end with quote mark &quot; </report>
      <report test="not(@USE) and ($normalizedString) and    not($quoteCount = (2 * $embeddedWhiteSpaceCount) + 2)"                                                     role="error">&NodeDEFname; array type='<value-of select='@type'/>' has mismatched white space and quote mark &quot; characters, check quoting to ensure each individual value is quoted </report>
      <!-- transitionTime SFTime checks -->
      <report test="not(@USE) and (@transitionTime &lt; 0)"    role="error">&NodeDEFname; transitionTime='<value-of select='@transitionTime'/>' cannot be negative </report>
      <!-- transitionType MFString array checks -->
      <report test="false()" role="trace">$transitionTypeQuoteCount=<value-of select='$transitionTypeQuoteCount'/>, $transitionTypeStringResidue=<value-of select='$transitionTypeStringResidue'/>, $transitionTypeStringResidueApos=<value-of select='$transitionTypeStringResidueApos'/> , $transitionTypeLastCharacter=<value-of select='$transitionTypeLastCharacter'/> </report>
      <report test="not(@USE) and contains($transitionTypeNormalizedString,'&quot;&quot;') and not(contains($transitionTypeNormalizedString,'\&quot;&quot;') or contains($transitionTypeNormalizedString,'&quot;\&quot;') or contains($transitionTypeNormalizedString,'&quot;&quot; &quot;') or contains($transitionTypeNormalizedString,'&quot; &quot;&quot;'))"  role="error">&NodeDEFname; transitionType='<value-of select='@transitionType'/>' array has questionable line-break &quot;&quot; quote marks </report>
      <report test="not(@USE) and (@transitionType) and not(contains(@transitionType,'&quot;'))"    role="error">&NodeDEFname; array transitionType='<value-of select='@transitionType'/>' needs to begin and end with &quot;quote&quot; &quot;marks&quot;.  Corrected example: &lt;<name/> DEF='<value-of select='$DEF'/>' transitionType=&apos;&quot;<value-of select='(@transitionType)'/>&quot;&apos;/&gt; </report>
      <report test="not(@USE) and (@transitionType) and    (contains(@transitionType,'&quot;')) and (($transitionTypeQuoteCount div 2)!=round($transitionTypeQuoteCount div 2)) and not(contains(@transitionType,'\&quot;'))"    role="error">&NodeDEFname; array transitionType='<value-of select='@transitionType'/>' has <value-of select='($transitionTypeQuoteCount)'/> unescaped &quot;quote marks&quot; but instead needs to have an even number of matched pairs </report>
      <report test="not(@USE) and (@transitionType) and (contains(@transitionType,'\&quot;'))"    role="warning">&NodeDEFname; transitionType='<value-of select='@transitionType'/>' has <value-of select='($transitionTypeQuoteCount)'/> quote marks with at least one escaped quote mark \&quot; so double-check to ensure paired &quot;quote marks&quot; for each line are matched </report>
      <report test="not(@USE) and ($transitionTypeNormalizedString) and not(starts-with($transitionTypeNormalizedString,'&quot;')) and not($transitionTypeLastCharacter='&quot;') and (contains(@transitionType,'&quot;'))"    role="error">&NodeDEFname; array of transitionType values needs to begin and end with &quot;quote&quot; &quot;marks&quot; </report>
      <report test="not(@USE) and ($transitionTypeNormalizedString) and not(starts-with($transitionTypeNormalizedString,'&quot;')) and    ($transitionTypeLastCharacter='&quot;')"                                     role="error">&NodeDEFname; transitionType='<value-of select='@transitionType'/>' array needs to begin with quote mark &quot; </report>
      <report test="not(@USE) and ($transitionTypeNormalizedString) and    (starts-with($transitionTypeNormalizedString,'&quot;')) and not($transitionTypeLastCharacter='&quot;')"                                     role="error">&NodeDEFname; transitionType='<value-of select='@transitionType'/>' array needs to end with quote mark &quot; </report>
      <!-- additional checks -->
      <report test="not(@USE) and (@type) and ((/X3D/@version = '3.0') or (/X3D/@version = '3.1') or (/X3D/@version = '3.2')) and not(contains(@type,'EXAMINE')) and not(contains(@type,'ANY')) and not(contains(@type,'WALK')) and not(contains(@type,'FLY')) and not(contains(@type,'LOOKAT')) and not(contains(@type,'NONE'))"                                    role="warning">&NodeDEFname; array type='<value-of select='@type'/>' does not contain any of the guaranteed-support values (&quot;EXAMINE&quot; &quot;ANY&quot; or &quot;WALK&quot; &quot;FLY&quot; &quot;LOOKAT&quot; &quot;NONE&quot;) </report>
      <report test="not(@USE) and (@type) and ((/X3D/@version = '3.3') or starts-with(/X3D/@version, '4'))                            and not(contains(@type,'EXAMINE')) and not(contains(@type,'ANY')) and not(contains(@type,'WALK')) and not(contains(@type,'FLY')) and not(contains(@type,'LOOKAT')) and not(contains(@type,'NONE')) and not(contains(@type,'EXPLORE'))" role="warning">&NodeDEFname; array type='<value-of select='@type'/>' does not contain any of the guaranteed-support values (&quot;EXAMINE&quot; &quot;ANY&quot; or &quot;WALK&quot; &quot;FLY&quot; &quot;LOOKAT&quot; &quot;EXPLORE&quot; &quot;NONE&quot;) </report>
      <report test="not(@USE) and (@transitionType) and not(contains(@transitionType,'LINEAR')) and not(contains(@transitionType,'TELEPORT')) and not(contains(@transitionType,'ANIMATE'))"    role="warning">&NodeDEFname; array transitionType='<value-of select='@transitionType'/>' does not contain any of the guaranteed-support values (default &quot;LINEAR&quot; or &quot;TELEPORT&quot; &quot;ANIMATE&quot;) </report>
      <report test="(string-length($avatarSize) > 0) and (string-length($avatarSize) - string-length(translate($avatarSize,' ', '')) != 2)" role="error">&NodeDEFname; avatarSize='<value-of select='@avatarSize'/>' needs to have 3 numeric values </report>
      <report test="not(/X3D[(@profile='Interchange') or (@profile='Interactive') or (@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Navigation'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Navigation' level='1'/&gt; or &lt;X3D profile='Interchange'/&gt; </report>
      <!-- TODO  fine-tuned guidance regarding attributes for level 1 versus level 2 -->
    </rule>

    <!-- ========= Viewpoint | OrthoViewpoint ========== -->
    <rule context="Viewpoint | OrthoViewpoint">
      <let name="centerOfRotationY" value="substring-before(substring-after(normalize-space(@centerOfRotation),' '),' ')"/>
      <let name="positionY"         value="substring-before(substring-after(normalize-space(@position),' '),' ')"/>
      <let name="defaultHeights"    value="(($centerOfRotationY = '0') or ($centerOfRotationY = '0.0') or (string-length($centerOfRotationY) = 0)) and (($positionY = '0') or ($positionY = '0.0') or (string-length($positionY) = 0))"/>
      <extends rule="DEFtests"/>
      <extends rule="NoChildNode"/>
      <extends rule="NoLodSwitchParent"/>
      <extends rule="descriptionTests"/>
	  <!-- TODO bindable tests: no USE except if in field/fieldValue -->
      <report test="(@retainUserOffsets='true') and not(/X3D/@version = '3.2' or /X3D/@version = '3.3' or /X3D/@version = '4.0')" role="error">&NodeDEFname; retainUserOffsets='<value-of select='@retainUserOffsets'/>' requires &lt;X3D version=&apos;3.2&apos;&gt; or higher, but found version='<value-of select='/X3D/@version'/>' </report>
      <report test="(local-name()='OrthoViewpoint') and not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Navigation'][number(@level) ge 3])) or (count(preceding::*[local-name()='OrthoViewpoint']) > 0)" role="error">&NodeDEFname; requires at least &lt;component name='Navigation' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </report>
      <report test="starts-with(normalize-space(@orientation),'0 0 0 ') or starts-with(normalize-space(@orientation),'0.0 0.0 0.0 ')" role="error">&NodeDEFname; orientation='<value-of select='@orientation'/>' has illegal zero-magnitude axis values (can omit if expecting default value) </report>
      <report test="(@jump='TRUE' )" role="error">&NodeDEFname; jump='TRUE' capitalization is incorrect, define as jump='true' instead </report>
      <report test="(@jump='FALSE')" role="error">&NodeDEFname; jump='FALSE' capitalization is incorrect, define as jump='false' instead </report>
      <report test="(@retainUserOffsets='TRUE' )" role="error">&NodeDEFname; retainUserOffsets='TRUE' capitalization is incorrect, define as retainUserOffsets='true' instead </report>
      <report test="(@retainUserOffsets='FALSE')" role="error">&NodeDEFname; retainUserOffsets='FALSE' capitalization is incorrect, define as retainUserOffsets='false' instead </report>
      <!-- (preceding-sibling::HAnimHumanoid or following-sibling::HAnimHumanoid) equivalent to (../HAnimHumanoid) also note that there is no XPath axis for sibling per se -->
      <report test="(preceding-sibling::HAnimHumanoid or following-sibling::HAnimHumanoid) and (not(@centerOfRotation) or (string-length(@centerOfRotation)=0) or (@centerOfRotation = '0 0 0') or (@centerOfRotation = '0.0 0.0 0.0'))" role="warning">&NodeDEFname; centerOfRotation='<value-of select='@centerOfRotation'/>', consider setting centerOfRotation to value of sibling &lt;HAnimHumanoid DEF='<value-of select='@DEF'/>' name='HumanoidRoot' center='<value-of select='../HAnimHumanoid/@center'/>'/&gt; </report>
      <report test="(local-name()='Viewpoint')      and not(/X3D[(@profile='Interchange') or (@profile='Interactive') or (@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Navigation'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Navigation' level='1'/&gt; or &lt;X3D profile='Interchange'/&gt; </report>
      <report test="(local-name()='OrthoViewpoint') and not(/X3D[                                                                                  (@profile='Full')] or /X3D/head/component[@name='Navigation'][number(@level) ge 3] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Navigation' level='3'/&gt; or &lt;X3D profile='Immersive'/&gt; </report>
      <report test="not((local-name(..)='HAnimSite') and (local-name(../..)='HAnimHumanoid')) and not($defaultHeights) and not(string-length(@orientation) = 0) and not((normalize-space(@orientation) = '0 1 0 0') or (normalize-space(@orientation) = '0.0 1.0 0.0 0.0') or (normalize-space(@orientation) = '0 0 1 0') or (normalize-space(@orientation) = '0.0 0.0 1.0 0.0')) and (starts-with(normalize-space(@orientation),'0 1 0 ') or starts-with(normalize-space(@orientation),'0.0 1.0 0.0 ')) and (number($centerOfRotationY) != number($positionY))" role="warning">&NodeDEFname; centerOfRotation='<value-of select='@centerOfRotation'/>' has mismatched Y-value height of <value-of select='$centerOfRotationY'/> compared to position='<value-of select='@position'/>' which has Y-value height of <value-of select='$positionY'/> </report>
      <!-- HAnim warnings -->
      <report test="(parent::HAnimSite) and ((@position='0 0 10') or (@position='0.0 0.0 10.0'))" role="error">&NodeDEFname; position='<value-of select='@position'/>' default value is unusual as child of HAnimSite, usually set position='0 0 0' </report>
      <!-- TODO warn if Wiewpoint too close and clipping occurs due to NavigationInfo avatarSize defaults -->
      <!-- TODO  fine-tuned guidance regarding Viewpoint attributes for level 1 versus level 2 -->
    </rule>

    <!-- ========= ViewpointGroup ========== -->
    <rule context="ViewpointGroup">
      <extends rule="DEFtests"/>
      <extends rule="NoLodSwitchParent"/>
      <extends rule="X3Dversion3.2"/>
      <extends rule="descriptionTests"/>
      <extends rule="sizeTests"/>
      <assert test="not(*) or *[(local-name()='Viewpoint') or (local-name()='ViewpointGroup') or (local-name()='ProtoInstance') or (local-name()='IS') or starts-with(local-name(),'Metadata')]" role="error">&NodeDEFname; can only contain Viewpoint, ViewpointGroup, ProtoInstance or Metadata nodes </assert>
      <report test="(@displayed='TRUE' )" role="error">&NodeDEFname; displayed='TRUE' capitalization is incorrect, define as displayed='true' instead </report>
      <report test="(@displayed='FALSE')" role="error">&NodeDEFname; displayed='FALSE' capitalization is incorrect, define as displayed='false' instead </report>
      <report test="(@retainUserOffsets='TRUE' )" role="error">&NodeDEFname; retainUserOffsets='TRUE' capitalization is incorrect, define as retainUserOffsets='true' instead </report>
      <report test="(@retainUserOffsets='FALSE')" role="error">&NodeDEFname; retainUserOffsets='FALSE' capitalization is incorrect, define as retainUserOffsets='false' instead </report>
      <assert test="((/X3D[@profile='Full']) or (/X3D/head/component[@name='Navigation'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">ViewpointGroup requires at least &lt;component name='Navigation' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
    </rule>

    <!-- ========= WorldInfo ========== -->
    <rule context="WorldInfo">
      <let name="stringResidueApos" value="translate(@info,' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@#$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;','')"/>
      <let name="stringResidue" value='translate($stringResidueApos,"&apos;","")'/>
      <let name="quoteCount" value="string-length($stringResidue)"/>
      <let name="normalizedString" value="normalize-space(@info)"/>
      <let name="lastCharacter" value="substring($normalizedString,string-length($normalizedString))"/>
      <extends rule="DEFtests"/>
      <extends rule="NoChildNode"/>
      <!-- TODO name-value pair tests? -->
      <!-- MFString array checks -->
      <report test="false()" role="trace">$quoteCount=<value-of select='$quoteCount'/>, $stringResidue=<value-of select='$stringResidue'/>, $stringResidueApos=<value-of select='$stringResidueApos'/> , $lastCharacter=<value-of select='$lastCharacter'/> </report>
      <report test="not(@USE) and contains($normalizedString,'&quot;&quot;') and not(contains($normalizedString,'\&quot;&quot;') or contains($normalizedString,'&quot;\&quot;') or contains($normalizedString,'&quot;&quot; &quot;') or contains($normalizedString,'&quot; &quot;&quot;'))"  role="error">&WorldInfoNodeDEFname; string array has questionable line-break &quot;&quot; quote marks </report>
      <report test="not(@USE) and (@info) and not(contains(@info,'&quot;'))"    role="error">&WorldInfoNodeDEFname; info string array elements each need to begin and end with &quot;quote marks&quot;.  Corrected example: &lt;<name/> DEF='<value-of select='$DEF'/>' info=&apos;&quot;<value-of select='(@info)'/>&quot;&apos;/&gt; </report>
      <report test="not(@USE) and (@info) and    (contains(@info,'&quot;')) and (($quoteCount div 2)!=round($quoteCount div 2)) and not(contains(@info,'\&quot;'))"    role="error">&WorldInfoNodeDEFname; string array has <value-of select='($quoteCount)'/> unescaped &quot;quote marks&quot; but instead needs to have an even number of matched pairs </report>
      <report test="not(@USE) and (@info) and (contains(@info,'\&quot;'))"    role="warning">&WorldInfoNodeDEFname; has <value-of select='($quoteCount)'/> quote marks with at least one escaped quote mark \&quot; so double-check to ensure paired &quot;quote marks&quot; for each line are matched </report>
      <report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&quot;')) and not($lastCharacter='&quot;') and (contains(@info,'&quot;'))"    role="error">&WorldInfoNodeDEFname; array of string values needs to begin and end with &quot;quote marks&quot; </report>
      <report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&quot;')) and    ($lastCharacter='&quot;')"                                     role="error">&WorldInfoNodeDEFname; array of string values needs to begin with quote mark &quot; </report>
      <report test="not(@USE) and ($normalizedString) and    (starts-with($normalizedString,'&quot;')) and not($lastCharacter='&quot;')"                                     role="error">&WorldInfoNodeDEFname; array of string values needs to end with quote mark &quot; </report>
      <report test="starts-with(normalize-space(@title),'&quot;') or ends-with(normalize-space(@title),'&quot;')" role="error">&NamedNodeDEFname; title='<value-of select='@title'/>' has type SFString and is &quot;not quoted&quot; </report>
      <!-- if two titles found, output prior WorldInfo before current WorldInfo to match document order -->
      <report test="not(@USE) and (string-length(@title) gt 0) and (string-length(preceding::WorldInfo/@title) gt 0)" role="warning">&lt;WorldInfo DEF='<value-of select='preceding::WorldInfo/@DEF'/>' title='<value-of select='preceding::WorldInfo/@title'/>'/&gt; and &lt;WorldInfo DEF='<value-of select='@DEF'/>' title='<value-of select='@title'/>'/&gt; have both defined window title </report>
    </rule>

    <!-- ========= ROUTE ========== -->
    <rule context="ROUTE | *[(upper-case(local-name()) = 'ROUTE')]">
      <let name="fromNode"  value="normalize-space(@fromNode)"/>
      <let name="fromField" value="normalize-space(@fromField)"/>
      <let name=  "toNode"  value="normalize-space(@toNode)"/>
      <let name=  "toField" value="normalize-space(@toField)"/>
      <extends rule="noDEF"/>
      <extends rule="NoChildNode"/>
      <report test="(local-name() != 'ROUTE')" role="error">&lt;<value-of select='local-name()'/>&gt; element capitalization must be upper-case &lt;ROUTE&gt; for proper validation </report>
      <!-- bad field names -->
      <report test="contains(@fromField,'set_')" role="error">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; should not have 'set_' in event-source fromField name </report>
      <report test="starts-with(@toField,'_changed')" role="error">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; should not have '_changed' in event-destination toField name </report>
      <!-- TODO alert if finding strictly inputOnly fields with set_ or strictly outputOnly fields with _changed.  TODO also X3D Tidy -->
      <report test="(@fromField = 'touchTime_changed')" role="error">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; event-source fromField name 'touchTime_changed' is illegal, use  'touchTime' instead </report>
      <!-- report if ROUTE targets missing -->
      <report test="not(//*[@DEF=$fromNode])" role="error">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; has no corresponding fromNode with DEF='<value-of select='@fromNode'/>' </report>
      <report test="not(//*[@DEF=$toNode  ])" role="error">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; has no corresponding toNode with DEF='<value-of select='@toNode'/>' </report>
      <!-- report if ROUTE precedes targets -->
      <report test="(following::*[@DEF=$fromNode])" role="error">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; precedes target fromNode &lt;<value-of select='local-name(following::*[@DEF=$fromNode])'/> DEF='<value-of select='(following::*[@DEF=$fromNode]/@DEF)'/>'/&gt; </report>
      <report test="(following::*[@DEF=$toNode  ])" role="error">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; precedes target toNode &lt;<value-of select='local-name(following::*[@DEF=$toNode])'/> DEF='<value-of select='(following::*[@DEF=$toNode]/@DEF)'/>'/&gt; </report>
      <!-- report first of duplicated ROUTEs (if any) -->
      <report test="(count(following::ROUTE[@fromNode=$fromNode][@fromField=$fromField][@toNode=$toNode][@toField=$toField]) > 0) and (count(preceding::ROUTE[@fromNode=$fromNode][@fromField=$fromField][@toNode=$toNode][@toField=$toField]) = 0)" role="error">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; has a total of <value-of select='count(//ROUTE[@fromNode=$fromNode][@fromField=$fromField][@toNode=$toNode][@toField=$toField])'/> duplicate(s), remove copies while keeping the remaining ROUTE after fromNode and toNode targets </report>
      <report test="(@fromNode = @toNode) and (@fromField = @toField)" role="error">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; incorrectly routes to itself </report>
      <!-- check for illegal field names -->
      <report test="(@fromField='DEF') or (@fromField='USE') or (@fromField='class') or (@fromField='containerField')" role="error">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; fromField is not a field name (DEF, USE, class, containerField not allowed) </report>
      <report test="(  @toField='DEF') or (  @toField='USE') or (  @toField='class') or (  @toField='containerField')" role="error">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; toField is not a field name (DEF, USE, class, containerField not allowed) </report>
      <!-- report if ROUTE targets are beneath a StaticGroup node -->
      <report test="(//*[@DEF=$fromNode][ancestor::StaticGroup])" role="error">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; ROUTE error, fromNode='<value-of select='@fromNode'/>' has ancestor StaticGroup, such children cannot produce events (since any child nodes may get refactored inside StaticGroup) </report>
      <report test="(//*[@DEF=$toNode  ][ancestor::StaticGroup])" role="error">&lt;ROUTE fromNode='<value-of select='@fromNode'/>' fromField='<value-of select='@fromField'/>' toNode='<value-of select='@toNode'/>' toField='<value-of select='@toField'/>'/&gt; ROUTE error, toNode='<value-of select='@toNode'/>' has ancestor StaticGroup, such children cannot receive events (since any child nodes may get refactored inside StaticGroup) </report>
    </rule>

    <!-- Rigid Body Physics Component -->

    <!-- ========= abstract: X3DNBodyCollidableNode ========== -->
    <rule id="X3DNBodyCollidableNode" abstract="true">
      <extends rule="enabledOnTests"/>
      <extends rule="boundingBoxTests"/>
      <report test="starts-with(normalize-space(@rotation),'0 0 0 ') or starts-with(normalize-space(@rotation),'0.0 0.0 0.0 ')" role="error">&NodeDEFname; rotation='<value-of select='@rotation'/>' has illegal zero-magnitude axis values (can omit if expecting default value) </report>
    </rule>

    <!-- ========= abstract: X3DNBodyCollisionSpaceNode ========== -->
    <rule id="X3DNBodyCollisionSpaceNode" abstract="true">
      <extends rule="enabledOnTests"/>
      <extends rule="boundingBoxTests"/>
    </rule>

    <!-- ========= abstract: X3DRigidJointNode ========== -->
    <rule id="X3DRigidJointNode" abstract="true">
      <assert test="RigidBody[@containerField='body1'] or (IS/connect[@nodeField='body1'])" role="warning">&NodeDEFname; missing child &lt;RigidBody containerField=&apos;body1&apos;/&gt; </assert>
      <assert test="RigidBody[@containerField='body2'] or (IS/connect[@nodeField='body2'])" role="warning">&NodeDEFname; missing child &lt;RigidBody containerField=&apos;body2&apos;/&gt; </assert>
      <report test="(count(RigidBody[@containerField='body1']) > 1)" role="error">&NodeDEFname; includes more than one child &lt;RigidBody containerField=&apos;body1&apos;/&gt; </report>
      <report test="(count(RigidBody[@containerField='body2']) > 1)" role="error">&NodeDEFname; includes more than one child &lt;RigidBody containerField=&apos;body2&apos;/&gt; </report>
      <report test="(string-length(@mustOutput) > 0)" role="error">&NodeDEFname; mustOutput='<value-of select='@mustOutput'/>' needs to be renamed as field forceOutput </report>
    </rule>

    <!-- ========= BallJoint ========== -->
    <rule context="BallJoint">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <extends rule="X3DRigidJointNode"/>
    </rule>

    <!-- ========= CollidableOffset ========== -->
    <rule context="CollidableOffset">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <extends rule="X3DNBodyCollidableNode"/>
    </rule>

    <!-- ========= CollidableShape ========== -->
    <rule context="CollidableShape">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <extends rule="X3DNBodyCollidableNode"/>
    </rule>

    <!-- ========= CollisionCollection ========== -->
    <rule context="CollisionCollection">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <!-- TODO SFVec2f frictionCoefficients [0,unbounded] -->
    </rule>

    <!-- ========= CollisionSensor ========== -->
    <rule context="CollisionSensor">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <!-- X3DSensorNode -->
      <extends rule="NeedsOutputROUTE"/>
      <report test="not(CollisionCollection[@containerField='collider']) and not(IS/connect[@nodeField='collider'])" role="error">&NodeDEFname; is missing child &lt;CollisionCollection containerField=&apos;collider&apos;/&gt; </report>
    </rule>

    <!-- ========= CollisionSpace ========== -->
    <rule context="CollisionSpace">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <extends rule="X3DNBodyCollidableNode"/>
      <report test="(@useGeometry='TRUE' )" role="error">&NodeDEFname; useGeometry='TRUE' is incorrect, define useGeometry='true' instead </report>
      <report test="(@useGeometry='FALSE')" role="error">&NodeDEFname; useGeometry='FALSE' is incorrect, define useGeometry='false' instead </report>
    </rule>

    <!-- ========= Contact ========== -->
    <rule context="Contact">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <assert test="RigidBody[@containerField='body1'] or (IS/connect[@nodeField='body1'])" role="warning">&NodeDEFname; missing child &lt;RigidBody containerField=&apos;body1&apos;/&gt; </assert>
      <assert test="RigidBody[@containerField='body2'] or (IS/connect[@nodeField='body2'])" role="warning">&NodeDEFname; missing child &lt;RigidBody containerField=&apos;body2&apos;/&gt; </assert>
      <report test="(count(RigidBody[@containerField='body1']) > 1)" role="error">&NodeDEFname; includes more than one child &lt;RigidBody containerField=&apos;body1&apos;/&gt; </report>
      <report test="(count(RigidBody[@containerField='body2']) > 1)" role="error">&NodeDEFname; includes more than one child &lt;RigidBody containerField=&apos;body2&apos;/&gt; </report>
      <report test="(count(*[@containerField='geometry1']) > 1)" role="error">&NodeDEFname; includes more than one geometry child with containerField=&apos;geometry1&apos; </report>
      <report test="(count(*[@containerField='geometry2']) > 1)" role="error">&NodeDEFname; includes more than one geometry child with containerField=&apos;geometry2&apos; </report>
      <report test="starts-with(normalize-space(@contactNormal),'0 0 0') or starts-with(normalize-space(@contactNormal),'0.0 0.0 0.0')" role="error">&NodeDEFname; contactNormal='<value-of select='@contactNormal'/>' normal vector has illegal zero-magnitude axis values, use a non-zero vector direction instead </report>
      <report test="starts-with(normalize-space(@frictionDirection),'0 0 0') or starts-with(normalize-space(@frictionDirection),'0.0 0.0 0.0')" role="error">&NodeDEFname; frictionDirection='<value-of select='@frictionDirection'/>' vector has illegal zero-magnitude axis values, use a non-zero vector direction instead </report>
      <!-- TODO SFVec2f frictionCoefficients [0,unbounded] -->
    </rule>

    <!-- ========= DoubleAxisHingeJoint ========== -->
    <rule context="DoubleAxisHingeJoint">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <extends rule="X3DRigidJointNode"/>
      <!-- spec comment submitted that 0 0 0 is an illegal axis value -->
      <report test="starts-with(normalize-space(@axis1),'0 0 0') or starts-with(normalize-space(@axis1),'0.0 0.0 0.0')" role="error">&NodeDEFname; axis1='<value-of select='@axis1'/>' normal vector has illegal zero-magnitude axis values, use a non-zero vector direction instead </report>
      <report test="starts-with(normalize-space(@axis2),'0 0 0') or starts-with(normalize-space(@axis2),'0.0 0.0 0.0')" role="error">&NodeDEFname; axis2='<value-of select='@axis2'/>' normal vector has illegal zero-magnitude axis values, use a non-zero vector direction instead </report>
    </rule>

    <!-- ========= MotorJoint ========== -->
    <rule context="MotorJoint">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <extends rule="X3DRigidJointNode"/>
      <report test="(@autoCalc='TRUE' )" role="error">&NodeDEFname; autoCalc='TRUE' is incorrect, define autoCalc='true' instead </report>
      <report test="(@autoCalc='FALSE')" role="error">&NodeDEFname; autoCalc='FALSE' is incorrect, define autoCalc='false' instead </report>
    </rule>

    <!-- ========= RigidBody ========== -->
    <rule context="RigidBody">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <extends rule="enabledOnTests"/>
      <report test="(normalize-space(@finiteRotationAxis)='0 0 0') or (normalize-space(@finiteRotationAxis)='0.0 0.0 0.0')" role="warning">&NodeDEFname; finiteRotationAxis='<value-of select='@finiteRotationAxis'/>' is illegal axis value, use a non-zero vector direction instead </report>
      <report test="starts-with(normalize-space(@orientation),'0 0 0 ') or starts-with(normalize-space(@orientation),'0.0 0.0 0.0 ')" role="error">&NodeDEFname; orientation='<value-of select='@orientation'/>' has illegal zero-magnitude axis values (can omit if expecting default value) </report>
      <report test="(@autoDamp='TRUE' )" role="error">&NodeDEFname; autoDamp='TRUE' is incorrect, define autoDamp='true' instead </report>
      <report test="(@autoDamp='FALSE')" role="error">&NodeDEFname; autoDamp='FALSE' is incorrect, define autoDamp='false' instead </report>
      <report test="(@autoDisable='TRUE' )" role="error">&NodeDEFname; autoDisable='TRUE' is incorrect, define autoDisable='true' instead </report>
      <report test="(@autoDisable='FALSE')" role="error">&NodeDEFname; autoDisable='FALSE' is incorrect, define autoDisable='false' instead </report>
      <report test="(@fixed='TRUE' )" role="error">&NodeDEFname; fixed='TRUE' is incorrect, define fixed='true' instead </report>
      <report test="(@fixed='FALSE')" role="error">&NodeDEFname; fixed='FALSE' is incorrect, define fixed='false' instead </report>
      <report test="(@useFiniteRotation ='TRUE' )" role="error">&NodeDEFname; useFiniteRotation ='TRUE' is incorrect, define useFiniteRotation ='true' instead </report>
      <report test="(@useFiniteRotation ='FALSE')" role="error">&NodeDEFname; useFiniteRotation ='FALSE' is incorrect, define useFiniteRotation ='false' instead </report>
      <report test="(@useGlobalGravity ='TRUE' )" role="error">&NodeDEFname; useGlobalGravity ='TRUE' is incorrect, define useGlobalGravity ='true' instead </report>
      <report test="(@useGlobalGravity ='FALSE')" role="error">&NodeDEFname; useGlobalGravity ='FALSE' is incorrect, define useGlobalGravity ='false' instead </report>
      <report test="(   Box[not(@containerField ='massDensityModel')])" role="error">&NodeDEFname; contained Box must have containerField ='massDensityModel' </report>
      <report test="(  Cone[not(@containerField ='massDensityModel')])" role="error">&NodeDEFname; contained Cone must have containerField ='massDensityModel' </report>
      <report test="(Sphere[not(@containerField ='massDensityModel')])" role="error">&NodeDEFname; contained Sphere must have containerField ='massDensityModel' </report>
    </rule>

    <!-- ========= RigidBodyCollection ========== -->
    <rule context="RigidBodyCollection">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <extends rule="enabledOnTests"/>
      <report test="(@autoDisable ='TRUE' )" role="error">&NodeDEFname; autoDisable ='TRUE' is incorrect, define autoDisable ='true' instead </report>
      <report test="(@autoDisable ='FALSE')" role="error">&NodeDEFname; autoDisable ='FALSE' is incorrect, define autoDisable ='false' instead </report>
      <report test="(@preferAccuracy ='TRUE' )" role="error">&NodeDEFname; preferAccuracy ='TRUE' is incorrect, define preferAccuracy ='true' instead </report>
      <report test="(@preferAccuracy ='FALSE')" role="error">&NodeDEFname; preferAccuracy ='FALSE' is incorrect, define preferAccuracy ='false' instead </report>
    </rule>

    <!-- ========= SingleAxisHingeJoint ========== -->
    <rule context="SingleAxisHingeJoint">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <extends rule="X3DRigidJointNode"/>
      <report test="contains(normalize-space(@axis),'0 0 0') or contains(normalize-space(@axis),'0.0 0.0 0.0')" role="warning">&NodeDEFname; axis='<value-of select='@axis'/>' is illegal axis value, use a non-zero vector direction instead </report>
    </rule>
    
    <!-- ========= SliderJoint ========== -->
    <rule context="SliderJoint">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <extends rule="X3DRigidJointNode"/>
      <report test="contains(normalize-space(@axis),'0 0 0') or contains(normalize-space(@axis),'0.0 0.0 0.0')" role="warning">&NodeDEFname; axis='<value-of select='@axis'/>' is illegal axis value, use a non-zero vector direction instead </report>
    </rule>
    
    <!-- ========= UniversalJoint ========== -->
    <rule context="UniversalJoint">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <extends rule="X3DRigidJointNode"/>
      <!-- spec comment submitted that 0 0 0 is an illegal axis value -->
      <report test="starts-with(normalize-space(@axis1),'0 0 0') or starts-with(normalize-space(@axis1),'0.0 0.0 0.0')" role="error">&NodeDEFname; axis1='<value-of select='@axis1'/>' normal vector has illegal zero-magnitude axis values, use a non-zero vector direction instead </report>
      <report test="starts-with(normalize-space(@axis2),'0 0 0') or starts-with(normalize-space(@axis2),'0.0 0.0 0.0')" role="error">&NodeDEFname; axis2='<value-of select='@axis2'/>' normal vector has illegal zero-magnitude axis values, use a non-zero vector direction instead </report>
    </rule>

    <!-- CAD component:  CADLayer, CADAssembly, CADPart, CADFace -->

    <!-- ========= CADLayer ========== -->
    <rule context="CADLayer">
      <let name="MFBoolValueResidue" value="translate(normalize-space(@visible),'truefalse, ','')"/>
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="false()"/>
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.1"/>
      <extends rule="optionalName"/>
      <extends rule="NamedNeedsChildNode"/>
      <!-- CADLayer might contain other CADLayer as well as CADAssembly nodes -->
      <report test="(ancestor::CADAssembly)" role="error">&lt;CADLayer DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot have an ancestor CADAssembly </report>
      <report test="(ancestor::CADPart)"     role="error">&lt;CADLayer DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot have an ancestor CADPart </report>
      <report test="(ancestor::CADFace)"     role="error">&lt;CADLayer DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot have an ancestor CADFace </report>
      <report test="(string-length($MFBoolValueResidue) gt 0)" role="error">&lt;CADLayer DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; MFBool visible field must only include values of true or false </report>
      <!-- not-very strict content model checked by DTD, Schema since CADAssembly is a Grouping node -->
    </rule>

    <!-- ========= CADAssembly ========== -->
    <rule context="CADAssembly">
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="false()"/>
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.1"/>
      <extends rule="optionalName"/>
      <extends rule="NamedNeedsChildNode"/>
      <!-- CADAssembly can (optionally) be in different layers or be a subassembly -->
      <report test="(ancestor::CADPart)"     role="error">&lt;CADAssembly DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot have an ancestor CADPart </report>
      <report test="(ancestor::CADFace)"     role="error">&lt;CADAssembly DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot have an ancestor CADFace </report>
      <!-- not-very strict content model checked by DTD, Schema since CADAssembly is a Grouping node -->
    </rule>

    <!-- ========= CADPart ========== -->
    <rule context="CADPart">
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="false()"/>
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.1"/>
      <extends rule="optionalName"/>
      <extends rule="NamedNeedsChildNode"/>
      <!-- CADPart is usually found in a CADAssembly, but not necessarily since a single model might be a CADPart -->
      <!-- Mantis resolution: this notification is informational only https://www.web3d.org/member-only/mantis/view.php?id=983 -->
      <!-- Property showCADAssemblyAncestorWarning allows selectively turning this information note back on -->
      <report test="$showCADAssemblyAncestorWarning and not(ancestor::CADAssembly) and not(preceding::CADPart[not(ancestor::CADAssembly)])" role="info">&lt;CADPart DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; does not have an ancestor CADAssembly </report>
      <report test="(ancestor::CADPart)"        role="error">&lt;CADPart DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot have an ancestor CADPart </report>
      <report test="(ancestor::CADFace)"        role="error">&lt;CADPart DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot have an ancestor CADFace </report>
      <!-- fairly strict content model checked by DTD, Schema: CADPart is a Grouping node but can only contain Metadata node and CADFace|ProtoInstance -->
    </rule>

    <!-- ========= CADFace ========== -->
    <rule context="CADFace">
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="false()"/>
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.1"/>
      <extends rule="optionalName"/>
      <extends rule="NamedNeedsChildNode"/>
      <!-- CADFace is found in a CADPart -->
      <report test="not(parent::CADPart)" role="error">&lt;CADFace DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; can only have a parent CADPart </report>
      <report test="(ancestor::CADFace)"    role="error">&lt;CADFace DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot have an ancestor CADFace </report>
      <!-- fairly strict content model checked by DTD, Schema: CADFace should only contain Metadata or else a single Shape or LOD or Transform node with containerField='shape' -->
      <report test="    Shape[not(@containerField='shape')]" role="error">&lt;CADFace DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains Shape node that has incorrect containerField='<value-of select='@containerField'/>', should be containerField='shape' </report>      
      <report test="Transform[not(@containerField='shape')]" role="error">&lt;CADFace DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains Transform node that has incorrect containerField='<value-of select='@containerField'/>', should be containerField='shape' </report>      
      <report test="      LOD[not(@containerField='shape')]" role="error">&lt;CADFace DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains LOD node that has incorrect containerField='<value-of select='@containerField'/>', should be containerField='shape' </report>      
      <!-- should only allow one active Shape at a time -->
      <report test="boolean(    *[not(starts-with(local-name(),'Metadata')) and not(local-name() = 'Shape') and not(local-name() = 'LOD') and not(local-name() = 'Transform')])" role="error">&lt;CADFace DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains illegal child node, can only hold one Shape or one LOD or one Transform inside CADFace </report>
      <report test="boolean(LOD/*[not(starts-with(local-name(),'Metadata')) and not(local-name() = 'Shape')])" role="error">&lt;CADFace DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains LOD with illegal child node, since child LOD inside CADFace can only display one Shape node at a time </report>
      <report test="boolean(Transform/*[not(starts-with(local-name(),'Metadata')) and not(local-name() = 'Shape')])" role="error">&lt;CADFace DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains Transform with illegal child node, since child LOD inside CADFace can only display one Shape node at a time </report>
    </rule>

    <!-- ========= IndexedQuadSet (IQS) ========== -->
    <rule context="IndexedQuadSet">
      <extends rule="geometryNode"/>
      <extends rule="ChildDataCounts"/> <!-- TODO sum checks for each node-->
      <extends rule="X3Dversion3.1"/>
      <extends rule="indexedPolyTests"/>
      <report test="contains(@index,'-1')" role="error">&NodeDEFname; index='<value-of select='@index'/>' must not contain -1 sentinel values </report>
    </rule>

    <!-- ========= QuadSet ========== -->
    <rule context="QuadSet">
      <extends rule="geometryNode"/>
      <extends rule="ChildDataCounts"/> <!-- TODO sum checks for each node-->
      <extends rule="X3Dversion3.1"/>
    </rule>

    <!-- ========= ClipPlane ========== -->
    <!-- https://www.web3d.org/files/specifications/19775-1/V3.3/Part01/components/rendering.html#ClipPlane  -->
    <rule context="ClipPlane">
      <let name="plane"                     value="concat(' ',normalize-space(translate(@plane, ',',' ')))"/>
      <let name="planeCount"                value="string-length($plane)              - string-length(translate($plane,  ' ',''))"/>
      <extends rule="DEFtests"/>
      <extends rule="enabledOnTests"/>
      <extends rule="X3Dversion3.2"/>
      <report test="(string-length(normalize-space(@plane)) > 0) and ($planeCount != 4)"    role="warning">&NodeDEFname; plane attribute has <value-of select='$planeCount'/> values, 4 are required for a valid plane equation </report>
      <!-- fourth coefficient is distance of plane from local origin and so might be greater than one, thus this test is overly strict -->
      <!-- Check range of element values [0,1].  The following test does not catch values between 1.0 and 1.1 -->
  <!--<report test="(contains($plane,' 2') or contains($plane,' 3') or contains($plane,' 4') or contains($plane,' 5') or contains($plane,' 6') or contains($plane,' 7') or contains($plane,' 8') or contains($plane,' 9') or contains($plane,' 1.1') or contains($plane,' 1.2') or contains($plane,' 1.3') or contains($plane,' 1.4') or contains($plane,' 1.5') or contains($plane,' 1.6') or contains($plane,' 1.7') or contains($plane,' 1.8') or contains($plane,' 1.9')) and not(contains($plane,'E-')) and not(contains($plane,'e-'))" role="warning">&NodeDEFname; contains a plane equation value greater than 1, plane='<value-of select='@plane'/>' </report> -->
      <!-- the following test does not catch values between -1.0 and -1.1 -->
      <report test="contains($plane,' -2') or contains($plane,' -3') or contains($plane,' -4') or contains($plane,' -5') or contains($plane,' -6') or contains($plane,' -7') or contains($plane,' -8') or contains($plane,' -9') or contains($plane,' -1.1') or contains($plane,' -1.2') or contains($plane,' -1.3') or contains($plane,' -1.4') or contains($plane,' -1.5') or contains($plane,' -1.6') or contains($plane,' -1.7') or contains($plane,' -1.8') or contains($plane,' -1.9')" role="warning">&NodeDEFname; contains a plane equation value less than -1, plane='<value-of select='@plane'/>' </report>
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='Rendering'][number(@level) ge 5]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Rendering' level='5'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>

    <!-- ========= Geometry data nodes ========== -->

    <!-- check parent nodes -->
    <rule id="X3DCoordinateNode" abstract="true">
      <assert test="contains(local-name(..),'Indexed') or contains(local-name(..),'Triangle') or contains(local-name(..),'Quad') or (local-name(..)='PointSet') or contains(local-name(..),'Line') or contains(local-name(..),'field') or contains(local-name(..),'fieldValue') or (local-name(..)='HAnimHumanoid') or (local-name(..)='HAnimSegment') or contains(local-name(..),'Nurbs') or contains(local-name(..),'ProtoBody')" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/>, instead needs to have a geometry nodec </assert>
      <report test="(local-name(..) = 'HAnimHumanoid') and not(@containerField='skinCoord') and not(@containerField='skinBindingCoords')"    role="warning">&NodeDEFname; with parent HAnimHumanoid must have @containerField='skinCoord' or @containerField='skinBindingCoords' </report>
    </rule>

    <!-- ========= Coordinate ========== -->
    <rule context="Coordinate">
      <let name="point"         value="normalize-space(translate(@point, ',',' '))"/>
      <let name="pointCount"    value="string-length($point)  - string-length(translate($point,  ' ','')) + 1"/>
      <extends rule="DEFtests"/>
      <extends rule="X3DCoordinateNode"/>
      <assert test="@point or (@USE) or //ROUTE[@toNode=$DEF] or boolean(IS/connect[@nodeField='point']) or (//ProtoDeclare/ProtoInterface/field/*[@DEF=$USE]) or comment()"    role="warning">&NodeDEFname; contains no data in point array </assert>
      <!-- TODO also test preceding not inside ProtoDeclare -->
      <report test="not(@USE) and ($point) and preceding::Coordinate[normalize-space(translate(@point, ',',' '))=$point] and not //ROUTE[@toField=$DEF] and not(ancestor::ProtoDeclare) and not(parent::field or parent::fieldValue)"  role="warning">&NodeDEFname; has identical point array matching a preceding Coordinate node, consider DEF/USE to avoid duplication (point='<value-of select='substring(@point,0,40)'/>') </report>
      <report test="(string-length(normalize-space($point)) > 0) and (($pointCount div 3)!=round($pointCount div 3))"    role="warning">&NodeDEFname; point array has <value-of select='($pointCount div 3)'/> triples, likely has incorrect number of values or missing whitespace (point='<value-of select='substring(@point,0,40)'/>') </report>
      <!-- common scene-graph hierarchy errors -->
    </rule>

    <!-- ========= CoordinateDouble ========== -->
    <rule context="CoordinateDouble">
      <let name="point"         value="normalize-space(translate(@point, ',',' '))"/>
      <let name="pointCount"    value="string-length($point)  - string-length(translate($point,  ' ','')) + 1"/>
      <extends rule="DEFtests"/>
      <extends rule="X3DCoordinateNode"/>
      <assert test="@point or (@USE) or //ROUTE[@toNode=$DEF] or boolean(IS/connect[@nodeField='point']) or comment()"    role="warning">&NodeDEFname; contains no data in point array </assert>
      <!-- TODO also test preceding not inside ProtoDeclare -->
      <report test="not(@USE) and ($point) and preceding::CoordinateDouble[normalize-space(translate(@point, ',',' '))=$point] and not //ROUTE[@toField=$DEF] and not(ancestor::ProtoDeclare) and not(parent::field or parent::fieldValue)"  role="warning">&NodeDEFname; has identical point array matching a preceding CoordinateDouble node, consider DEF/USE to avoid duplication (point='<value-of select='substring(@point,0,40)'/>') </report>
      <report test="(string-length(normalize-space($point)) > 0) and (($pointCount div 3)!=round($pointCount div 3))"    role="warning">&NodeDEFname; point array has <value-of select='($pointCount div 3)'/> triples, likely has incorrect number of values or missing whitespace (point='<value-of select='substring(@point,0,40)'/>') </report>
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='NURBS'][number(@level) ge 1]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='NURBS' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>

    <!-- ========= abstract: colorField ========== -->
    <rule id="colorField" abstract="true">
      <!-- these rules should work identically with SFColor or MFColor color fields -->
      <!-- prepend blank to color for simplification of illegal-value tests -->
      <let name="color"                     value="concat(' ',normalize-space(translate(@color, ',',' ')))"/>
      <let name="colorCount"                value="string-length($color)              - string-length(translate($color,  ' ',''))"/>
      <extends rule="DEFtests"/>
      <report test="contains($color,'-')"  role="warning">&NodeDEFname; contains a negative color array value, color='<value-of select='@color'/>' </report>
      <!-- Check range of element values [0,1].  The following test does not catch values between 1.0 and 1.1 -->
      <report test="(contains($color,' 2') or contains($color,' 3') or contains($color,' 4') or contains($color,' 5') or contains($color,' 6') or contains($color,' 7') or contains($color,' 8') or contains($color,' 9') or contains($color,' 1.1') or contains($color,' 1.2') or contains($color,' 1.3') or contains($color,' 1.4') or contains($color,' 1.5') or contains($color,' 1.6') or contains($color,' 1.7') or contains($color,' 1.8') or contains($color,' 1.9')) and not(contains($color,'E-')) and not(contains($color,'e-'))" role="warning">&NodeDEFname; contains a color array value greater than 1, color='<value-of select='@color'/>' </report>
     </rule>

    <!-- ========= abstract: colorNode ========== -->
    <rule id="colorNode" abstract="true">
      <extends rule="colorField"/>
      <assert test="(string-length($color) > 1) or (@USE) or boolean(IS/connect[@nodeField='color'])"    role="warning">&NodeDEFname; contains no data in color array </assert>
      <report test="not(@USE) and ($color) and preceding::Color[normalize-space(translate(@color, ',',' '))=$color] and not //ROUTE[@toField=$DEF] and not(ancestor::ProtoDeclare) and not(parent::field or parent::fieldValue)"  role="warning">&NodeDEFname; has identical color array matching a preceding Color node, consider DEF/USE to avoid duplication (color='<value-of select='substring(@color,0,40)'/>') </report>
      <report test="not(@USE)                 and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../Coordinate) and not(../CoordinateDouble) and not(local-name(..)='ElevationGrid') and not(local-name(..)='GeoElevationGrid')"  role="warning">&NodeDEFname; has no accompanying Coordinate (or CoordinateDouble) node </report>
      <report test="(string-length(@USE) > 0) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../Coordinate) and not(../CoordinateDouble) and not(local-name(..)='ElevationGrid') and not(local-name(..)='GeoElevationGrid')"  role="warning">&lt;<name/> USE='<value-of select='@USE'/>' has no accompanying Coordinate (or CoordinateDouble) node </report>
      <!-- parent checks similar to X3DCoordinateNode -->
      <assert test="contains(local-name(..),'Indexed') or contains(local-name(..),'Triangle') or contains(local-name(..),'Quad') or (local-name(..)='PointSet') or contains(local-name(..),'Line') or contains(local-name(..),'field') or contains(local-name(..),'fieldValue') or contains(local-name(..),'ElevationGrid') or (local-name(..)='HAnimSegment') or contains(local-name(..),'Nurbs') or contains(local-name(..),'ProtoBody')" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/>, instead needs to have a geometry node as a parent </assert>
      <!-- unnecesarily verbose
      <report test="not(@USE)                 and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and (../../Appearance/ImageTexture or ../../Appearance/MovieTexture or ../../Appearance/PixelTexture or ../../Appearance/MultiTexture or ../../Appearance/ProtoInstance)"  role="warning">&NodeDEFname; values are overridden by accompanying texture node </report>
      <report test="(string-length(@USE) > 0) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and (../../Appearance/ImageTexture or ../../Appearance/MovieTexture or ../../Appearance/PixelTexture or ../../Appearance/MultiTexture or ../../Appearance/ProtoInstance)"  role="warning">&lt;<name/> USE='<value-of select='@USE'/>' values are overridden by accompanying texture node </report>
      -->
    </rule>

    <!-- ========= Color ========== -->
    <rule context="Color">
      <extends rule="colorNode"/>
      <report test="(string-length(normalize-space($color)) > 0) and (($colorCount div 3)!=round($colorCount div 3))"    role="warning">&NodeDEFname; color array has <value-of select='($colorCount div 3)'/> triples, likely has incorrect number of values or missing whitespace </report>
      <assert test="@color or (@USE) or //ROUTE[@toNode=$DEF] or boolean(IS/connect[@nodeField='color']) or comment()"   role="warning">&NodeDEFname; contains no data in color array </assert>
    </rule>

    <!-- ========= ColorRGBA ========== -->
    <rule context="ColorRGBA">
      <extends rule="colorNode"/>
      <report test="(string-length(normalize-space($color)) > 0) and (($colorCount div 4)!=round($colorCount div 4))"    role="warning">&NodeDEFname; color array has <value-of select='($colorCount div 4)'/> 4-tuples, likely has incorrect number of values or missing whitespace </report>
      <assert test="@color or (@USE) or //ROUTE[@toNode=$DEF] or boolean(IS/connect[@nodeField='color']) or comment()"   role="warning">&NodeDEFname; contains no data in color array </assert>
    </rule>

    <!-- ========= Normal ========== -->
    <rule context="Normal">
      <let name="vector"                   value="normalize-space(translate(@vector, ',',' '))"/>
      <let name="vectorCount"              value="string-length($vector)            - string-length(translate($vector,  ' ','')) + 1"/><!-- caution: edge case returns 1 for empty string -->
      <extends rule="DEFtests"/>
      <!-- parent checks similar to X3DCoordinateNode -->
      <assert test="contains(local-name(..),'Indexed') or contains(local-name(..),'Triangle') or contains(local-name(..),'Quad') or (local-name(..)='PointSet') or contains(local-name(..),'Line') or contains(local-name(..),'field') or contains(local-name(..),'fieldValue') or contains(local-name(..),'ElevationGrid') or (local-name(..)='HAnimHumanoid') or contains(local-name(..),'ProtoBody')" role="error">&NodeDEFname; has parent <value-of select='local-name(..)'/>, instead needs to have a geometry node as a parent </assert>
      <assert test="($vectorCount > 0) or (string-length(@USE) > 0) or boolean(IS/connect[@nodeField='vector'])"    role="warning">&NodeDEFname; contains no data in vector array </assert>
      <report test="(string-length($vector) > 0) and ($vectorCount > 0) and (($vectorCount div 3)!=round($vectorCount div 3))"    role="warning">&NodeDEFname; vector array has <value-of select='($vectorCount div 3)'/> triples, likely has incorrect number of values or missing whitespace </report>
      <report test="not(@USE) and ($vector) and preceding::Normal[normalize-space(translate(@vector, ',',' '))=$vector] and not //ROUTE[@toField=$DEF] and not(ancestor::ProtoDeclare) and not(parent::field or parent::fieldValue)"  role="warning">&NodeDEFname; has identical vector array matching a preceding Normal node, consider DEF/USE to avoid duplication (vector='<value-of select='substring(@vector,0,40)'/>') </report>
      <report test="not(@USE)                 and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../Coordinate) and not(../CoordinateDouble) and not(local-name(..)='ElevationGrid') and not(local-name(..)='GeoElevationGrid')"  role="warning">&NodeDEFname; has no accompanying Coordinate (or CoordinateDouble) node </report>
      <report test="(string-length(@USE) > 0) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../Coordinate) and not(../CoordinateDouble) and not(local-name(..)='ElevationGrid') and not(local-name(..)='GeoElevationGrid')"  role="warning">&lt;<name/> USE='<value-of select='@USE'/>' has no accompanying Coordinate (or CoordinateDouble) node </report>
      <report test="(local-name(..) = 'HAnimHumanoid') and not(@containerField='skinNormal') and not(@containerField='skinBindingNormals')"    role="warning">&NodeDEFname; with parent HAnimHumanoid must have @containerField='skinNormal' or @containerField='skinBindingNormals' </report>
    </rule>

    <!-- ========= TextureCoordinate ========== -->
    <rule context="TextureCoordinate">
      <let name="point"         value="normalize-space(translate(@point, ',',' '))"/>
      <let name="pointCount"    value="string-length($point)  - string-length(translate($point,  ' ','')) + 1"/>
      <extends rule="DEFtests"/>
      <!-- TODO parent checks similar to X3DCoordinateNode -->
      <assert test="@point or (@USE) or boolean(IS/connect[@nodeField='point'])"    role="warning">&NodeDEFname; contains no data in point array </assert>
      <report test="not(@USE) and ($point) and preceding::TextureCoordinate[normalize-space(translate(@point, ',',' '))=$point] and not //ROUTE[@toField=$DEF] and not(ancestor::ProtoDeclare) and not(parent::field or parent::fieldValue)"  role="warning">&NodeDEFname; has identical point array matching a preceding TextureCoordinate node, consider DEF/USE to avoid duplication (point='<value-of select='substring(@point,0,40)'/>') </report>
      <report test="(string-length(normalize-space($point)) > 0) and (($pointCount div 2)!=round($pointCount div 2))"    role="warning">&NodeDEFname; point array has <value-of select='($pointCount div 2)'/> 2-tuples, likely has incorrect number of values or missing whitespace (point='<value-of select='substring(@point,0,40)'/>') </report>
      <report test="not(@USE)                 and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../Coordinate) and not(../CoordinateDouble) and not(local-name(..)='ElevationGrid') and not(local-name(..)='GeoElevationGrid') and not(local-name(..)='MultiTextureCoordinate')"  role="warning">&NodeDEFname; has no accompanying Coordinate (or CoordinateDouble) node </report>
      <report test="(string-length(@USE) > 0) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../Coordinate) and not(../CoordinateDouble) and not(local-name(..)='ElevationGrid') and not(local-name(..)='GeoElevationGrid') and not(local-name(..)='MultiTextureCoordinate')"  role="warning">&lt;<name/> USE='<value-of select='@USE'/>' has no accompanying Coordinate (or CoordinateDouble) node </report>
    </rule>

    <!-- ========= TextureCoordinateGenerator ========== -->
    <rule context="TextureCoordinateGenerator">
      <let name="parameterSpaceCount" value="string-length(normalize-space(translate(@parameter,',',' '))) - string-length(translate(normalize-space(translate(@parameter,',',' ')),' ',''))"/>
      <extends rule="DEFtests"/>
      <!-- TODO parent checks similar to X3DCoordinateNode -->
      <!-- default mode is SPHERE with no parameter --> 
      <report test="not(string-length(normalize-space(@USE)) > 0) and (string-length(normalize-space(@mode)) > 0) and not((@mode='SPHERE') or (@mode='CAMERASPACENORMAL') or (@mode='CAMERASPACEPOSITION') or (@mode='CAMERASPACEREFLECTIONVECTOR') or (@mode='SPHERE-LOCAL') or (@mode='COORD') or (@mode='COORD-EYE') or (@mode='NOISE') or (@mode='NOISE-EYE') or (@mode='SPHERE-REFLECT') or (@mode='SPHERE-REFLECT-LOCAL'))" role="error">&lt;<name/> DEF='<value-of select='$DEF'/>' mode='<value-of select='@mode'/>'/&gt; mode attribute has illegal enumeration value, mode must be one of SPHERE CAMERASPACENORMAL CAMERASPACEPOSITION CAMERASPACEREFLECTIONVECTOR SPHERE-LOCAL COORD COORD-EYE NOISE NOISE-EYE SPHERE-REFLECT or SPHERE-REFLECT-LOCAL </report>
      <!-- parameter count checks:  see Table 18.6 -->
      <report test="not(@USE) and (@mode='NOISE')                and (string-length(normalize-space(@parameter)) > 0) and ($parameterSpaceCount != 2)" role="warning">&lt;<name/> DEF='<value-of select='$DEF'/>' mode=&apos;<value-of select='(@mode)'/>&apos; parameter=&apos;<value-of select='(@parameter)'/>&apos;/&gt; parameter count is <value-of select='$parameterSpaceCount + 1'/> instead of 6 (for scale and translation x y z values) in this mode </report>
      <report test="not(@USE) and (@mode='SPHERE-REFLECT')       and (string-length(normalize-space(@parameter)) > 0) and ($parameterSpaceCount  > 0)" role="warning">&lt;<name/> DEF='<value-of select='$DEF'/>' mode=&apos;<value-of select='(@mode)'/>&apos; parameter=&apos;<value-of select='(@parameter)'/>&apos;/&gt; parameter count is <value-of select='$parameterSpaceCount + 1'/> instead of 0 or 1 (for optional index of refraction value) in this mode </report>
      <report test="not(@USE) and (@mode='SPHERE-REFLECT-LOCAL') and (string-length(normalize-space(@parameter)) > 0) and ($parameterSpaceCount != 0)" role="warning">&lt;<name/> DEF='<value-of select='$DEF'/>' mode=&apos;<value-of select='(@mode)'/>&apos; parameter=&apos;<value-of select='(@parameter)'/>&apos;/&gt; parameter count is <value-of select='$parameterSpaceCount + 1'/> instead of 4 (for index of refraction value and x y z eye-point values in local coordinate system) in this mode </report>
      <report test="not(@USE) and not(@mode='NOISE') and not(@mode='SPHERE-REFLECT') and not(@mode='SPHERE-REFLECT-LOCAL') and (string-length(normalize-space(@parameter)) > 0)" role="warning">&lt;<name/> DEF='<value-of select='$DEF'/>' mode=&apos;<value-of select='(@mode)'/>&apos; parameter=&apos;<value-of select='(@parameter)'/>&apos;/&gt; no parameters are defined for this mode </report>
      <report test="not(@USE)                 and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../Coordinate) and not(../CoordinateDouble) and not(local-name(..)='ElevationGrid') and not(local-name(..)='GeoElevationGrid') and not(local-name(..)='MultiTextureCoordinate')"  role="warning">&NodeDEFname; has no accompanying Coordinate (or CoordinateDouble) node </report>
      <report test="(string-length(@USE) > 0) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../Coordinate) and not(../CoordinateDouble) and not(local-name(..)='ElevationGrid') and not(local-name(..)='GeoElevationGrid') and not(local-name(..)='MultiTextureCoordinate')"  role="warning">&lt;<name/> USE='<value-of select='@USE'/>' has no accompanying Coordinate (or CoordinateDouble) node </report>
    </rule>

    <!-- ========= TextureTransform ========== -->
    <rule context="TextureTransform">
      <extends rule="DEFtests"/>
      <report test="not(@USE)                 and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../ImageTexture) and not(../MovieTexture) and not(../PixelTexture) and not(../MultiTexture)"  role="warning">&NodeDEFname; has no accompanying ImageTexture, MovieTexture, PixelTexture or MultiTexture node </report>
      <report test="(string-length(@USE) > 0) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../ImageTexture) and not(../MovieTexture) and not(../PixelTexture) and not(../MultiTexture)"  role="warning">&lt;<name/> USE='<value-of select='@USE'/>' has no accompanying ImageTexture, MovieTexture, PixelTexture or MultiTexture node </report>
    </rule>
    
    <!-- TODO MultiTextureCoordinate and MultiTextureTransform -->

    <!-- ========= MultiTextureCoordinate ========== -->
    <rule context="MultiTextureCoordinate">
      <extends rule="DEFtests"/>
      <report test="MultiTextureCoordinate"  role="error">&NodeDEFname; is not allowed to contain another MultiTextureCoordinate node </report>
    </rule>

    <!-- ========= MultiTextureTransform ========== -->
    <rule context="MultiTextureTransform">
      <extends rule="DEFtests"/>
      <report test="MultiTextureTransform"  role="error">&NodeDEFname; is not allowed to contain another MultiTextureTransform node </report>
    </rule>

    <!-- ========= MultiTexture ========== -->
    <rule context="MultiTexture">
      <let name="mode1"     value="substring-before(concat(normalize-space(translate(@mode,'&quot;',' ')),' '),' ')"/>
      <let name="function1" value="substring-before(concat(normalize-space(translate(@function,'&quot;',' ')),' '),' ')"/>
      <!-- TODO truncate before ending quote -->
      <let name="mode2"     value="normalize-space(substring-after(normalize-space(translate(@mode,'&quot;',' ')),' '))"/>
      <let name="function2" value="normalize-space(substring-after(normalize-space(translate(@function,'&quot;',' ')),' '))"/>
      <!-- TODO mode3, mode4 etc. -->
      <!-- TODO warn number of child textures is different than number of mode values -->
      <let name="modeQuoteCount"     value="string-length(@mode)     - string-length(translate(@mode,'&quot;',''))"/>
      <let name="functionQuoteCount" value="string-length(@function) - string-length(translate(@function,'&quot;',''))"/>
      <!-- set value="true()" to enable, value="false()" to disable -->
      <let name="trace" value="false()"/>
      <extends rule="DEFtests"/>
      <report test="MultiTexture"  role="error">&NodeDEFname; is not allowed to contain another MultiTexture node </report>
      <report test="  not(ImageTexture) and not(MovieTexture) and not(PixelTexture) and not(ProtoInstance)"  role="warning">&NodeDEFname; does not contain any texture nodes </report>
      <report test="(count(ImageTexture) + count(MovieTexture) + count(PixelTexture) + count(GeneratedCubeMapTexture) + count(ProtoInstance)) = 1"  role="warning">&NodeDEFname; only contains one texture node </report>
      <!-- mode -->
      <report test="$trace" role="trace">  $mode1=<value-of select='$mode1'/>, $mode2=<value-of select='$mode2'/>, $modeQuoteCount=<value-of select='$modeQuoteCount'/> </report>
      <assert test="(@USE) or not(@mode) or ($modeQuoteCount = 2) or ($modeQuoteCount = 4) or ($modeQuoteCount = 6)"    role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' mode='<value-of select='@mode'/>'/&gt; mode attribute has illegal number of "quotation marks" </assert>
      <report test="not(@USE) and (string-length(normalize-space($mode1)) > 0)     and not($mode1='MODULATE') and not($mode1='REPLACE') and not($mode1='MODULATE2X') and not($mode1='MODULATE4X') and not($mode1='ADD') and not($mode1='ADDSIGNED') and not($mode1='ADDSIGNED2X') and not($mode1='SUBTRACT') and not($mode1='ADDSMOOTH ') and not($mode1='BLENDDIFFUSEALPHA') and not($mode1='BLENDTEXTUREALPHA') and not($mode1='BLENDFACTORALPHA') and not($mode1='BLENDCURRENTALPHA') and not($mode1='MODULATEALPHA_ADDCOLOR') and not($mode1='MODULATEINVALPHA_ADDCOLOR') and not($mode1='MODULATEINVCOLOR_ADDALPHA') and not($mode1='OFF') and not($mode1='SELECTARG1') and not($mode1='SELECTARG2') and not($mode1='DOTPRODUCT3')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' mode='<value-of select='@mode'/>'/&gt; initial mode attribute &quot;<value-of select='@mode1'/>&quot; has illegal enumeration value, must be one of MODULATE REPLACE MODULATE2X MODULATE4X ADD ADDSIGNED ADDSIGNED2X SUBTRACT ADDSMOOTH  BLENDDIFFUSEALPHA BLENDTEXTUREALPHA BLENDFACTORALPHA BLENDCURRENTALPHA MODULATEALPHA_ADDCOLOR MODULATEINVALPHA_ADDCOLOR MODULATEINVCOLOR_ADDALPHA OFF SELECTARG1 SELECTARG2 DOTPRODUCT3 </report>
      <report test="not(@USE) and (string-length(normalize-space($mode2)) > 0)     and not($mode2='MODULATE') and not($mode2='REPLACE') and not($mode2='MODULATE2X') and not($mode2='MODULATE4X') and not($mode2='ADD') and not($mode2='ADDSIGNED') and not($mode2='ADDSIGNED2X') and not($mode2='SUBTRACT') and not($mode2='ADDSMOOTH ') and not($mode2='BLENDDIFFUSEALPHA') and not($mode2='BLENDTEXTUREALPHA') and not($mode2='BLENDFACTORALPHA') and not($mode2='BLENDCURRENTALPHA') and not($mode2='MODULATEALPHA_ADDCOLOR') and not($mode2='MODULATEINVALPHA_ADDCOLOR') and not($mode2='MODULATEINVCOLOR_ADDALPHA') and not($mode2='OFF') and not($mode2='SELECTARG1') and not($mode2='SELECTARG2') and not($mode2='DOTPRODUCT3')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' mode='<value-of select='@mode'/>'/&gt; secondary mode attribute &quot;<value-of select='@mode2'/>&quot; has illegal enumeration value, must be one of MODULATE REPLACE MODULATE2X MODULATE4X ADD ADDSIGNED ADDSIGNED2X SUBTRACT ADDSMOOTH  BLENDDIFFUSEALPHA BLENDTEXTUREALPHA BLENDFACTORALPHA BLENDCURRENTALPHA MODULATEALPHA_ADDCOLOR MODULATEINVALPHA_ADDCOLOR MODULATEINVCOLOR_ADDALPHA OFF SELECTARG1 SELECTARG2 DOTPRODUCT3 </report>
      <!-- source -->
      <!-- TODO bug in X3D specification? purpose of source is for second argument, but type is specified as MFString.  source is treated here as SFString. -->
      <report test="not(@USE) and (string-length(normalize-space(@source)) > 0)    and not(@source='DIFFUSE') and not(@source='SPECULAR') and not(@source='FACTOR')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' mode='<value-of select='@mode'/>' source='<value-of select='@source'/>'/&gt; source attribute has illegal enumeration value, source must be empty, DIFFUSE, SPECULAR or FACTOR </report>
      <!-- function -->
      <report test="$trace" role="trace">  $function1=<value-of select='$function1'/>, $function2=<value-of select='$function2'/>, $functionQuoteCount=<value-of select='$functionQuoteCount'/> </report>
      <assert test="(@USE) or not(@function) or ($functionQuoteCount = 2) or ($functionQuoteCount = 4)"    role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' function='<value-of select='@function'/>'/&gt; function attribute has illegal number of "quotation marks" </assert>
      <report test="not(@USE) and (string-length(normalize-space($function1)) > 0) and not($function1='COMPLEMENT') and not($function1='ALPHAREPLICATE')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' mode='<value-of select='@mode'/> function='<value-of select='@function'/>'/&gt; initial function attribute &quot;<value-of select='@function1'/>&quot; has illegal enumeration value, must be empty, COMPLEMENT or ALPHAREPLICATE </report>
      <report test="not(@USE) and (string-length(normalize-space($function2)) > 0) and not($function2='COMPLEMENT') and not($function2='ALPHAREPLICATE')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' mode='<value-of select='@mode'/> function='<value-of select='@function'/>'/&gt; secondary function attribute &quot;<value-of select='@function2'/>&quot; has illegal enumeration value, must be empty, COMPLEMENT or ALPHAREPLICATE </report>
      <!-- extraneous-quote tests for SFString enumeration fields
      <report test="contains(@function, '&quot;')" role="error">&NodeDEFname; function='<value-of select='@function'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <report test="contains(@mode, '&quot;')" role="error">&NodeDEFname; mode='<value-of select='@mode'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <report test="contains(@source, '&quot;')" role="error">&NodeDEFname; source='<value-of select='@source'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
       -->
    </rule>

    <!-- ========= TextureProperties ========== -->
    <rule context="TextureProperties">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <!-- extraneous-quote tests for SFString enumeration fields -->
      <report test="contains(@boundaryModeS, '&quot;')" role="error">&NodeDEFname; boundaryModeS='<value-of select='@boundaryModeS'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <report test="contains(@boundaryModeT, '&quot;')" role="error">&NodeDEFname; boundaryModeT='<value-of select='@boundaryModeT'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <report test="contains(@boundaryModeR, '&quot;')" role="error">&NodeDEFname; boundaryModeR='<value-of select='@boundaryModeR'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <report test="contains(@magnificationFilter, '&quot;')" role="error">&NodeDEFname; magnificationFilter='<value-of select='@magnificationFilter'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <report test="contains(@minificationFilter, '&quot;')" role="error">&NodeDEFname; minificationFilter='<value-of select='@minificationFilter'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <report test="contains(@minificationFilter,'MIPMAP') and not(@generateMipMaps='true')" role="error">&NodeDEFname; requires generateMipMaps='true' since minificationFilter='<value-of select='@minificationFilter'/>' mode indicates MIPMAP rendering </report>
      <report test="contains(@textureCompression, '&quot;')" role="error">&NodeDEFname; textureCompression='<value-of select='@textureCompression'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
    </rule>

    <!-- ========= MultiTextureCoordinate ========== -->
    <rule context="MultiTextureCoordinate">
      <extends rule="DEFtests"/>
      <report test="not(@USE)                 and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../Coordinate) and not(../CoordinateDouble) and not(local-name(..)='ElevationGrid') and not(local-name(..)='GeoElevationGrid')"  role="warning">&NodeDEFname; has no accompanying Coordinate (or CoordinateDouble) node </report>
      <report test="(string-length(@USE) > 0) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../Coordinate) and not(../CoordinateDouble) and not(local-name(..)='ElevationGrid') and not(local-name(..)='GeoElevationGrid')"  role="warning">&lt;<name/> USE='<value-of select='@USE'/>' has no accompanying Coordinate (or CoordinateDouble) node </report>
      <report test="not(@USE)                 and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and    (../TextureCoordinate)"  role="warning">&NodeDEFname; has sibling TextureCoordinate node, only one is allowed as immediate child of geometry node </report>
      <report test="(string-length(@USE) > 0) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and    (../TextureCoordinate)"  role="warning">&lt;<name/> USE='<value-of select='@USE'/>' has sibling TextureCoordinate node, only one is allowed as immediate child of geometry node </report>
    </rule>

    <!-- ========= MultiTextureTransform ========== -->
    <rule context="MultiTextureTransform">
      <extends rule="DEFtests"/>
      <report test="not(@USE)                 and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../ImageTexture) and not(../MovieTexture) and not(../PixelTexture) and not(../MultiTexture)"  role="warning">&NodeDEFname; has no accompanying ImageTexture, MovieTexture, PixelTexture or MultiTexture node </report>
      <report test="(string-length(@USE) > 0) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and not(../ImageTexture) and not(../MovieTexture) and not(../PixelTexture) and not(../MultiTexture)"  role="warning">&lt;<name/> USE='<value-of select='@USE'/>' has no accompanying ImageTexture, MovieTexture, PixelTexture or MultiTexture node </report>
      <report test="not(@USE)                 and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and    (../TextureTransform)"  role="warning">&NodeDEFname; has sibling TextureTransform node, only one is allowed as immediate child of Appearance node </report>
      <report test="(string-length(@USE) > 0) and not(local-name(..)='field') and not(local-name(..)='fieldValue') and not(local-name(..)='ProtoBody') and    (../TextureTransform)"  role="warning">&lt;<name/> USE='<value-of select='@USE'/>' has sibling TextureTransform node, only one is allowed as immediate child of Appearance node </report>
    </rule>

    <!-- ========= X3DTextureProjectorNode ========== -->
    <rule id="X3DTextureProjectorNode" abstract="true">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion4.0"/>
      <extends rule="enabledOnTests"/>
      <extends rule="descriptionTests"/>
      <report test="(number(@nearDistance) > number(@farDistance))"  role="error">&NodeDEFname; nearDistance='<value-of select='@nearDistance'/>' is greater than farDistance='<value-of select='@farDistance'/>' </report>
      <report test="(number(@nearDistance) = number(@farDistance))"  role="error">&NodeDEFname; nearDistance='<value-of select='@nearDistance'/>' equals farDistance='<value-of select='@farDistance'/>' so no projection can be shown </report>
    </rule>

    <!-- ========= TextureProjectorParallel ========== -->
    <rule context="TextureProjectorParallel">
      <let name="embeddedWhiteSpaceCount" value="string-length(@fieldOfView) - string-length(translate(@fieldOfView,' ',''))"/>
      <extends rule="X3DTextureProjectorNode"/>
      <report test="(string-length(@fieldOfView) > 0) and ($embeddedWhiteSpaceCount!=3)" role="error">&NodeDEFname; fieldOfView='<value-of select='@fieldOfView'/>' is not type SFVec4f (note related node TextureProjectorPerspective fieldOfView has different type) </report>
    </rule>

    <!-- ========= TextureProjectorPerspective ========== -->
    <rule context="TextureProjector">
      <let name="embeddedWhiteSpaceCount" value="string-length(@fieldOfView) - string-length(translate(@fieldOfView,' ',''))"/>
      <extends rule="X3DTextureProjectorNode"/>
      <report test="(string-length(@fieldOfView) > 0) and ($embeddedWhiteSpaceCount!=0)" role="error">&NodeDEFname; fieldOfView='<value-of select='@fieldOfView'/>' is not type SFFloat (note related node TextureProjectorParallel fieldOfView has different type) </report>
    </rule>

    <!-- ========= Geometry nodes ========== -->

    <!-- ========= abstract: geometryNode ========== -->
    <rule id="geometryNode" abstract="true">
      <extends rule="DEFtests"/>
      <!-- Ensure that orphan geometry nodes have a parent Shape or other legal construct -->
      <assert test="parent::Collision or parent::Shape or parent::ProtoBody or parent::field or parent::fieldValue" role="error">&NodeDEFname; geometry node must have Shape node as parent </assert>
      <!-- Collision proxy must be X3DChildNode, cannot be a geometryNode -->
      <report test="parent::Collision" role="warning">&NodeDEFname; containerField='<value-of select='@containerField'/>' cannot be proxy for parent &lt;Collision DEF='<value-of select='../@DEF'/>'&gt; node, insert intermediate parent node &lt;Shape containerField=&apos;proxy&apos;&gt; between them </report>
      <report test="(@ccw='TRUE' )"             role="error">&NodeDEFname; ccw='TRUE' is incorrect, define ccw='true' instead </report>
      <report test="(@ccw='FALSE')"             role="error">&NodeDEFname; ccw='FALSE' is incorrect, define ccw='false' instead </report>
      <report test="(@convex='TRUE' )"          role="error">&NodeDEFname; convex='TRUE' is incorrect, define convex='true' instead </report>
      <report test="(@convex='FALSE')"          role="error">&NodeDEFname; convex='FALSE' is incorrect, define convex='false' instead </report>
      <report test="(@solid='TRUE' )"           role="error">&NodeDEFname; solid='TRUE' is incorrect, define solid='true' instead </report>
      <report test="(@solid='FALSE')"           role="error">&NodeDEFname; solid='FALSE' is incorrect, define solid='false' instead </report>
      <report test="(@colorPerVertex='TRUE' )"  role="error">&NodeDEFname; colorPerVertex='TRUE' is incorrect, define colorPerVertex='true' instead </report>
      <report test="(@colorPerVertex='FALSE')"  role="error">&NodeDEFname; colorPerVertex='FALSE' is incorrect, define colorPerVertex='false' instead </report>
      <report test="(@normalPerVertex='TRUE' )" role="error">&NodeDEFname; normalPerVertex='TRUE' is incorrect, define normalPerVertex='true' instead </report>
      <report test="(@normalPerVertex='FALSE')" role="error">&NodeDEFname; normalPerVertex='FALSE' is incorrect, define normalPerVertex='false' instead </report>
    </rule>

    <!-- ========= fogCoord_attribTests:  attributes introduced in v3.1 on nodes defined in v3.0 ========== -->
    <!-- ElevationGrid | IndexedFaceSet | IndexedLineSet | IndexedQuadSet | IndexedTriangleFanSet | IndexedTriangleSet | IndexedTriangleStripSet | LineSet | PointSet | QuadSet | TriangleFanSet | TriangleSet | TriangleStripSet -->
    <rule id="fogCoord_attribTests" abstract="true">
      <report test="(@fogCoord) and (/X3D/@version = '3.0')" role="warning">&NodeDEFname; fogCoord='<value-of select='@fogCoord'/>' requires &lt;X3D version=&apos;3.1&apos;&gt; or higher, but found version='<value-of select='/X3D/@version'/>' </report>
      <report test="(@attrib)   and (/X3D/@version = '3.0')" role="warning">&NodeDEFname; attrib='<value-of select='@attrib'/>' requires &lt;X3D version=&apos;3.1&apos;&gt; or higher, but found version='<value-of select='/X3D/@version'/>' </report>
    </rule>

    <rule id="ChildDataCounts" abstract="true">
      <!-- compute values but let parent rule for each node determine whether values are correct -->
      <!-- note that count values = 1 if no nodes or values present, must also test for existence -->
      <let name="pointValues"                    value="normalize-space(*[starts-with(local-name(),'Coordinate')]/@point)"/>
      <let name="pointsCount"                    value="round((string-length($pointValues) - string-length(normalize-space(translate($pointValues,  ' ',''))) + 1) div 3)"/>
      <let name="colorValues"                    value="normalize-space(*[starts-with(local-name(),'Color')]/@color)"/>
      <let name="colorsCount"                    value="round((string-length($colorValues) - string-length(normalize-space(translate($colorValues,  ' ',''))) + 1) div 3)"/>
      <let name="normalVector"                   value="normalize-space(Normal/@vector)"/>
      <let name="normalsCount"                   value="round((string-length($normalVector) - string-length(normalize-space(translate($normalVector,  ' ',''))) + 1) div 3)"/>
      <let name="texCoordValues"                 value="normalize-space(TextureCoordinate/@point)"/>
      <let name="texCoordCount"                  value="round((string-length($texCoordValues) - string-length(normalize-space(translate($texCoordValues,  ' ',''))) + 1) div 3)"/>
      <let name="coordIndex"                     value="normalize-space(translate(@coordIndex, ',',' '))"/>
      <let name="coordIndexCount"                value="string-length($coordIndex)              - string-length(normalize-space(translate($coordIndex,  ' ',''))) + 1"/>
      <let name="colorIndex"                     value="normalize-space(translate(@colorIndex, ',',' '))"/>
      <let name="colorIndexCount"                value="string-length($colorIndex)              - string-length(normalize-space(translate($colorIndex,  ' ',''))) + 1"/>
      <let name="normalIndex"                    value="normalize-space(translate(@normalIndex, ',',' '))"/>
      <let name="normalIndexCount"               value="string-length($normalIndex)             - string-length(normalize-space(translate($normalIndex,  ' ',''))) + 1"/>
      <let name="texCoordIndex"                  value="normalize-space(translate(@texCoordIndex, ',',' '))"/>
      <let name="texCoordIndexCount"             value="string-length($texCoordIndex)           - string-length(normalize-space(translate($texCoordIndex,  ' ',''))) + 1"/>
      <let name="CoordinatePoint"                value="normalize-space(translate(Coordinate/@point, ',',' '))"/>
      <let name="CoordinatePointCount"           value="string-length($CoordinatePoint)         - string-length(normalize-space(translate($CoordinatePoint,  ' ',''))) + 1"/>
      <let name="CoordinateDoublePoint"          value="normalize-space(translate(CoordinateDouble/@point, ',',' '))"/>
      <let name="CoordinateDoublePointCount"     value="string-length($CoordinateDoublePoint)   - string-length(normalize-space(translate($CoordinateDoublePoint,  ' ',''))) + 1"/>
      <let name="ColorColor"                     value="normalize-space(translate(Color/@color, ',',' '))"/>
      <let name="ColorColorCount"                value="string-length($ColorColor)              - string-length(normalize-space(translate($ColorColor,  ' ',''))) + 1"/>
      <let name="ColorRGBAColor"                 value="normalize-space(translate(ColorRGBA/@color, ',',' '))"/>
      <let name="ColorRGBAColorCount"            value="string-length($ColorRGBAColor)          - string-length(normalize-space(translate($ColorRGBAColor,  ' ',''))) + 1"/>
      <let name="NormalVector"                   value="normalize-space(translate(Normal/@vector, ',',' '))"/>
      <let name="NormalVectorCount"              value="string-length($NormalVector)            - string-length(normalize-space(translate($NormalVector,  ' ',''))) + 1"/>
      <let name="TextureCoordinatePoint"         value="normalize-space(translate(TextureCoordinate/@point, ',',' '))"/>
      <let name="TextureCoordinatePointCount"    value="string-length($TextureCoordinatePoint)  - string-length(normalize-space(translate($TextureCoordinatePoint,  ' ',''))) + 1"/>
      <let name="ElevationGridHeight"            value="normalize-space(translate(@height, ',',' '))"/>
      <let name="ElevationGridHeightCount"       value="string-length($ElevationGridHeight)  - string-length(normalize-space(translate($ElevationGridHeight,  ' ',''))) + 1"/>
      <!-- TODO unsuccessful test:  XPath function calls to find max values
      <let name="coordIndex"                     value="@coordIndex"/>
      <let name="coordIndexCount"                value="count($coordIndex)"/>
      <let name="coordIndexMin"                  value="  min($coordIndex)"/>
      <let name="coordIndexMax"                  value="  max($coordIndex)"/>
      -->
      <!-- set value="true()" to enable, value="false()" to disable -->
      <let name="trace" value="false()"/>
      <!-- duplicate child node tests -->
      <report test="Coordinate and CoordinateDouble" role="error">&NodeDEFname; contains both Coordinate and CoordinateDouble nodes, no more than one is allowed </report>
      <report test="Color and ColorRGBA" role="error">&NodeDEFname; contains both Color and ColorRGBA nodes, no more than one is allowed </report>
      <report test="TextureCoordinate and TextureCoordinateGenerator" role="error">&NodeDEFname; contains both TextureCoordinate and TextureCoordinateGenerator nodes, no more than one is allowed </report>
      <report test="$trace" role="trace">ChildDataCounts: &NodeDEFname; </report>
      <report test="$trace" role="trace">  $pointsCount=<value-of select='$pointsCount'/> </report>
      <report test="$trace" role="trace">  $coordIndexCount=<value-of select='$coordIndexCount'/>, $colorIndexCount=<value-of select='$colorIndexCount'/>, $normalIndexCount=<value-of select='$normalIndexCount'/>, $texCoordIndexCount=<value-of select='$texCoordIndexCount'/> </report>
      <report test="$trace" role="trace">  $CoordinatePointCount=<value-of select='$CoordinatePointCount'/>, $CoordinateDoublePointCount=<value-of select='$CoordinateDoublePointCount'/> </report>
      <report test="$trace" role="trace">  $ColorColorCount=<value-of select='$ColorColorCount'/>, $ColorRGBAColorCount=<value-of select='$ColorRGBAColorCount'/> </report>
      <report test="$trace" role="trace">  $NormalVectorCount=<value-of select='$NormalVectorCount'/>, $TextureCoordinatePointCount=<value-of select='$TextureCoordinatePointCount'/> </report>
      <!-- extraneous-quote tests for SFString enumeration fields -->
      <report test="contains(@mode, '&quot;')" role="error">&NodeDEFname; mode='<value-of select='@mode'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <!-- common tests -->
    </rule>

    <!-- ========= Box | Cone | Cylinder | Sphere ========== -->
    <rule context="Box | Cone | Cylinder | Sphere">
      <let name="height"       value="normalize-space(@height)"/>
      <let name="radius"       value="normalize-space(@radius)"/>
      <let name="bottomRadius" value="normalize-space(@bottomRadius)"/>
      <extends rule="geometryNode"/>
      <!-- only Box needs sizeTests -->
      <extends rule="sizeTests"/>
      <!-- check for 0 values in any of the dimension fields -->
      <report test="($height='0')       or ($height='.0')       or ($height='0.0')       or ($height='0.00')"       role="error">&NodeDEFname; height='<value-of select='@height'/>' is incorrect, must be greater than zero </report>
      <report test="($radius='0')       or ($radius='.0')       or ($radius='0.0')       or ($radius='0.00')"       role="error">&NodeDEFname; radius='<value-of select='@radius'/>' is incorrect, must be greater than zero </report>
      <report test="($bottomRadius='0') or ($bottomRadius='.0') or ($bottomRadius='0.0') or ($bottomRadius='0.00')" role="error">&NodeDEFname; bottomRadius='<value-of select='@bottomRadius'/>' is incorrect, must be greater than zero </report>
      <report test="contains(@height,'-')       and not(contains(@height,'E-')       or contains(@height,'e-'))"       role="error">&NodeDEFname; height='<value-of select='@height'/>' is incorrect, must be greater than zero </report>
      <report test="contains(@radius,'-')       and not(contains(@radius,'E-')       or contains(@radius,'e-'))"       role="error">&NodeDEFname; radius='<value-of select='@radius'/>' is incorrect, must be greater than zero </report>
      <report test="contains(@bottomRadius,'-') and not(contains(@bottomRadius,'E-') or contains(@bottomRadius,'e-'))" role="error">&NodeDEFname; bottomRadius='<value-of select='@bottomRadius'/>' is incorrect, must be greater than zero </report>
      <!-- check parts -->
      <report test="(@bottom='TRUE' )" role="error">&NodeDEFname; bottom='TRUE' is incorrect, define bottom='true' instead </report>
      <report test="(@bottom='FALSE')" role="error">&NodeDEFname; bottom='FALSE' is incorrect, define bottom='false' instead </report>
      <report test="(@side='TRUE' )"   role="error">&NodeDEFname; side='TRUE' is incorrect, define side='true' instead </report>
      <report test="(@side='FALSE')"   role="error">&NodeDEFname; side='FALSE' is incorrect, define side='false' instead </report>
      <report test="(@top='TRUE' )"    role="error">&NodeDEFname; top='TRUE' is incorrect, define top='true' instead </report>
      <report test="(@top='FALSE')"    role="error">&NodeDEFname; top='FALSE' is incorrect, define top='false' instead </report>
    </rule>

    <rule id="ElevationGridAttributeChecks" abstract="true">
      <let name="heightValuesNeeded" value="(@xDimension * @zDimension)"/>
      <extends rule="ChildDataCounts"/>
      <report test="(string-length(normalize-space(translate(@xDimension,'0123456789',''))) > 0)"    role="error">&NodeDEFname; erroneous value xDimension='<value-of select='@xDimension'/>', must be non-negative integer </report>
      <report test="(string-length(normalize-space(translate(@zDimension,'0123456789',''))) > 0)"    role="error">&NodeDEFname; erroneous value zDimension='<value-of select='@zDimension'/>', must be non-negative integer </report>
      <report test="starts-with(normalize-space(@xSpacing),'-')"    role="error">&NodeDEFname; erroneous negative value xSpacing='<value-of select='@xSpacing'/>', must be positive </report>
      <report test="starts-with(normalize-space(@zSpacing),'-')"    role="error">&NodeDEFname; erroneous negative value zSpacing='<value-of select='@zSpacing'/>', must be positive </report>
      <report test="(@xSpacing = 0)"    role="error">&NodeDEFname; erroneous zero value xSpacing='<value-of select='@zSpacing'/>', must be positive </report>
      <report test="(@zSpacing = 0)"    role="error">&NodeDEFname; erroneous zero value zSpacing='<value-of select='@zSpacing'/>', must be positive </report>
      <assert test="($ElevationGridHeightCount = $heightValuesNeeded)">&NodeDEFname; height array has <value-of select='$ElevationGridHeightCount'/> values when (xDimension * zDimension = <value-of select='@xDimension'/> * <value-of select='@zDimension'/> = <value-of select='$heightValuesNeeded'/>) values are required </assert>
    </rule>

    <!-- ========= ElevationGrid ========== -->
    <rule context="ElevationGrid">
      <extends rule="geometryNode"/>
      <extends rule="creaseAngle"/>
      <extends rule="ElevationGridAttributeChecks"/>
      <extends rule="fogCoord_attribTests"/>
    </rule>

    <!-- ========= IndexedFaceSet | IndexedLineSet (IFS | ILS) ========== -->
    <rule context="IndexedFaceSet | IndexedLineSet">
      <extends rule="geometryNode"/>
      <extends rule="creaseAngle"/> <!-- for IndexedFaceSet only -->
      <extends rule="ChildDataCounts"/> <!-- TODO sum checks for each node-->
      <extends rule="fogCoord_attribTests"/>
      <extends rule="indexedPolyTests"/>
      <!-- test index presence, note child might be a USE node or an empty node waiting for Script initialization -->
      <report test="Coordinate        and (string-length(Coordinate/@point) > 0)        and (string-length($coordIndex)=0)"                                       role="warning">&NodeDEFname; contains Coordinate node but has no coordIndex values </report>
      <report test="CoordinateDouble  and (string-length(CoordinateDouble/@point) > 0)  and (string-length($coordIndex)=0)"                                       role="warning">&NodeDEFname; contains CoordinateDouble node but has no coordIndex values </report>
      <report test="Color             and (string-length(Color/@color) > 0)             and (string-length($colorIndex)=0)    and (string-length($coordIndex)=0)" role="warning">&NodeDEFname; contains Color node but has no colorIndex or coordIndex values </report>
      <report test="ColorRGBA         and (string-length(ColorRGBA/@color) > 0)         and (string-length($colorIndex)=0)    and (string-length($coordIndex)=0)" role="warning">&NodeDEFname; contains ColorRGBA node but has no colorIndex or coordIndex values </report>
      <report test="Normal            and (string-length(Normal/@normal) > 0)           and (string-length($normalIndex)=0)   and (string-length($coordIndex)=0)" role="warning">&NodeDEFname; contains Normal node but has no normalIndex or coordIndex values </report>
      <report test="TextureCoordinate and (string-length(TextureCoordinate/@point) > 0) and (string-length($texCoordIndex)=0) and (string-length($coordIndex)=0)" role="warning">&NodeDEFname; contains TextureCoordinate node but has no texCoordIndex or coordIndex values </report>
      <!-- partial test, should only report a problem if contained Coordinate* is USE; these rules do not include test for whether the contained USE node matches the preceding IFS/ILS corresponding contained DEF ndoe -->
      <report test="not(@USE) and ($coordIndex) and (local-name() = 'IndexedFaceSet')   and (string-length($coordIndex) > 10) and preceding::IndexedFaceSet[normalize-space(translate(@coordIndex, ',',' '))=$coordIndex] and not //ROUTE[@toField=$DEF] and not(ancestor::ProtoDeclare) and not(parent::field or parent::fieldValue) and (Coordinate[string-length(@USE) > 0] or CoordinateDouble[string-length(@USE) > 0])"  role="warning">&NodeDEFname; has identical coordIndex array matching a preceding IndexedFaceSet node, consider DEF/USE to avoid duplication if all attributes and child nodes are identical (coordIndex='<value-of select='substring(@coordIndex,0,40)'/>') </report>
      <report test="not(@USE) and ($coordIndex) and (local-name() = 'IndexedLineSet')   and (string-length($coordIndex) > 10) and preceding::IndexedLineSet[normalize-space(translate(@coordIndex, ',',' '))=$coordIndex] and not //ROUTE[@toField=$DEF] and not(ancestor::ProtoDeclare) and not(parent::field or parent::fieldValue) and (Coordinate[string-length(@USE) > 0] or CoordinateDouble[string-length(@USE) > 0])"  role="warning">&NodeDEFname; has identical coordIndex array matching a preceding IndexedLineSet node, consider DEF/USE to avoid duplication if all attributes and child nodes are identical (coordIndex='<value-of select='substring(@coordIndex,0,40)'/>') </report>
    </rule>

    <!-- ========= LineSet | PointSet ========== -->
    <rule context="LineSet | PointSet">
      <extends rule="geometryNode"/>
      <extends rule="ChildDataCounts"/>
      <extends rule="fogCoord_attribTests"/>
    </rule>

    <!-- ========= TriangleSet | TriangleFanSet | TriangleStripSet (TS | TFS | TSS) ========== -->
    <rule context="TriangleSet | TriangleFanSet | TriangleStripSet">
      <let name="paddedFanCount"   value="concat(' ', normalize-space(@fanCount),  ' ')"/>
      <let name="paddedStripCount" value="concat(' ', normalize-space(@stripCount),' ')"/>
      <extends rule="geometryNode"/>
      <extends rule="ChildDataCounts"/> <!-- TODO sum checks for each node-->
      <extends rule="fogCoord_attribTests"/>
	  <report test="(local-name() = 'TriangleFanSet')   and (contains($paddedFanCount,  '-') or contains($paddedFanCount,  ' 0 ') or contains($paddedFanCount,  ' 1 ') or contains($paddedFanCount,  ' 2 '))" role="error">&NodeDEFname; array fanCount='<value-of select='@fanCount'/>' values must each be 3 or greater to define fans </report>
      <report test="(local-name() = 'TriangleStripSet') and (contains($paddedStripCount,'-') or contains($paddedStripCount,' 0 ') or contains($paddedStripCount,' 1 ') or contains($paddedStripCount,' 2 '))" role="error">&NodeDEFname; array stripCount='<value-of select='@stripCount'/>' values must each be 3 or greater to define strips </report>
    </rule>

    <rule id="indexedPolyTests" abstract="true">
      <let name=         "indexMissing" value="(string-length(normalize-space(translate(         @index, ', ', ''))) le 0)"/>
      <let name=    "colorIndexMissing" value="(string-length(normalize-space(translate(    @colorIndex, ', ', ''))) le 0)"/>
      <let name=    "coordIndexMissing" value="(string-length(normalize-space(translate(    @coordIndex, ', ', ''))) le 0)"/>
      <let name=   "normalIndexMissing" value="(string-length(normalize-space(translate(   @normalIndex, ', ', ''))) le 0)"/>
      <let name= "texCoordIndexMissing" value="(string-length(normalize-space(translate( @texCoordIndex, ', ', ''))) le 0)"/>
      <let name="skinCoordIndexMissing" value="(string-length(normalize-space(translate(@skinCoordIndex, ', ', ''))) le 0)"/>
      <let name=     "coordIndexSpaces" value="(string-length(normalize-space(translate(   @coordIndex, ',', '')))  - string-length(normalize-space(translate(   @coordIndex, ', ', ''))))"/>
      <let name=          "pointSpaces" value="(string-length(normalize-space(translate(Coordinate/@point, ',', '')))  - string-length(normalize-space(translate(Coordinate/@point, ', ', ''))))"/>
      <let name=          "colorSpaces" value="(string-length(normalize-space(translate(Color/@color, ',', '')))  - string-length(normalize-space(translate(Color/@color, ', ', ''))))"/>
      <let name=         "normalSpaces" value="(string-length(normalize-space(translate(Normal/@vector, ',', ''))) - string-length(normalize-space(translate(Normal/@vector, ', ', ''))))"/>
      <let name="numberNodesMissingNormalIndex" value="count(//*[local-name()=$nodeName][string-length(@normalIndex)=0]/Normal)"/>
	  <report test=    "$colorIndexMissing and (Color/@color)             and not(IS/connect[@nodeField='colorIndex']) and not(contains(local-name(),'Triangle')) and not($pointSpaces ge $colorSpaces)"    role="error">&NodeDEFname; missing colorIndex array for contained Color node </report>
      <report test=    "$colorIndexMissing and (ColorRGBA/@color)         and not(IS/connect[@nodeField='colorIndex']) and $coordIndexMissing and not(contains(local-name(),'Triangle'))"    role="error">&NodeDEFname; missing colorIndex array for contained ColorRGBA node </report>
      <report test=         "$indexMissing and (Coordinate/@point)        and not(IS/connect[@nodeField='index'])      and    (starts-with(local-name(),'IndexedTriangle'))"    role="error">&NodeDEFname; missing index array for contained Coordinate node </report>
      <report test=    "$coordIndexMissing and (Coordinate/@point)        and not(IS/connect[@nodeField='coordIndex']) and not(starts-with(local-name(),'IndexedTriangle'))"    role="error">&NodeDEFname; missing coordIndex array for contained Coordinate node </report>
      <report test=    "$coordIndexMissing and (CoordinateDouble/@point)  and not(IS/connect[@nodeField='coordIndex'])"    role="error">&NodeDEFname; missing coordIndex array for contained CoordinateDouble node </report>
	  <!-- no normalIndex needed if (among other things) number of normals matches number of points -->
      <report test=   "$normalIndexMissing and (Normal/@vector)           and not(IS/connect[@nodeField='normalIndex']) and not(preceding::*[local-name()=$nodeName][string-length(@normalIndex)=0]/Normal) and not(contains(local-name(),'Triangle')) and not($pointSpaces ge $normalSpaces)" role="info">&NodeDEFname; missing normalIndex array, or insufficient normal values found, for contained Normal node (<value-of select='$numberNodesMissingNormalIndex'/> nodes total), use coordIndex values instead </report>
      <report test= "$texCoordIndexMissing and (TextureCoordinate/@point) and not(IS/connect[@nodeField='texCoordIndex']) and $coordIndexMissing and not(contains(local-name(),'Triangle'))" role="error">&NodeDEFname; missing texCoordIndex array for contained TextureCoordinate node </report>
      <report test="$skinCoordIndexMissing and (local-name()='HAnimHumanoid') and (Coordinate/@point)       and not(IS/connect[@nodeField='skinCoordIndex'])" role="error">&NodeDEFname; missing skinCoordIndex array for contained Coordinate node </report>
      <report test="$skinCoordIndexMissing and (local-name()='HAnimHumanoid') and (CoordinateDouble/@point) and not(IS/connect[@nodeField='skinCoordIndex'])" role="error">&NodeDEFname; missing skinCoordIndex array for contained CoordinateDouble node </report>
      <!-- Allow -1 sentinel values, but checks for no other negative values -->
      <report test="(string-length(@index)          > 0) and not(IS/connect[@nodeField='index'])          and (contains(@index,          '-11') or contains(@index,          '-12') or contains(@index,          '-13') or contains(@index,          '-14') or contains(@index,          '-15') or contains(@index,          '-16') or contains(@index,          '-17') or contains(@index,          '-18') or contains(@index,          '-19') or contains(@index,          '-10'))" role="error">&NodeDEFname; index='<value-of select='@index'/>' array values include -1 sentinel value without a follow-on space character </report>
      <report test="(string-length(@colorIndex)     > 0) and not(IS/connect[@nodeField='colorIndex'])     and (contains(@colorIndex,     '-11') or contains(@colorIndex,     '-12') or contains(@colorIndex,     '-13') or contains(@colorIndex,     '-14') or contains(@colorIndex,     '-15') or contains(@colorIndex,     '-16') or contains(@colorIndex,     '-17') or contains(@colorIndex,     '-18') or contains(@colorIndex,     '-19') or contains(@index,          '-10'))" role="error">&NodeDEFname; colorIndex='<value-of select='@colorIndex'/>' array values include -1 sentinel value without a follow-on space character </report>
      <report test="(string-length(@coordIndex)     > 0) and not(IS/connect[@nodeField='coordIndex'])     and (contains(@coordIndex,     '-11') or contains(@coordIndex,     '-12') or contains(@coordIndex,     '-13') or contains(@coordIndex,     '-14') or contains(@coordIndex,     '-15') or contains(@coordIndex,     '-16') or contains(@coordIndex,     '-17') or contains(@coordIndex,     '-18') or contains(@coordIndex,     '-19') or contains(@index,          '-10'))" role="error">&NodeDEFname; coordIndex='<value-of select='@coordIndex'/>' array values include -1 sentinel value without a follow-on space character </report>
      <report test="(string-length(@normalIndex)    > 0) and not(IS/connect[@nodeField='normalIndex'])    and (contains(@normalIndex,    '-11') or contains(@normalIndex,    '-12') or contains(@normalIndex,    '-13') or contains(@normalIndex,    '-14') or contains(@normalIndex,    '-15') or contains(@normalIndex,    '-16') or contains(@normalIndex,    '-17') or contains(@normalIndex,    '-18') or contains(@normalIndex,    '-19') or contains(@index,          '-10'))" role="error">&NodeDEFname; normalIndex='<value-of select='@normalIndex'/>' array values include -1 sentinel value without a follow-on space character </report>
      <report test="(string-length(@texCoordIndex)  > 0) and not(IS/connect[@nodeField='texCoordIndex'])  and (contains(@texCoordIndex,  '-11') or contains(@texCoordIndex,  '-12') or contains(@texCoordIndex,  '-13') or contains(@texCoordIndex,  '-14') or contains(@texCoordIndex,  '-15') or contains(@texCoordIndex,  '-16') or contains(@texCoordIndex,  '-17') or contains(@texCoordIndex,  '-18') or contains(@texCoordIndex,  '-19') or contains(@index,          '-10'))" role="error">&NodeDEFname; texCoordIndex='<value-of select='@texCoordIndex'/>' array values include -1 sentinel value without a follow-on space character </report>
      <report test="(string-length(@skinCoordIndex) > 0) and not(IS/connect[@nodeField='skinCoordIndex']) and (contains(@skinCoordIndex, '-11') or contains(@skinCoordIndex, '-12') or contains(@skinCoordIndex, '-13') or contains(@skinCoordIndex, '-14') or contains(@skinCoordIndex, '-15') or contains(@skinCoordIndex, '-16') or contains(@skinCoordIndex, '-17') or contains(@skinCoordIndex, '-18') or contains(@skinCoordIndex, '-19') or contains(@index,          '-10'))" role="error">&NodeDEFname; skinCoordIndex='<value-of select='@skinCoordIndex'/>' array values include -1 sentinel value without a follow-on space character </report>
      <!-- Allow no -1 sentinel values, or other negative values, for exceptions IndexedTriangleSet (ITS), IndexedQuadSet (IQS), HAnimDisplacer and HAnimJoint which are zero-based -->
	  <report test="((local-name() = 'IndexedQuadSet') or (local-name() = 'IndexedTriangleSet')) and contains(@index,'-1')" role="error">&NodeDEFname; array index='<value-of select='@index'/>' cannot include -1 sentinel value or negative values. </report>
      <!-- TODO checks that index values are not larger than corresponding data sets -->
    </rule>

    <!-- ========= IndexedTriangleSet (ITS) ========== -->
    <rule context="IndexedTriangleSet">
      <extends rule="geometryNode"/>
      <extends rule="ChildDataCounts"/> <!-- TODO sum checks for each node-->
      <extends rule="fogCoord_attribTests"/>
      <extends rule="indexedPolyTests"/>
      <report test="contains(@index,'-1')" role="error">&NodeDEFname; index='<value-of select='@index'/>' must not contain -1 sentinel values </report>
    </rule>

    <!-- ========= IndexedTriangleFanSet | IndexedTriangleStripSet (ITFS | ITSS) ========== -->
    <rule context="IndexedTriangleFanSet | IndexedTriangleStripSet">
      <extends rule="geometryNode"/>
      <extends rule="ChildDataCounts"/> <!-- TODO sum checks for each node-->
      <extends rule="fogCoord_attribTests"/>
      <extends rule="indexedPolyTests"/>
	</rule>
    
    <!-- Geometry2D prerequisites met by Immersive, Interactive, Interchange or CADInterchange -->

    <!-- ========= Polyline2D | Polypoint2D | Rectangle2D | TriangleSet2D ========== -->
    <rule context="Polyline2D | Polypoint2D | Rectangle2D | TriangleSet2D">
      <extends rule="geometryNode"/>
      <assert test="(/X3D[(@profile='Immersive') or (@profile='Full')] or /X3D/head/component[@name='Geometry2D'][number(@level) ge 1] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;X3D profile='Immersive'&gt; or &lt;component name='Geometry2D' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
    </rule>

    <!-- ========= Arc2D | ArcClose2D | Circle2D | Disk2D ========== -->
    <rule context="Arc2D | ArcClose2D | Circle2D | Disk2D">
      <let name="beginAngle" value="number(@beginAngle)"/>
      <let name="endAngle"   value="number(@endAngle)"/>
      <extends rule="geometryNode"/>
      <assert test="(/X3D[@profile='Full']                           or /X3D/head/component[@name='Geometry2D'][number(@level) ge 2] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='Geometry2D' level='2'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
     <!-- Arc2D, ArcClose2D beginAngle, endAngle [-2pi..2pi] -->
      <report test="($beginAngle gt  3.141592653)" role="error">&NodeDEFname; beginAngle='<value-of select='@beginAngle'/>' is greater than 3.141592653 (Pi radians = 360 degrees), use a smaller value. must not exceed legal range of values or tools may throw errors. </report>
      <report test="($endAngle   gt  3.141592653)" role="error">&NodeDEFname; endAngle='<value-of   select='@endAngle'  />' is greater than 3.141592653 (Pi radians = 360 degrees), use a smaller value. must not exceed legal range of values or tools may throw errors. </report>
      <report test="($beginAngle lt -3.141592653)" role="error">&NodeDEFname; beginAngle='<value-of select='@beginAngle'/>' is less than -3.141592653 (-Pi radians = -360 degrees), use a larger value. must not exceed legal range of values or tools may throw errors. </report>
      <report test="($endAngle   lt -3.141592653)" role="error">&NodeDEFname; endAngle='<value-of   select='@endAngle'  />' is less than -3.141592653 (-Pi radians = -360 degrees), use a larger value. must not exceed legal range of values or tools may throw errors. </report>
     </rule>

    <!-- ========= Lighting nodes ========== -->

    <rule id="LightingTests" abstract="true">
      <report test="(@global='true') and (/X3D/@version = '3.0')" role="error">&NodeDEFname; global='<value-of select='@global'/>' requires &lt;X3D version=&apos;3.1&apos;&gt; or higher, but found version='<value-of select='/X3D/@version'/>' </report>
      <!-- TODO color tests, SpotLight angle and radius tests -->
      <report test="(@global='TRUE' )" role="error">&NodeDEFname; global='TRUE' is incorrect, define global='true' instead </report>
      <report test="(@global='FALSE')" role="error">&NodeDEFname; global='FALSE' is incorrect, define global='false' instead </report>
      <report test="(@on='TRUE' )"     role="error">&NodeDEFname; on='TRUE' is incorrect, define on='true' instead </report>
      <report test="(@on='FALSE')"     role="error">&NodeDEFname; on='FALSE' is incorrect, define on='false' instead </report>
    </rule>

    <!-- ========= DirectionalLight | PointLight | SpotLight ========== -->
    <rule context="DirectionalLight | PointLight | SpotLight">
      <let name="beamWidth"   value="number(@beamWidth)"/>
      <let name="cutoffAngle" value="number(@cutoffAngle)"/>
      <extends rule="colorField"/>
      <extends rule="LightingTests"/>
      <report test="($beamWidth   gt 1.570796)" role="error">&NodeDEFname; beamWidth='<value-of   select='@beamWidth'  />' is greater than 1.570796 (Pi/2 radians = 90 degrees), use a smaller value. must not exceed legal range of values or tools may throw errors. </report>
      <report test="($cutoffAngle gt 1.570796)" role="error">&NodeDEFname; cutoffAngle='<value-of select='@cutoffAngle'/>' is greater than 1.570796 (Pi/2 radians = 90 degrees), use a smaller value. must not exceed legal range of values or tools may throw errors. </report>
      <report test="($beamWidth   le 0)" role="error">&NodeDEFname; beamWidth='<value-of   select='@beamWidth'  />' is less than or equal to 0, use a positive value up to 1.570796 (Pi/2 radians = 90 degrees). must not exceed legal range of values or tools may throw errors. </report>
      <report test="($cutoffAngle le 0)" role="error">&NodeDEFname; cutoffAngle='<value-of select='@cutoffAngle'/>' is less than or equal to 0, use a positive value up to 1.570796 (Pi/2 radians = 90 degrees). must not exceed legal range of values or tools may throw errors. </report>
      <report test="(string-length(normalize-space($color)) > 0) and ($colorCount != 3)"    role="warning">&NodeDEFname; color='<value-of select='@color'/>' has <value-of select='($colorCount)'/> values instead of 3 </report>
      <report test="(/X3D[starts-with(@version,'3')] and (string-length(normalize-space(@shadows))         > 0))" role="error">&NodeDEFname; shadows='<value-of select='@shadows'/>' requires X3D version='4.0' or greater </report>
      <report test="(/X3D[starts-with(@version,'3')] and (string-length(normalize-space(@shadowIntensity)) > 0))" role="error">&NodeDEFname; shadowIntensity='<value-of select='@shadowIntensity'/>' requires X3D version='4.0' or greater </report>
      <report test="(string-length(normalize-space(@shadow))           > 0)" role="error">&NodeDEFname; shadow='<value-of select='@shadow'/>' field name is mispelled, correct name is shadows </report>
      <report test="(string-length(normalize-space(@shadowsIntensity)) > 0)" role="error">&NodeDEFname; shadowsIntensity='<value-of select='@shadowsIntensity'/>' field name is mispelled, correct name is shadowIntensity </report>
    </rule>

    <!-- ========= DIS nodes ========== -->

    <rule id="DisComponentLevel1" abstract="true">
      <assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[@name='DIS'][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='DIS' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
    </rule>

    <rule id="DisComponentLevel2" abstract="true">
      <assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[@name='DIS'][number(@level) ge 2])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='DIS' level='2'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
    </rule>

    <!-- ========= EspduTransform ========== -->
    <rule context="EspduTransform">
      <extends rule="DEFtests"/>
      <extends rule="DisComponentLevel1"/>
      <extends rule="NeedsChildNode"/>
      <!-- extraneous-quote tests for SFString enumeration fields -->
      <report test="contains(@networkMode, '&quot;')" role="error">&NodeDEFname; networkMode='<value-of select='@networkMode'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <assert test="not(@networkMode) or (@networkMode='') or (@networkMode='standAlone') or (@networkMode='networkReader') or (@networkMode='networkWriter')" role="error">&NodeDEFname; networkMode='<value-of select='@networkMode'/>' is erroneous, must use a legal value ( standAlone | networkReader | networkWriter ) </assert>
      <!-- TODO more tests -->
    </rule>

    <!-- ========= ReceiverPdu ========== -->
    <rule context="ReceiverPdu">
      <extends rule="DEFtests"/>
      <extends rule="DisComponentLevel1"/>
      <!-- extraneous-quote tests for SFString enumeration fields -->
      <report test="contains(@networkMode, '&quot;')" role="error">&NodeDEFname; networkMode='<value-of select='@networkMode'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <assert test="not(@networkMode) or (@networkMode='') or (@networkMode='standAlone') or (@networkMode='networkReader') or (@networkMode='networkWriter')" role="error">&NodeDEFname; networkMode='<value-of select='@networkMode'/>' is erroneous, must use a legal value ( standAlone | networkReader | networkWriter ) </assert>
      <!-- TODO more tests -->
    </rule>

    <!-- ========= SignalPdu ========== -->
    <rule context="SignalPdu">
      <extends rule="DEFtests"/>
      <extends rule="DisComponentLevel1"/>
      <!-- extraneous-quote tests for SFString enumeration fields -->
      <report test="contains(@networkMode, '&quot;')" role="error">&NodeDEFname; networkMode='<value-of select='@networkMode'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <assert test="not(@networkMode) or (@networkMode='') or (@networkMode='standAlone') or (@networkMode='networkReader') or (@networkMode='networkWriter')" role="error">&NodeDEFname; networkMode='<value-of select='@networkMode'/>' is erroneous, must use a legal value ( standAlone | networkReader | networkWriter ) </assert>
      <!-- TODO more tests -->
    </rule>

    <!-- ========= TransmitterPdu ========== -->
    <rule context="TransmitterPdu">
      <extends rule="DEFtests"/>
      <extends rule="DisComponentLevel1"/>
      <!-- extraneous-quote tests for SFString enumeration fields -->
      <report test="contains(@networkMode, '&quot;')" role="error">&NodeDEFname; networkMode='<value-of select='@networkMode'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <assert test="not(@networkMode) or (@networkMode='') or (@networkMode='standAlone') or (@networkMode='networkReader') or (@networkMode='networkWriter')" role="error">&NodeDEFname; networkMode='<value-of select='@networkMode'/>' is erroneous, must use a legal value ( standAlone | networkReader | networkWriter ) </assert>
      <!-- TODO more tests -->
    </rule>

    <!-- ========= DISEntityManager ========== -->
    <rule context="DISEntityManager">
      <extends rule="DEFtests"/>
      <extends rule="DisComponentLevel2"/>
    </rule>

    <!-- ========= DISEntityTypeMapping ========== -->
    <rule context="DISEntityTypeMapping">
      <extends rule="DEFtests"/>
      <extends rule="DisComponentLevel2"/>
      <!-- X3D4 Field name changes https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#fieldNameChanges -->
      <report test="$isX3D3 and (local-name(..) = 'DISEntityManager') and not(@containerField = 'mapping')"   role="error">&NodeDEFname; containerField='<value-of select='@containerField'/>' in X3D version='<value-of select='/X3D/@version'/>' model with parent DISEntityManager must have containerField='mapping' </report>
      <report test="$isX3D3 and (local-name(..) = 'LoadSensor')       and not(@containerField = 'watchList')" role="error">&NodeDEFname; containerField='<value-of select='@containerField'/>' in X3D version='<value-of select='/X3D/@version'/>' model with parent LoadSensor must have containerField='watchList' </report>
      <report test="$isX3D4 and (local-name(..) = 'DISEntityManager') and not(@containerField = 'children')"  role="error">&NodeDEFname; containerField='<value-of select='@containerField'/>' in X3D version='<value-of select='/X3D/@version'/>' model with parent DISEntityManager must have containerField='children' </report>
      <report test="$isX3D4 and (local-name(..) = 'LoadSensor')       and not(@containerField = 'children')"  role="error">&NodeDEFname; containerField='<value-of select='@containerField'/>' in X3D version='<value-of select='/X3D/@version'/>' model with parent LoadSensor must have containerField='children' </report>
      <!-- TODO more tests -->
      <!-- TODO more tests -->
      <report test="parent::DISEntityManager and not(@containerField='mapping')" role="error">&NodeDEFname; containerField='<value-of select='@containerField'/>'incorrect, must be containerField=&apos;mapping&apos;&gt; to match parent DISEntityManager' </report>
    </rule>

    <!-- ========= Geospatial nodes ========== -->

    <rule id="GeospatialComponentLevel1" abstract="true">
      <assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[@name='Geospatial'][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='Geospatial' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
    </rule>

    <rule id="GeospatialComponentLevel2" abstract="true">
      <assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[@name='Geospatial'][number(@level) ge 2])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='Geospatial' level='2'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
    </rule>

    <rule id="NoGeospatialAncestor" abstract="true">
      <report test="ancestor::GeoLocation"  role="error">&NodeDEFname; must not have any parent or ancestor GeoLocation nodes, in order to avoid multiple geospatial transformations </report>
 <!-- <report test="ancestor::GeoLOD"       role="error">&NodeDEFname; must not have any parent or ancestor GeoLOD nodes, in order to avoid multiple geospatial transformations </report> -->
      <report test="ancestor::GeoTransform" role="error">&NodeDEFname; must not have any parent or ancestor GeoTransform nodes, in order to avoid multiple geospatial transformations </report>
      <!-- other Geo nodes should be caught by XML schema/DTD validation rules -->
    </rule>

    <rule id="geoSystemTests" abstract="true">
      <let name="geoSystem1" value="translate(normalize-space(substring-before(substring-after(@geoSystem,'&quot;'),'&quot;')),' ','')"/>
      <let name="geoSystem2" value="translate(normalize-space(substring-after(@geoSystem,$geoSystem1)),'&quot; ','')"/>
      <let name="value" value="normalize-space(@geoSystem)"/>
      <let name="length" value="string-length($value)"/>
      <!-- 25.2.3 Specifying a spatial reference frame -->
      <report test="contains(@geoSystem,'GDC')" role="warning">&NodeDEFname; includes deprecated geoSystem='<value-of select='@geoSystem'/>' value GDC, replace with GD instead </report>
      <report test="contains(@geoSystem,'GCC')" role="warning">&NodeDEFname; includes deprecated geoSystem='<value-of select='@geoSystem'/>' value GCC, replace with GC instead </report>
      <!-- <report test="not(@USE) and true()" role="diagnostic">geoSystem1='<value-of select='$geoSystem1'/>' geoSystem2='<value-of select='$geoSystem2'/>' </report> -->
      <assert test="($geoSystem1='') or ($geoSystem1='GD') or ($geoSystem1='UTM') or ($geoSystem1='GC')" role="error">&NodeDEFname; geoSystem='<value-of select='@geoSystem'/>' has illegal value (allowed values are GD, UTM, GC) </assert>
      <!-- Table 25.3, Supported earth ellipsoids -->
      <report test="($geoSystem1='GD') and ($geoSystem2='')" role="warning">&NodeDEFname; geoSystem='<value-of select='@geoSystem'/>' missing second value, assuming &quot;GD&quot; &quot;WE&quot; </report>
      <report test="($geoSystem1='GD') and
          not(($geoSystem2='') or ($geoSystem2='WGS84') or ($geoSystem2='AA') or ($geoSystem2='AM') or ($geoSystem2='AN') or ($geoSystem2='BN') or ($geoSystem2='BR') or
              ($geoSystem2='CC') or ($geoSystem2='CD') or ($geoSystem2='EA') or ($geoSystem2='EB') or ($geoSystem2='EC') or ($geoSystem2='ED') or
              ($geoSystem2='EE') or ($geoSystem2='EF') or ($geoSystem2='FA') or ($geoSystem2='HE') or ($geoSystem2='HO') or ($geoSystem2='ID') or
              ($geoSystem2='IN') or ($geoSystem2='KA') or ($geoSystem2='RF') or ($geoSystem2='SA') or ($geoSystem2='WD') or ($geoSystem2='WE'))" role="error">&NodeDEFname; geoSystem='<value-of select='@geoSystem'/>' spatial reference frame &quot;<value-of select='$geoSystem1'/>&quot; has illegal parameter &quot;<value-of select='$geoSystem2'/>&quot; (see X3D Specification Table 25.3, Supported earth ellipsoids) </report>
      <report test="($geoSystem1='UTM') and not(starts-with($geoSystem2,'Z'))" role="warning">&NodeDEFname; geoSystem='<value-of select='@geoSystem'/>' has invalid second value, must be Z## (where ## is zone number) </report>
      <report test="($geoSystem1='GC') and not($geoSystem2='')" role="warning">&NodeDEFname; geoSystem='<value-of select='@geoSystem'/>' has invalid second value, assuming simply &quot;GC&quot; </report>
      <!-- Check child GeoOrigin nodes -->
      <report test="count(GeoOrigin) > 1" role="warning">&NodeDEFname; can only contain single GeoOrigin node, not <value-of select="count(GeoOrigin)"/> nodes </report>
      <report test="@geoSystem and (string-length(@geoSystem) > 0) and not(contains(@geoSystem,'&quot;'))" role="error">&NodeDEFname; geoSystem='<value-of select='@geoSystem'/>' should have quoted values, for example geoSystem='&quot;GD&quot; &quot;WE&quot;' </report>
	  <!-- each geoSystem term is fully quoted.  compare 2*(number of spaces + 1) to (number of quotes) -->
      <report test="2*($length - string-length(translate($value, ' ', '')) + 1) != ($length - string-length(translate(@geoSystem, '&quot;', '')))" role="error">&NodeDEFname; geoSystem='<value-of select='@geoSystem'/>' has incorrectly quoted values, example value is geoSystem='&quot;GD&quot; &quot;WE&quot;' </report>
    </rule>

    <!-- ========= GeoCoordinate ========== -->
    <rule context="GeoCoordinate">
        <!-- TODO parent checks -->
      <extends rule="DEFtests"/>
      <extends rule="GeospatialComponentLevel1"/>
      <extends rule="geoSystemTests"/>
      <report test="ancestor::GeoLocation" role="error">&NodeDEFname; must not have any parent or ancestor GeoLocation nodes, use GeoTransform instead </report>
      <report test="ancestor::GeoLOD" role="error">&NodeDEFname; must not have any parent or ancestor GeoLOD nodes, use GeoTransform instead </report>
      <!-- can have IndexedLineSet without GeoTransform, thus ancestor GeoTransform node is optional -->
    </rule>

    <!-- ========= GeoElevationGrid ========== -->
    <rule context="GeoElevationGrid">
      <extends rule="geometryNode"/>
      <extends rule="creaseAngle"/>
      <extends rule="GeospatialComponentLevel1"/>
      <extends rule="NoGeospatialAncestor"/>
      <extends rule="geoSystemTests"/>
      <extends rule="ElevationGridAttributeChecks"/>
      <!-- allowed per working-group spec discussion
      <report test="starts-with(normalize-space(@yScale),'-')"    role="error">&NodeDEFname; erroneous negative value yScale='<value-of select='@yScale'/>', must be positive or zero </report> -->
      <report test="((@geoGridOrigin='0 0 0') or (@geoGridOrigin='0.0 0.0 0.0')) and not(@USE)" role="warning">&NodeDEFname; geoGridOrigin='<value-of select='@geoGridOrigin'/>', instead needs actual location value </report>
    </rule>

    <!-- ========= GeoLocation ========== -->
    <rule context="GeoLocation">
      <extends rule="DEFtests"/>
      <extends rule="GeospatialComponentLevel1"/>
      <extends rule="NoGeospatialAncestor"/>
      <extends rule="geoSystemTests"/>
      <report test="((@geoCoords='0 0 0') or (@geoCoords='0.0 0.0 0.0')) and not(@USE)" role="warning">&NodeDEFname; geoCoords='<value-of select='@geoCoords'/>', instead needs actual location value </report>
      <report test="//*[starts-with('Geo',local-name()) and not(local-name()='GeoOrigin')]" role="warning">&NodeDEFname; contains geospatial node other than GeoOrigin </report>
    </rule>

    <!-- ========= GeoLOD ========== -->
    <rule context="GeoLOD">
      <extends rule="DEFtests"/>
      <extends rule="GeospatialComponentLevel1"/>
      <extends rule="NoGeospatialAncestor"/>
      <extends rule="geoSystemTests"/>
      <extends rule="NeedsChildNode"/>
      <report test="starts-with(normalize-space(@range),'-')" role="warning">&NodeDEFname; range='<value-of select='@range'/>' value must not be negative </report>
      <report test="((@center='0 0 0') or (@center='0.0 0.0 0.0')) and not(@USE)" role="warning">&NodeDEFname; center='<value-of select='@center'/>', instead needs actual location value </report>
      <report test="((string-length(@rootUrl)=0)  and not(*[not(local-name() = 'GeoOrigin') and not(starts-with(local-name(),'Metadata'))])) and not(@USE)" role="warning">&NodeDEFname; has no rootUrl and no contained children, thus will not render </report>
      <report test="((string-length(@rootUrl) gt 0) and *[not(local-name() = 'GeoOrigin') and not(starts-with(local-name(),'Metadata'))])  and not(@USE)" role="warning">&NodeDEFname; cannot include both rootUrl and contained children </report>
      <report test="(string-length(@child1Url)=0) and not(@USE)" role="warning">&NodeDEFname; has no child1Url </report>
      <report test="(string-length(@child2Url)=0) and not(@USE)" role="warning">&NodeDEFname; has no child2Url </report>
      <report test="(string-length(@child3Url)=0) and not(@USE)" role="warning">&NodeDEFname; has no child3Url </report>
      <report test="(string-length(@child4Url)=0) and not(@USE)" role="warning">&NodeDEFname; has no child4Url </report>
      <!-- TODO hasUrl includes rule patterns that can used for child1Url, child2Url, child3Url, child4Url although X3D Regex checking is much more effective at finding incorrect syntax -->
      <report test="(count(*[(@containerField='rootNode') or (@containerField='children') or not(string-length(@containerField) > 0)]) > 1)" role="error">&NodeDEFname; can only contain a single child node with containerField='rootNode' </report>
      <report test                                       ="*[(@containerField='children') or not(string-length(@containerField) > 0)]" role="error">&NodeDEFname; child node needs to have containerField='rootNode' instead of containerField='children' </report>
    </rule>

    <!-- ========= GeoMetadata ========== -->
    <rule context="GeoMetadata">
      <extends rule="DEFtests"/>
      <extends rule="GeospatialComponentLevel1"/>
      <!-- TODO metadata value rules -->
      <assert test="starts-with(local-name(..),'Geo') or starts-with(local-name(..),'field')" role="error">&NodeDEFname; parent <value-of select="local-name(..)"/> is not a geospatial node </assert>
      <assert test="*[(@containerField='metadata') or (@containerField='data')]" role="error">&NodeDEFname; contains node &lt;<value-of select="local-name(*[(@containerField!='metadata') and (@containerField!='data')][1])"/> DEF='<value-of select="*[(@containerField!='metadata') and (@containerField!='data')][1]/@DEF"/>'/&gt; with incorrect containerField (allowed values are 'metadata' and 'data') </assert>
    </rule>

    <!-- ========= GeoOrigin ========== -->
    <rule context="GeoOrigin">
      <extends rule="DEFtests"/>
      <extends rule="GeospatialComponentLevel1"/>
      <extends rule="geoSystemTests"/>
  <!--<extends rule="X3Dversion3.3Deprecated"/> full restoration likely in v4.0 so quit warning about this -->
  <!--<extends rule="NotX3dChildNode"/> full inclusion likely in v4.0 so quit warning about this
      <report test="count(preceding::GeoOrigin) = 0" role="warning">&NodeDEFname; note that GeoOrigin node is deprecated/optional (<value-of select='count(//GeoOrigin)'/> occurrences found) </report>
      <report test="count(preceding-sibling::*) > 0" role="warning">&NodeDEFname; note that use of GeoOrigin node (if used) must be first child of parent <value-of select="local-name(..)"/> to pass X3D Schema/DTD validation </report> -->
	  <report test="((@geoCoords='0 0 0') or (@geoCoords='0.0 0.0 0.0')) and not(@USE)" role="warning">&NodeDEFname; geoCoords='<value-of select='@geoCoords'/>', instead needs actual location value </report>
      <report test="(@rotateYUp='TRUE' )" role="error">&NodeDEFname; rotateYUp='TRUE' is incorrect, define rotateYUp='true' instead </report>
      <report test="(@rotateYUp='FALSE')" role="error">&NodeDEFname; rotateYUp='FALSE' is incorrect, define rotateYUp='false' instead </report>
    </rule>

    <!-- ========= GeoPositionInterpolator ========== -->
    <rule context="GeoPositionInterpolator">
      <extends rule="InterpolatorNode"/>
      <extends rule="GeospatialComponentLevel1"/>
      <extends rule="geoSystemTests"/>
      <assert test="((string-length($key) > 0) or (string-length($keyValue) > 0)) and (3 * $keyCount)=$keyValueCount" role="error">&NodeDEFname; key array (size=<value-of select="$keyCount"/>) must match keyValue array (size=<value-of select="$keyValueCount div 3"/>) </assert>
    </rule>

    <!-- ========= GeoProximitySensor ========== -->
    <rule context="GeoProximitySensor">
      <extends rule="DEFtests"/>
      <extends rule="enabledOnTests"/>
      <extends rule="sizeTests"/>
      <extends rule="X3Dversion3.2"/>
      <extends rule="GeospatialComponentLevel2"/>
      <extends rule="NoGeospatialAncestor"/>
      <extends rule="geoSystemTests"/>
      <extends rule="NeedsOutputROUTE"/>
      <report test="((@geoCenter='0 0 0') or (@geoCenter='0.0 0.0 0.0')) and not(@USE)" role="warning">&NodeDEFname; geoCenter='<value-of select='@geoCenter'/>', instead needs actual location value </report>
    </rule>

    <!-- ========= GeoTouchSensor ========== -->
    <rule context="GeoTouchSensor">
      <extends rule="DEFtests"/>
      <extends rule="enabledOnTests"/>
      <extends rule="GeospatialComponentLevel1"/>
      <extends rule="NoGeospatialAncestor"/> <!-- TODO needed? -->
      <extends rule="geoSystemTests"/>
      <extends rule="NeedsOutputROUTE"/>
      <extends rule="descriptionTests"/>
    </rule>

    <!-- ========= GeoTransform ========== -->
    <rule context="GeoTransform">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <extends rule="GeospatialComponentLevel2"/>
      <extends rule="NoGeospatialAncestor"/>
      <extends rule="geoSystemTests"/>
      <extends rule="NeedsChildNode"/>
      <report test="((@geoCenter='0 0 0') or (@geoCenter='0.0 0.0 0.0')) and not(@USE)" role="warning">&NodeDEFname; geoCenter='<value-of select='@geoCenter'/>', instead needs actual location value </report>
      <report test="//*[starts-with('Geo',local-name()) and not(local-name()='GeoCoordinate') and not(local-name()='GeoOrigin')]" role="warning">&NodeDEFname; contains geospatial node other than GeoCoordinate or GeoOrigin </report>
      <report test="starts-with(normalize-space(@rotation),'0 0 0 ') or starts-with(normalize-space(@rotation),'0.0 0.0 0.0 ')" role="error">&NodeDEFname; rotation='<value-of select='@rotation'/>' has illegal zero-magnitude axis values (can omit if expecting default value) </report>
      <report test="starts-with(normalize-space(@scaleOrientation),'0 0 0 ') or starts-with(normalize-space(@scaleOrientation),'0.0 0.0 0.0 ')" role="error">&NodeDEFname; scaleOrientation='<value-of select='@scaleOrientation'/>' has illegal zero-magnitude axis values (can omit if expecting default value) </report>
      <report test="descendant::*[(local-name()='GeoElevationGrid') or (local-name()='GeoLocation') or (local-name()='GeoLOD') or (local-name()='GeoPositionInterpolator') or (local-name()='GeoProximitySensor') or (local-name()='GeoTouchSensor') or (local-name()='GeoTransform') or (local-name()='GeoViewpoint')]" role="error">&NodeDEFname; must not contain other geospatial nodes other than GeoCoordinate </report>
    </rule>

    <!-- ========= GeoViewpoint ========== -->
    <rule context="GeoViewpoint">
      <let name="stringResidueApos" value="translate(@navType,' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@#$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;','')"/>
      <let name="stringResidue" value='translate($stringResidueApos,"&apos;","")'/>
      <let name="quoteCount" value="string-length($stringResidue)"/>
      <let name="normalizedString" value="normalize-space(@navType)"/>
      <let name="lastCharacter" value="substring($normalizedString,string-length($normalizedString))"/>
      <!-- TODO also handle internationalization I18N characters -->
      <let name="infoStringResidueApos" value="translate(@info,' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@#$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;','')"/>
      <let name="infoStringResidue" value='translate($infoStringResidueApos,"&apos;","")'/>
      <let name="infoQuoteCount" value="string-length($infoStringResidue)"/>
      <let name="infoNormalizedString" value="normalize-space(@info)"/>
      <let name="infoLastCharacter" value="substring($infoNormalizedString,string-length($infoNormalizedString))"/>
      <extends rule="DEFtests"/>
      <extends rule="GeospatialComponentLevel1"/>
      <extends rule="NoGeospatialAncestor"/>
      <extends rule="geoSystemTests"/>
      <report test="((@position='0 0 0') or (@position='0.0 0.0 0.0')) and not(@USE)" role="warning">&NodeDEFname; position='<value-of select='@geoCenter'/>', instead needs actual location value </report>
      <report test="starts-with(normalize-space(@orientation),'0 0 0 ') or starts-with(normalize-space(@orientation),'0.0 0.0 0.0 ')" role="error">&NodeDEFname; orientation='<value-of select='@orientation'/>' has illegal zero-magnitude axis values (can omit if expecting default value) </report>
      <!-- navType MFString array checks -->
      <report test="false()" role="trace">$quoteCount=<value-of select='$quoteCount'/>, $stringResidue=<value-of select='$stringResidue'/>, $stringResidueApos=<value-of select='$stringResidueApos'/> , $lastCharacter=<value-of select='$lastCharacter'/> </report>
      <report test="not(@USE) and contains($normalizedString,'&quot;&quot;') and not(contains($normalizedString,'\&quot;&quot;') or contains($normalizedString,'&quot;\&quot;') or contains($normalizedString,'&quot;&quot; &quot;') or contains($normalizedString,'&quot; &quot;&quot;'))"  role="error">&NodeDEFname; array navType='<value-of select='@navType'/>' has questionable line-break &quot;&quot; quote marks </report>
      <report test="not(@USE) and (@navType) and not(contains(@navType,'&quot;'))"    role="error">&NodeDEFname; array navType='<value-of select='@navType'/>' needs to begin and end with &quot;quote&quot; &quot;marks&quot;.  Corrected example: &lt;<name/> DEF='<value-of select='$DEF'/>' navType=&apos;&quot;<value-of select='(@navType)'/>&quot;&apos;/&gt; </report>
      <report test="not(@USE) and (@navType) and    (contains(@navType,'&quot;')) and (($quoteCount div 2)!=round($quoteCount div 2)) and not(contains(@navType,'\&quot;'))"    role="error">&NodeDEFname; array navType='<value-of select='@navType'/>' has <value-of select='($quoteCount)'/> unescaped &quot;quote marks&quot; but instead needs to have an even number of matched pairs </report>
      <report test="not(@USE) and (@navType) and (contains(@navType,'\&quot;'))"    role="warning">&NodeDEFname; array navType='<value-of select='@navType'/>' has <value-of select='($quoteCount)'/> quote marks with at least one escaped quote mark \&quot; so double-check to ensure paired &quot;quote marks&quot; for each line are matched </report>
      <report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&quot;')) and not($lastCharacter='&quot;') and (contains(@navType,'&quot;'))"    role="error">&NodeDEFname; array navType='<value-of select='@navType'/>' needs to begin and end with &quot;quote&quot; &quot;marks&quot; </report>
      <report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&quot;')) and    ($lastCharacter='&quot;')"                                     role="error">&NodeDEFname; array navType='<value-of select='@navType'/>' needs to begin with quote mark &quot; </report>
      <report test="not(@USE) and ($normalizedString) and    (starts-with($normalizedString,'&quot;')) and not($lastCharacter='&quot;')"                                     role="error">&NodeDEFname; array navType='<value-of select='@navType'/>' needs to end with quote mark &quot; </report>
      <!-- info MFString array checks -->
      <report test="false()" role="trace">$infoQuoteCount=<value-of select='$infoQuoteCount'/>, $infoStringResidue=<value-of select='$infoStringResidue'/>, $infoStringResidueApos=<value-of select='$infoStringResidueApos'/> , $infoLastCharacter=<value-of select='$infoLastCharacter'/> </report>
      <report test="not(@USE) and contains($infoNormalizedString,'&quot;&quot;') and not(contains($infoNormalizedString,'\&quot;&quot;') or contains($infoNormalizedString,'&quot;\&quot;') or contains($infoNormalizedString,'&quot;&quot; &quot;') or contains($infoNormalizedString,'&quot; &quot;&quot;'))"  role="error">&NodeDEFname; array info='<value-of select='@info'/>' has questionable line-break &quot;&quot; quote marks </report>
      <report test="not(@USE) and (@info) and not(contains(@info,'&quot;'))"    role="error">&NodeDEFname; array info='<value-of select='@info'/>' needs to begin and end with &quot;quote&quot; &quot;marks&quot;.  Corrected example: &lt;<name/> DEF='<value-of select='$DEF'/>' info=&apos;&quot;<value-of select='(@info)'/>&quot;&apos;/&gt; </report>
      <report test="not(@USE) and (@info) and    (contains(@info,'&quot;')) and (($infoQuoteCount div 2)!=round($infoQuoteCount div 2)) and not(contains(@info,'\&quot;'))"    role="error">&NodeDEFname; array info='<value-of select='@info'/>' has <value-of select='($infoQuoteCount)'/> unescaped &quot;quote marks&quot; but instead needs to have an even number of matched pairs </report>
      <report test="not(@USE) and (@info) and (contains(@info,'\&quot;'))"    role="warning">&NodeDEFname; array info='<value-of select='@info'/>' has <value-of select='($infoQuoteCount)'/> quote marks with at least one escaped quote mark \&quot; so double-check to ensure paired &quot;quote marks&quot; for each line are matched </report>
      <report test="not(@USE) and ($infoNormalizedString) and not(starts-with($infoNormalizedString,'&quot;')) and not($infoLastCharacter='&quot;') and (contains(@info,'&quot;'))"    role="error">&NodeDEFname; array info='<value-of select='@info'/>' needs to begin and end with &quot;quote&quot; &quot;marks&quot; </report>
      <report test="not(@USE) and ($infoNormalizedString) and not(starts-with($infoNormalizedString,'&quot;')) and    ($infoLastCharacter='&quot;')"                                     role="error">&NodeDEFname; array info='<value-of select='@info'/>' needs to begin with quote mark &quot; </report>
      <report test="not(@USE) and ($infoNormalizedString) and    (starts-with($infoNormalizedString,'&quot;')) and not($infoLastCharacter='&quot;')"                                     role="error">&NodeDEFname; array info='<value-of select='@info'/>' needs to end with quote mark &quot; </report>
      <!-- additional checks -->
      <report test="not(@USE) and (@info) and not(contains(@info,'EXAMINE')) and not(contains(@info,'ANY')) and not(contains(@info,'WALK')) and not(contains(@type,'FLY')) and not(contains(@info,'LOOKAT')) and not(contains(@info,'NONE'))"    role="warning">&NodeDEFname; array info='<value-of select='@info'/>' does not contain any of the guaranteed-support values (&quot;EXAMINE&quot; &quot;ANY&quot; or &quot;WALK&quot; &quot;FLY&quot; &quot;LOOKAT&quot; &quot;NONE&quot;) </report>
      <report test="(@jump='TRUE' )" role="error">&NodeDEFname; jump='TRUE' is incorrect, define jump='true' instead </report>
      <report test="(@jump='FALSE')" role="error">&NodeDEFname; jump='FALSE' is incorrect, define jump='false' instead </report>
      <report test="(@retainUserOffsets='TRUE' )" role="error">&NodeDEFname; retainUserOffsets='TRUE' is incorrect, define retainUserOffsets='true' instead </report>
      <report test="(@retainUserOffsets='FALSE')" role="error">&NodeDEFname; retainUserOffsets='FALSE' is incorrect, define retainUserOffsets='false' instead </report>
    </rule>

    <!-- ========= HAnim nodes ========== -->

    <!-- ========= abstract: hanimProfile ========== -->
    <rule id="hanimProfile" abstract="true">
      <let name="hanimVersion" value="ancestor-or-self::*[local-name()='HAnimHumanoid']/@version"/>
      <let name="isHAnim1" value="($hanimVersion='1.0')"/>
      <let name="isHAnim2" value="($hanimVersion='2.0')"/>
      <let name="hasLeftSide"  value="//HAnimHumanoid/*[starts-with(local-name(),'HAnim')][starts-with(@name,'l_')]"/>
      <let name="hasRightSide" value="//HAnimHumanoid/*[starts-with(local-name(),'HAnim')][starts-with(@name,'r_')]"/>
      <!-- when used by a node rule, this rule must be preceded by hanimDEFtests rule -->
      <report test="$verbose" role="diagnostic">HAnim <value-of select='$hanimVersion'/> checks for <name/> name='<value-of select='@name'/>' DEF='<value-of select='@DEF'/>' </report>
      <!-- TODO why are duplicates still reported?? -->
      <assert test="((/X3D[@profile='Immersive'] and (/X3D/head/component[(@name='HAnim') or (@name='H-Anim')][number(@level) ge 1])) or (/X3D[@profile='Full']) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;X3D profile='Immersive'/&gt; &lt;component name='HAnim' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
       <!--  (diagnostic: $nodeName=<value-of select='$nodeName'/>, count=<value-of select='count(preceding::*[local-name()=$nodeName])'/>) -->
      <report test="(/X3D[starts-with(@version,'4')] and /X3D/head/component[@name='H-Anim']) and (count(preceding::*[starts-with(local-name(),'HAnim')]) = 0)" role="error">X3D/head/component name='H-Anim' is obsolete for X3D version='<value-of select='//X3D/@version'/>', must use component name='HAnim' instead </report>
      <report test="(/X3D[starts-with(@version,'3')] and /X3D/head/component[@name='HAnim' ]) and (count(preceding::*[starts-with(local-name(),'HAnim')]) = 0)" role="error">X3D/head/component name='HAnim' requires X3D version-'4' or greater, rather than X3D version='<value-of select='//X3D/@version'/>', use name='H-Anim' instead </report>
      <!-- Debug statement: set test="true()" to enable, test="false()" to disable -->
    </rule>

    <!-- ========= abstract: hanimDEFtests ========== -->
    <rule id="hanimDEFtests" abstract="true">
      <let name="loa" value="number(ancestor-or-self::*[local-name()='HAnimHumanoid']/@loa)"/>
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="true()"/>
      <extends rule="DEFtests"/>
      <extends rule="requiredName"/>
      <!-- https://www.web3d.org/documents/specifications/19774/V1.0/HAnim/VRMLInterface.html#Humanoid -->
      <report test="(string-length(@DEF) > 0) and (string-length(@name) > 0) and not(contains(@DEF,concat('_',@name)))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; DEF value does not contain correctly modified version of name value (for example, DEF='myPrefix_nameValue' e.g. DEF='myPrefix_<value-of select='@name'/>') - see HAnim section C.2 Humanoid, VRML Binding </report>
      <report test="(string-length(@USE) > 0) and not((local-name(..)='HAnimHumanoid') or (local-name(..)='field') or (local-name(..)='fieldValue'))" role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt; can only appear as immediate child of HAnimHumanoid </report>
      <report test="(string-length(@USE) > 0) and (ancestor::HAnimHumanoid/@name != ancestor::Scene//HAnimHumanoid[//*[@DEF=$USE][1]]/@name)" role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt; was not defined within a local &lt;HAnimHumanoid DEF='<value-of select='ancestor::HAnimHumanoid/@DEF'/>' name='<value-of select='ancestor::HAnimHumanoid/@name'/>'/&gt; and instead is illegally referring to another HAnimHumanoid node </report>
    </rule>
    
    <rule context="HAnimHumanoid">
      <let name="stringResidueApos" value="translate(@info,' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@#$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;','')"/>
      <let name="stringResidue" value='translate($stringResidueApos,"&apos;","")'/>
      <let name="quoteCount" value="string-length($stringResidue)"/>
      <!-- not inspecting commas contained by @info MFString array since they might appear within SFString values as well as between them -->
      <let name="normalizedString" value="normalize-space(@info)"/>
      <let name="lastCharacter" value="substring($normalizedString,string-length($normalizedString))"/>
      <let name="childrenNodes" value="*[@containerField = 'children']"/>
      <let name="simplifiedRotation" value="replace(@rotation,'.[0]*','')"/><!-- strip trailing zeroes -->
      <let name="countSkeletonJoints"          value="count(HAnimJoint[(@containerField = 'skeleton')]//HAnimJoint) + count(HAnimJoint[(@containerField = 'skeleton')])"/>
      <let name="countSkeletonSegments"        value="count(HAnimJoint[(@containerField = 'skeleton')]//HAnimSegment)"/>
      <let name="countSkeletonSitesViewpoints" value="count(HAnimJoint[(@containerField = 'skeleton')]//HAnimSite//Viewpoint)"/>
      <let name="countSites"                   value="count(HAnimJoint//HAnimSite[(string-length(@USE) = 0)])"/><!-- total within skeleton -->
      <let name="countSkeletonDisplacers"      value="count(HAnimJoint[(@containerField = 'skeleton')]//HAnimDisplacer)"/>
      <let name="countUSEjoints"          value="count(HAnimJoint  [(string-length(@USE) > 0) and (@containerField = 'joints'    )])"/>
      <let name="countUSEsegments"        value="count(HAnimSegment[(string-length(@USE) > 0) and (@containerField = 'segments'  )])"/>
      <let name="countUSEsites"           value="count(HAnimSite   [(string-length(@USE) > 0) and (@containerField = 'sites'     )])"/>
      <let name="countSitesViewpoints"    value="count(HAnimSite[not(string-length(@USE) > 0) and ends-with(@name, '_view')])"/><!-- TODO not working ?? -->
      <let name="modelTitle"              value="//meta[@name='title'][1]/@content"/>
      <!-- TODO check HAnimSite/Viewpoint DEF and USE have containerField='viewpoints' -->
      <extends rule="hanimDEFtests"/>
      <extends rule="hanimProfile"/>
      <extends rule="boundingBoxTests"/>
      <extends rule="uniqueName"/>
      <extends rule="NamedNeedsChildNode"/>
      <report test="true()" role="diagnostic">&NamedNodeDEFname; version='<value-of select='$hanimVersion'/>' with X3D version='<value-of select='ancestor::X3D/@version'/>' </report>
      <!--<report test="not(@USE) and true()" role="diagnostic">$childrenNodes=<value-of select='$childrenNodes'/> </report>-->
      <report test="not(@version = '1.0')  and not(@version = '2.0') and not(string-length(@USE) > 0)" role="error">&NamedNodeDEFname; version='<value-of select='@version'/>' is illegal, only HAnimHumanoid version='2.0; (for X3D version 4) or HAnimHumanoid version='1.0; (for X3D version 3) is allowed </report>
      <report test="not($isHAnim1) and not($isHAnim2)" role="error">&NamedNodeDEFname; $hanimVersion='<value-of select='$hanimVersion'/>' is illegal, only HAnimHumanoid version='2.0; (for X3D version 4) or HAnimHumanoid version='1.0; (for X3D version 3) is allowed </report>
  <!--<report test="not(starts-with(@version,'2')) and not(string-length(@USE) > 0)" role="warning">&NamedNodeDEFname; version='<value-of select='@version'/>' might not validate correctly, X3D validation support is tuned for ISO 19774 HAnimHumanoid version='2.0' </report>-->
      <report test="    (starts-with(@version,'2')) and starts-with(ancestor::X3D/@version,'3')" role="error">&NamedNodeDEFname; version='<value-of select='@version'/>' requires X3D version 4. Either upgrade model from X3D version='<value-of select='ancestor::X3D/@version'/>' to 4.0 or downgrade HAnimHumanoid to  version='1' </report>
      <report test="not(starts-with(@version,'2')) and (string-length(@loa) > 0) and not(string-length(@USE) > 0)" role="error">&NamedNodeDEFname; loa='<value-of select='@loa'/>' attribute is only allowed with HAnimHumanoid version='2.0' (for X3D version 4) </report>
      
      <report test="HAnimJoint[(string-length(@DEF) > 0) and (@containerField != 'skeleton')]" role="error">&lt;
          <name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains &lt;HAnimJoint DEF=&quot;<value-of select="HAnimJoint[(string-length(@DEF) > 0)]/@DEF"/>&quot; name=&quot;<value-of select="HAnimJoint[(string-length(@DEF) > 0)]/@name"/>&quot; containerField=&quot;<value-of select="HAnimJoint[(string-length(@DEF) > 0)]/@containerField"/>&quot;/&gt; should be containerField='skeleton' </report>
      <report test="descendant::*[local-name()='HAnimHumanoid']" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot contain another &lt;HAnimHumanoid DEF=&quot;<value-of select="descendant::*[local-name()='HAnimHumanoid']/@DEF"/>&quot; name=&quot;<value-of select="descendant::*[local-name()='HAnimHumanoid']/@name"/>&quot;/&gt; </report>
      <!-- HAnimHumanoid has no children nodes (thanks for checking, H3DViewer) -->
      <report test="$childrenNodes" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot contain any containerField='children' nodes:  &lt;<value-of select="local-name($childrenNodes[1])"/> DEF=&quot;<value-of select="$childrenNodes[1]/@DEF"/>&quot; name=&quot;<value-of select="$childrenNodes[1]/@name"/>&quot; containerField=&quot;<value-of select="$childrenNodes[1]/@containerField"/>&quot;/&gt; </report>
      <!-- TODO check info fields for correct metadata names -->
      <!-- TODO suggest peer Viewpoint centerOfRotation="0 0.9149 0.0016" matches sacroliac -->
      <!-- since default pose faces along Z axis:right side is -x, left side is +x -->
      <!-- https://www.web3d.org/documents/specifications/19774/V1.0/HAnim/Guidelines.html#MultipleHumanoidsPerFile -->
      <report test="(count(preceding-sibling::HAnimHumanoid) = 0) and (count(following-sibling::HAnimHumanoid) > 0)" role="warning">&NamedNodeDEFname; HAnim specification section E.4 recommends a common parent &lt;Group DEF='HumanoidGroup'/&gt; when multiple HAnimHumanoid models are present in a single scene </report>
      <!-- TODO test if only one HAnimHumanoid is present, then prefix is hanim_ (see c.3) -->
      <!-- TODO if child Viewpoint nodes are found, report that HAnimSite parent is needed with containerField='viewpoints" and suvvix for name="MyModel_view" -->
      <!-- info field MFString array checks, TODO add checks for specific values -->
      <report test="false()" role="trace">$quoteCount=<value-of select='$quoteCount'/>, $stringResidue=<value-of select='$stringResidue'/>, $stringResidueApos=<value-of select='$stringResidueApos'/> , $lastCharacter=<value-of select='$lastCharacter'/> </report>
      <report test="not(@USE) and contains($normalizedString,'&quot;&quot;') and not(contains($normalizedString,'\&quot;&quot;') or contains($normalizedString,'&quot;\&quot;') or contains($normalizedString,'&quot;&quot; &quot;') or contains($normalizedString,'&quot; &quot;&quot;'))" role="error">&NamedNodeDEFname; array value='<value-of select='@info'/>' has questionable line-break &quot;&quot; quote marks </report>
      <report test="not(@USE) and (@info) and not(contains(@info,'&quot;'))"   role="error">&NamedNodeDEFname; array value='<value-of select='@info'/>' needs to begin and end with &quot;quote marks&quot;.  Corrected example: &lt;<name/> DEF='<value-of select='$DEF'/>' value=&apos;&quot;<value-of select='(@info)'/>&quot;&apos;/&gt; </report>
      <report test="not(@USE) and (@info) and    (contains(@info,'&quot;')) and (($quoteCount div 2)!=round($quoteCount div 2)) and not(contains(@info,'\&quot;'))"   role="error">&NamedNodeDEFname; array value='<value-of select='@info'/>' has <value-of select='($quoteCount)'/> unescaped &quot;quote marks&quot; but instead needs to have an even number of matched pairs </report>
      <report test="not(@USE) and (@info) and (contains(@info,'\&quot;'))"    role="warning">&NamedNodeDEFname; array value='<value-of select='@info'/>' has <value-of select='($quoteCount)'/> quote marks with at least one escaped quote mark \&quot; so double-check to ensure paired &quot;quote marks&quot; for each line are matched </report>
      <report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&quot;')) and not($lastCharacter='&quot;') and (contains(@info,'&quot;'))" role="error">&NamedNodeDEFname; array value='<value-of select='@info'/>' needs to begin and end with &quot;quote marks&quot; </report>
      <report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&quot;')) and    ($lastCharacter='&quot;')"                                 role="error">&NamedNodeDEFname; array value='<value-of select='@info'/>' needs to begin with quote mark &quot; </report>
      <report test="not(@USE) and ($normalizedString) and    (starts-with($normalizedString,'&quot;')) and not($lastCharacter='&quot;')"                                 role="error">&NamedNodeDEFname; array value='<value-of select='@info'/>' needs to end with quote mark &quot; </report>
      <!-- check only one Coordinate/CoordinateDouble with containerField skinCoord and one Normal with containerField skinNormal is contained -->
	  <report test="(count(*[starts-with(local-name(),'Coordinate')]) > 1)" role="error">&NamedNodeDEFname; contains more than one Coordinate/CoordinateDouble node </report>
      <report test="(count(Normal) > 1)" role="error">&NamedNodeDEFname; contains more than one Normal node </report>
      <report test="(count(Coordinate[@containerField != 'skinCoord']) > 0)" role="error">&NamedNodeDEFname; contains &lt;Coordinate DEF='<value-of select='Coordinate[@containerField != &apos;skinCoord&apos;]/@DEF'/>' containerField='<value-of select='Coordinate[@containerField != &apos;skinCoord&apos;]/@containerField'/>'/&gt; node with incorrect containerField value, must be containerField='skinCoord' </report>
      <report test="(count(CoordinateDouble[@containerField != 'skinCoord']) > 0)" role="error">&NamedNodeDEFname; contains &lt;CoordinateDouble DEF='<value-of select='CoordinateDouble[@containerField != &apos;skinCoord&apos;]/@DEF'/>' containerField='<value-of select='CoordinateDouble[@containerField != &apos;skinCoord&apos;]/@containerField'/>'/&gt; node with incorrect containerField value, must be containerField='skinCoord' </report>
      <report test="(count(Normal[@containerField != 'skinNormal']) > 0)" role="error">&NamedNodeDEFname; contains &lt;Normal DEF='<value-of select='Normal[@containerField != &apos;skinNormal&apos;]/@DEF'/>' containerField='<value-of select='Normal[@containerField != &apos;skinNormal&apos;]/@containerField'/>'/&gt; node with incorrect containerField value, must be containerField='skinNormal' </report>
      <!-- TODO check for default orientation, also add cleanup to X3D-Tidy -->
	  <assert test="not(@rotation) or (string-length(@rotation) = 0) or (string-length($simplifiedRotation) = 0) or ($simplifiedRotation = '1 0 0 0') or ($simplifiedRotation = '0 1 0 0') or ($simplifiedRotation = '0 0 1 0')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' rotation='<value-of select='@rotation'/>'/&gt; has an arbitrary default rotation (rather than an expected identity rotation) which may distort body animations </assert>
      <!-- count contained Joint Segment Site Viewpoint nodes and ensure corresponding USE nodes appear at top level -->
	  <report test="not(@USE) and true()" role="diagnostic">==================================================================================================================== </report>
	  <report test="not(@USE) and true()" role="diagnostic">&NamedNodeDEFname; node count(HAnimJoint)           within skeleton hierarchy        = <value-of select='$countSkeletonJoints'/> </report>
	  <report test="not(@USE) and true()" role="diagnostic">&NamedNodeDEFname; node count(HAnimSegment)         within skeleton hierarchy        = <value-of select='$countSkeletonSegments'/> </report>
	  <report test="not(@USE) and true()" role="diagnostic">&NamedNodeDEFname; node count(HAnimSite)            within HAnimHumanoid             = <value-of select='$countSites'/> </report>
	  <report test="not(@USE) and true()" role="diagnostic">&NamedNodeDEFname; node count(HAnimSite//Viewpoint) within skeleton hierarchy        = <value-of select='$countSkeletonSitesViewpoints'/> </report>
	  <report test="not(@USE) and true()" role="diagnostic">&NamedNodeDEFname; node count(HAnimDisplacer)       within skeleton hierarchy        = <value-of select='$countSkeletonDisplacers'/> </report>
	  <report test="not(@USE) and true()" role="diagnostic">&NamedNodeDEFname; node count(&lt;HAnimJoint   USE='*' containerField = 'joints'/&gt;)     = <value-of select='$countUSEjoints'/> </report>
	  <report test="not(@USE) and true()" role="diagnostic">&NamedNodeDEFname; node count(&lt;HAnimSegment USE='*' containerField = 'segments'/&gt;)   = <value-of select='$countUSEsegments'/> </report>
	  <report test="not(@USE) and true()" role="diagnostic">&NamedNodeDEFname; node count(&lt;HAnimSite    USE='*' containerField = 'sites'/&gt;)      = <value-of select='$countUSEsites'/> </report>
	  <report test="not(@USE) and true()" role="diagnostic">&NamedNodeDEFname; node count(&lt;HAnimSite    DEF='*' name ends with '_view'/&gt;)        = <value-of select='$countSitesViewpoints'/> </report>
	  <report test="not($countSkeletonJoints          = $countUSEjoints)"          role="diagnostic">&NamedNodeDEFname; has mismatched HAnimJoint    node counts, <value-of select='$countSkeletonJoints'  /> within skeleton hierarchy and <value-of select='$countUSEjoints'         /> USE nodes in joints field </report>
	  <report test="not($countSkeletonSegments        = $countUSEsegments)"        role="diagnostic">&NamedNodeDEFname; has mismatched HAnimSegment  node counts, <value-of select='$countSkeletonSegments'/> within skeleton hierarchy and <value-of select='$countUSEsegments'       /> USE nodes in segments field </report>
	  <report test="not($countSites                   = $countUSEsites)"           role="diagnostic">&NamedNodeDEFname; has mismatched HAnimSite     node counts, <value-of select='$countSites'           /> within skeleton hierarchy and <value-of select='$countUSEsites'          /> USE nodes in sites field </report>
	  <report test="not(@USE) and true()" role="diagnostic">==================================================================================================================== </report>

      <report test="contains(upper-case(translate($modelTitle,'-_','')),'LOA4') and ($loa lt 4)" role="warning">&NamedNodeDEFname; model name from meta title <value-of select='$modelTitle'/> indicates likely loa 4 but given HAnimHumanoid loa='<value-of select='@loa'/>' </report>
	  <report test="contains(upper-case(translate($modelTitle,'-_','')),'LOA3') and ($loa lt 3)" role="warning">&NamedNodeDEFname; model name from meta title <value-of select='$modelTitle'/> indicates likely loa 3 but given HAnimHumanoid loa='<value-of select='@loa'/>' </report>
	  <report test="contains(upper-case(translate($modelTitle,'-_','')),'LOA2') and ($loa lt 2)" role="warning">&NamedNodeDEFname; model name from meta title <value-of select='$modelTitle'/> indicates likely loa 2 but given HAnimHumanoid loa='<value-of select='@loa'/>' </report>
	  <report test="contains(upper-case(translate($modelTitle,'-_','')),'LOA1') and ($loa lt 1)" role="warning">&NamedNodeDEFname; model name from meta title <value-of select='$modelTitle'/> indicates likely loa 1 but given HAnimHumanoid loa='<value-of select='@loa'/>' </report>
	  <report test="contains(upper-case(translate($modelTitle,'-_','')),'LOA0') and ($loa lt 0)" role="warning">&NamedNodeDEFname; model name from meta title <value-of select='$modelTitle'/> indicates likely loa 0 but given HAnimHumanoid loa='<value-of select='@loa'/>' </report>
	  <!-- already checked: duplicate USE nodes -->
	  <!-- TODO will X3D HAnim component add a new level to support LOA-4 or HAnimMotion functionality? -->
	</rule>

    <rule context="HAnimDisplacer">
      <extends rule="hanimDEFtests"/>
      <extends rule="hanimProfile"/>
      <!-- child nodes optional -->
      <!-- TODO table rules for allowed names for each node -->
      <!-- TODO LOA rules -->
      <!-- TODO check for positiveX/negativeX for left/right based on presence of l_ and r_ in name -->
      <!-- TODO check for duplicates -->
      <!-- HAnimDisplacer can be contained by HAnimJoint or HAnimSegment -->
      <report test="((parent::HAnimJoint) or (parent::HAnimSegment))   and not(@containerField='displacers')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>' USE='<value-of select='@USE'/>'/&gt; with parent <value-of select="local-name(..)"/> needs containerField='displacers' </report>
      <!-- only test immediate children to help localize extraneous HAnimHumanoid and avoid numerous false positives; might miss deeper descendants-->
      <report test="HAnimHumanoid" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot contain another &lt;HAnimHumanoid DEF=&quot;<value-of select="HAnimHumanoid/@DEF"/>&quot; name=&quot;<value-of select="HAnimHumanoid/@name"/>&quot;/&gt; </report>
      <!-- more parent/child checks -->
      <report test="not((local-name(..)='HAnimJoint') or (local-name(..)='HAnimSegment') or (local-name(..)='ProtoBody') or (local-name(..)='field') or (local-name(..)='fieldValue'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/> containerField='<value-of select='@containerField'/>'/&gt; has unexpected parent node <value-of select='local-name(..)'/>, expected parent HAnimJoint or HAnimSegment </report>
      <report test="   ((local-name(..)='HAnimJoint') or (local-name(..)='HAnimSegment')) and not(@containerField='displacers')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/> containerField='<value-of select='@containerField'/>'/&gt; has unexpected value, expected containerField='displacers' </report>
    </rule>

    <rule context="HAnimJoint">
      <let name="childrenNodes" value="*[(@containerField = 'children') and not((local-name()='HAnimJoint') or (local-name()='HAnimSegment') or (local-name()='HAnimSite'))]"/>
      <let name="warningSymmetricalLeftRight" value="translate(ancestor::HAnimHumanoid/MetadataSet[(@name='warnings') and (@reference='HAnim')]/MetadataString[@name='SymmetricalLeftRight']/@value,'&quot;','')"/>
      <let name="r_name" value="concat('r_',substring-after(normalize-space(@name),'_'))"/>
      <let name="r_name_center" value="normalize-space(ancestor::HAnimHumanoid//HAnimJoint[@name=$r_name]/@center)"/>
      <let name="simplifiedRotation" value="replace(@rotation,'.[0]*','')"/><!-- strip trailing zeroes -->
      <extends rule="hanimDEFtests"/>
      <extends rule="hanimProfile"/>
      <extends rule="boundingBoxTests"/>
      <!-- TODO name checks according to LOA: <extends rule="NamedNeedsChildNode"/> -->
      <!-- TODO table rules for allowed names for each node -->
      <!-- TODO LOA rules -->
      <!-- TODO check for positiveX/negativeX for left/right based on presence of l_ and r_ in name -->
      <!-- TODO check for duplicates -->
      <!-- TODO avoid reporting mismatch if opposite side not present -->
      <!-- TODO if direct child grouping node or geometry found, provide hint to move it into HAnimSegment/HAnimSite -->
      <!-- TODO can only contain HAnimJoint, HAnimSegment nodes with containerField='children' -->
      <report test="$childrenNodes" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot contain any containerField='children' nodes:  &lt;<value-of select="local-name($childrenNodes[1])"/> DEF=&quot;<value-of select="$childrenNodes[1]/@DEF"/>&quot; name=&quot;<value-of select="$childrenNodes[1]/@name"/>&quot; containerField=&quot;<value-of select="$childrenNodes[1]/@containerField"/>&quot;/&gt; </report>
      <!-- symmetry warning, left-side coordinates start with a positive-x value and right-side coordinates start with a negative-x value -->
      <report test="false() and (string-length($warningSymmetricalLeftRight) > 0)" role="debug">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; $warningSymmetricalLeftRight=<value-of select='$warningSymmetricalLeftRight'/>, ($warningSymmetricalLeftRight = 'ignore')=<value-of select="($warningSymmetricalLeftRight = 'ignore')"/> </report>
      <report test="not($warningSymmetricalLeftRight = 'ignore') and $hasLeftSide and $hasRightSide and (starts-with(normalize-space(@name),'l_') and (string-length(normalize-space(@center)) > 0) and (concat('-',normalize-space(@center)) != $r_name_center))" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>' center='<value-of select='@center'/>'/&gt; has asymmetric center value that does not match corresponding &lt;<name/> DEF='<value-of select='ancestor::HAnimHumanoid//HAnimJoint[@name=$r_name]/@DEF'/>' name='<value-of select='$r_name'/>' center='<value-of select='$r_name_center'/>'/&gt; </report>
      <!-- if any top-level USE fields are included in ancestor HAnimHumanoid, report if missing a corresponding USE copy of this DEF node -->
      <report test="not(@USE) and not(string-length(@USE) > 0) and (ancestor::HAnimJoint[(string-length(@USE) > 0)]) and not(ancestor::HAnimJoint[(string-length(@USE) > 0)][@DEF=$USE])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has ancestor HAnimHumanoid that does not include a corresponding &lt;<name/> USE='<value-of select='@DEF'/>' containerField='joints'/&gt; to match this node </report>
      <report test="(string-length(@USE) > 0) and (preceding-sibling::HAnimSegment[(@USE = $USE)])" role="error">&lt;<name/> USE='<value-of select='@USE'/>' containerField='<value-of select='@containerField'/>'/&gt; matches a duplicate preceding USE node </report>
      <!-- HAnimJoint may contain (but does not have to contain) a child HAnimSegment to complete the connection made by this joint
      <report test="not(@USE) and not(HAnimSegment)" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is missing child HAnimSegment to complete the connection made by this joint </report> -->
      <!-- HAnimJoint can be contained by HAnimHumanoid or another HAnimJoint -->
      <report test="not(ancestor::HAnimJoint) and not(ancestor::HAnimHumanoid) and not(parent::field) and not(parent::fieldValue)" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is missing an ancestor HAnimHumanoid or HAnimJoint </report>
      <report test="(parent::HAnimHumanoid) and (not(@USE) or not(string-length(@USE) > 0)) and not(@containerField='skeleton')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; with parent HAnimHumanoid needs containerField='skeleton' </report>
      <report test="(parent::HAnimHumanoid) and (@USE)                                      and not(@containerField='joints')"  role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt; with parent HAnimHumanoid needs containerField='joints' </report>
      <report test="(parent::HAnimJoint)    and not(@containerField='children')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>' USE='<value-of select='@USE'/>'/&gt; with parent HAnimJoint needs containerField='children' </report>
      <!-- HAnimJoint can only contain HAnimJoint, HAnimSegment, HAnimSite, HAnimDisplacer -->
      <report test="*[not((local-name()='HAnimJoint') or (local-name()='HAnimSegment') or (local-name()='HAnimSite') or (local-name()='HAnimDisplacer') or (local-name()='ProtoInstance'))]" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; HAnimJoint can only contain HAnimJoint, HAnimSegment, HAnimSite, HAnimDisplacer </report>
      <!-- HAnimJoint uses center field, not translation (except for HAnimJoint with name='HumanoidRoot') -->
      <!-- Topmost HAnimJoint (which has @containerField='skeleton') may get translated to position overall model on ground plane, otherwise other HAnimJoint nodes are not translated -->
	  <report test="not(@USE) and not(string-length(@USE) > 0) and (not(@center) or (@center='0 0 0') or (@center='0.0 0.0 0.0')) and not(@name='HumanoidRoot') and not(@containerField='skeleton')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has a missing (or default zero) offset field: center='<value-of select="@center"/>' </report>
      <report test="not(@USE) and not(string-length(@USE) > 0) and ((string-length(@translation) > 0) and not(@translation='0 0 0') and not(@translation='0.0 0.0 0.0')) and not(@name='HumanoidRoot') and not(@containerField='skeleton')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; includes an unexpected value for translation field (ordinarily translation is empty or has default value 0 0 0) </report>
      <report test="//ROUTE[(@toNode=$DEF)][(@toField='translation') or (@toField='set_translation')] and not(@name='HumanoidRoot') and not(@containerField='skeleton')" role="warning">&NamedNodeDEFname; has incoming &lt;ROUTE toNode='<value-of select="@DEF"/>' toField='translation'/&gt; to modify the translation field, which ordinarily is not modified (instead the center field controls HAnimJoint position) </report>
      <report test="@translation and (string-length(@translation) > 0) and not((@translation='0 0 0') or (@translation='0.0 0.0 0.0')) and not(@name='HumanoidRoot') and not(@containerField='skeleton')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has non-zero translation='<value-of select="@translation"/>', ordinarily HAnimJoint location is defined by the field center='<value-of select="@center"/>' </report>
      <!-- Joint center cannot have -y value since that is underground.  Once scene is corrected, the corresponding HAnimSegment/Transform/@translation mismatch rule will detect if that field still has negative-y value -->
      <report test="@center and (string-length(@center) > 0) and starts-with(substring-after(@center,' '),'-') and not(ancestor::HAnimJoint[@containerField='skeleton'][string-length(@translation) > 0])" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has negative-y vertical value in center='<value-of select="@center"/>', which is illegal since HAnimJoint cannot be underground </report>
      <!-- only test immediate children to help localize extraneous HAnimHumanoid and avoid numerous false positives; might miss deeper descendants-->
      <report test="HAnimHumanoid" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot contain another &lt;HAnimHumanoid DEF=&quot;<value-of select="HAnimHumanoid/@DEF"/>&quot; name=&quot;<value-of select="HAnimHumanoid/@name"/>&quot;/&gt; </report>
      <!-- HAnimJoint/HAnimSegment hierarchy naming tests -->
      <report test="$isHAnim1 and (@name='humanoid_root') and (HAnimSegment[not(@name='sacrum')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='sacrum' </report>
      <report test="$isHAnim1 and (@name='sacroiliac') and (HAnimSegment[not(@name='pelvis')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='pelvis' </report>
      <report test="$isHAnim1 and (@name='l_hip') and (HAnimSegment[not(@name='l_thigh')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_thigh' </report>
      <report test="$isHAnim1 and (@name='l_knee') and (HAnimSegment[not(@name='l_calf')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_calf' </report>
      <report test="$isHAnim1 and (@name='l_ankle') and (HAnimSegment[not(@name='l_hindfoot')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_hindfoot' </report>
      <report test="$isHAnim1 and (@name='l_subtalar') and (HAnimSegment[not(@name='l_midproximal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_midproximal' </report>
      <report test="$isHAnim1 and (@name='l_midtarsal') and (HAnimSegment[not(@name='l_middistal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_middistal' </report>
      <report test="$isHAnim1 and (@name='l_metatarsal') and (HAnimSegment[not(@name='l_forefoot')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_forefoot' </report>
      <report test="$isHAnim1 and (@name='r_hip') and (HAnimSegment[not(@name='r_thigh')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_thigh' </report>
      <report test="$isHAnim1 and (@name='r_knee') and (HAnimSegment[not(@name='r_calf')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_calf' </report>
      <report test="$isHAnim1 and (@name='r_ankle') and (HAnimSegment[not(@name='r_hindfoot')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_hindfoot' </report>
      <report test="$isHAnim1 and (@name='r_subtalar') and (HAnimSegment[not(@name='r_midproximal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_midproximal' </report>
      <report test="$isHAnim1 and (@name='r_midtarsal') and (HAnimSegment[not(@name='r_middistal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_middistal' </report>
      <report test="$isHAnim1 and (@name='r_metatarsal') and (HAnimSegment[not(@name='r_forefoot')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_forefoot' </report>
      <report test="$isHAnim1 and (@name='vl5') and (HAnimSegment[not(@name='l5')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l5' </report>
      <report test="$isHAnim1 and (@name='vl4') and (HAnimSegment[not(@name='l4')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l4' </report>
      <report test="$isHAnim1 and (@name='vl3') and (HAnimSegment[not(@name='l3')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l3' </report>
      <report test="$isHAnim1 and (@name='vl2') and (HAnimSegment[not(@name='l2')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l2' </report>
      <report test="$isHAnim1 and (@name='vl1') and (HAnimSegment[not(@name='l1')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l1' </report>
      <report test="$isHAnim1 and (@name='vt12') and (HAnimSegment[not(@name='t12')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='t12' </report>
      <report test="$isHAnim1 and (@name='vt11') and (HAnimSegment[not(@name='t11')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='t11' </report>
      <report test="$isHAnim1 and (@name='vt10') and (HAnimSegment[not(@name='t10')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='t10' </report>
      <report test="$isHAnim1 and (@name='vt9') and (HAnimSegment[not(@name='t9')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='t9' </report>
      <report test="$isHAnim1 and (@name='vt8') and (HAnimSegment[not(@name='t8')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='t8' </report>
      <report test="$isHAnim1 and (@name='vt7') and (HAnimSegment[not(@name='t7')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='t7' </report>
      <report test="$isHAnim1 and (@name='vt6') and (HAnimSegment[not(@name='t6')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='t6' </report>
      <report test="$isHAnim1 and (@name='vt5') and (HAnimSegment[not(@name='t5')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='t5' </report>
      <report test="$isHAnim1 and (@name='vt4') and (HAnimSegment[not(@name='t4')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='t4' </report>
      <report test="$isHAnim1 and (@name='vt3') and (HAnimSegment[not(@name='t3')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='t3' </report>
      <report test="$isHAnim1 and (@name='vt2') and (HAnimSegment[not(@name='t2')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='t2' </report>
      <report test="$isHAnim1 and (@name='vt1') and (HAnimSegment[not(@name='t1')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='t1' </report>
      <report test="$isHAnim1 and (@name='vc7') and (HAnimSegment[not(@name='c7')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='c7' </report>
      <report test="$isHAnim1 and (@name='vc6') and (HAnimSegment[not(@name='c6')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='c6' </report>
      <report test="$isHAnim1 and (@name='vc5') and (HAnimSegment[not(@name='c5')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='c5' </report>
      <report test="$isHAnim1 and (@name='vc4') and (HAnimSegment[not(@name='c4')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='c4' </report>
      <report test="$isHAnim1 and (@name='vc3') and (HAnimSegment[not(@name='c3')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='c3' </report>
      <report test="$isHAnim1 and (@name='vc2') and (HAnimSegment[not(@name='c2')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='c2' </report>
      <report test="$isHAnim1 and (@name='vc1') and (HAnimSegment[not(@name='c1')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='c1' </report>
      <report test="$isHAnim1 and (@name='skullbase') and (HAnimSegment[not(@name='skull')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='skull' </report>
      <report test="$isHAnim1 and (@name='l_eyelid_joint') and (HAnimSegment[not(@name='l_eyelid')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_eyelid' </report>
      <report test="$isHAnim1 and (@name='r_eyelid_joint') and (HAnimSegment[not(@name='r_eyelid')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_eyelid' </report>
      <report test="$isHAnim1 and (@name='l_eyeball_joint') and (HAnimSegment[not(@name='l_eyeball')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_eyeball' </report>
      <report test="$isHAnim1 and (@name='r_eyeball_joint') and (HAnimSegment[not(@name='r_eyeball')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_eyeball' </report>
      <report test="$isHAnim1 and (@name='l_eyebrow_joint') and (HAnimSegment[not(@name='l_eyebrow')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_eyebrow' </report>
      <report test="$isHAnim1 and (@name='r_eyebrow_joint') and (HAnimSegment[not(@name='r_eyebrow')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_eyebrow' </report>
      <report test="$isHAnim1 and (@name='temporomandibular') and (HAnimSegment[not(@name='jaw')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='jaw' </report>
      <report test="$isHAnim1 and (@name='l_sternoclavicular') and (HAnimSegment[not(@name='l_clavicle')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_clavicle' </report>
      <report test="$isHAnim1 and (@name='l_acromioclavicular') and (HAnimSegment[not(@name='l_scapula')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_scapula' </report>
      <report test="$isHAnim1 and (@name='l_shoulder') and (HAnimSegment[not(@name='l_upperarm')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_upperarm' </report>
      <report test="$isHAnim1 and (@name='l_elbow') and (HAnimSegment[not(@name='l_forearm')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_forearm' </report>
      <report test="$isHAnim1 and (@name='l_wrist') and (HAnimSegment[not(@name='l_hand')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_hand' </report>
      <report test="$isHAnim1 and (@name='l_thumb1') and (HAnimSegment[not(@name='l_thumb_metacarpal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_thumb_metacarpal' </report>
      <report test="$isHAnim1 and (@name='l_thumb2') and (HAnimSegment[not(@name='l_thumb_proximal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_thumb_proximal' </report>
      <report test="$isHAnim1 and (@name='l_thumb3') and (HAnimSegment[not(@name='l_thumb_distal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_thumb_distal' </report>
      <report test="$isHAnim1 and (@name='l_index0') and (HAnimSegment[not(@name='l_index_metacarpal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_index_metacarpal' </report>
      <report test="$isHAnim1 and (@name='l_index1') and (HAnimSegment[not(@name='l_index_proximal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_index_proximal' </report>
      <report test="$isHAnim1 and (@name='l_index2') and (HAnimSegment[not(@name='l_index_middle')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_index_middle' </report>
      <report test="$isHAnim1 and (@name='l_index3') and (HAnimSegment[not(@name='l_index_distal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_index_distal' </report>
      <report test="$isHAnim1 and (@name='l_middle0') and (HAnimSegment[not(@name='l_middle_metacarpal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_middle_metacarpal' </report>
      <report test="$isHAnim1 and (@name='l_middle1') and (HAnimSegment[not(@name='l_middle_proximal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_middle_proximal' </report>
      <report test="$isHAnim1 and (@name='l_middle2') and (HAnimSegment[not(@name='l_middle_middle')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_middle_middle' </report>
      <report test="$isHAnim1 and (@name='l_middle3') and (HAnimSegment[not(@name='l_middle_distal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_middle_distal' </report>
      <report test="$isHAnim1 and (@name='l_ring0') and (HAnimSegment[not(@name='l_ring_metacarpal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_ring_metacarpal' </report>
      <report test="$isHAnim1 and (@name='l_ring1') and (HAnimSegment[not(@name='l_ring_proximal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_ring_proximal' </report>
      <report test="$isHAnim1 and (@name='l_ring2') and (HAnimSegment[not(@name='l_ring_middle')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_ring_middle' </report>
      <report test="$isHAnim1 and (@name='l_ring3') and (HAnimSegment[not(@name='l_ring_distal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_ring_distal' </report>
      <report test="$isHAnim1 and (@name='l_pinky0') and (HAnimSegment[not(@name='l_pinky_metacarpal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_pinky_metacarpal' </report>
      <report test="$isHAnim1 and (@name='l_pinky1') and (HAnimSegment[not(@name='l_pinky_proximal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_pinky_proximal' </report>
      <report test="$isHAnim1 and (@name='l_pinky2') and (HAnimSegment[not(@name='l_pinky_middle')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_pinky_middle' </report>
      <report test="$isHAnim1 and (@name='l_pinky3') and (HAnimSegment[not(@name='l_pinky_distal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='l_pinky_distal' </report>
      <report test="$isHAnim1 and (@name='r_sternoclavicular') and (HAnimSegment[not(@name='r_clavicle')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_clavicle' </report>
      <report test="$isHAnim1 and (@name='r_acromioclavicular') and (HAnimSegment[not(@name='r_scapula')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_scapula' </report>
      <report test="$isHAnim1 and (@name='r_shoulder') and (HAnimSegment[not(@name='r_upperarm')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_upperarm' </report>
      <report test="$isHAnim1 and (@name='r_elbow') and (HAnimSegment[not(@name='r_forearm')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_forearm' </report>
      <report test="$isHAnim1 and (@name='r_wrist') and (HAnimSegment[not(@name='r_hand')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_hand' </report>
      <report test="$isHAnim1 and (@name='r_thumb1') and (HAnimSegment[not(@name='r_thumb_metacarpal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_thumb_metacarpal' </report>
      <report test="$isHAnim1 and (@name='r_thumb2') and (HAnimSegment[not(@name='r_thumb_proximal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_thumb_proximal' </report>
      <report test="$isHAnim1 and (@name='r_thumb3') and (HAnimSegment[not(@name='r_thumb_distal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_thumb_distal' </report>
      <report test="$isHAnim1 and (@name='r_index0') and (HAnimSegment[not(@name='r_index_metacarpal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_index_metacarpal' </report>
      <report test="$isHAnim1 and (@name='r_index1') and (HAnimSegment[not(@name='r_index_proximal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_index_proximal' </report>
      <report test="$isHAnim1 and (@name='r_index2') and (HAnimSegment[not(@name='r_index_middle')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_index_middle' </report>
      <report test="$isHAnim1 and (@name='r_index3') and (HAnimSegment[not(@name='r_index_distal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_index_distal' </report>
      <report test="$isHAnim1 and (@name='r_middle0') and (HAnimSegment[not(@name='r_middle_metacarpal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_middle_metacarpal' </report>
      <report test="$isHAnim1 and (@name='r_middle1') and (HAnimSegment[not(@name='r_middle_proximal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_middle_proximal' </report>
      <report test="$isHAnim1 and (@name='r_middle2') and (HAnimSegment[not(@name='r_middle_middle')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_middle_middle' </report>
      <report test="$isHAnim1 and (@name='r_middle3') and (HAnimSegment[not(@name='r_middle_distal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_middle_distal' </report>
      <report test="$isHAnim1 and (@name='r_ring0') and (HAnimSegment[not(@name='r_ring_metacarpal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_ring_metacarpal' </report>
      <report test="$isHAnim1 and (@name='r_ring1') and (HAnimSegment[not(@name='r_ring_proximal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_ring_proximal' </report>
      <report test="$isHAnim1 and (@name='r_ring2') and (HAnimSegment[not(@name='r_ring_middle')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_ring_middle' </report>
      <report test="$isHAnim1 and (@name='r_ring3') and (HAnimSegment[not(@name='r_ring_distal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_ring_distal' </report>
      <report test="$isHAnim1 and (@name='r_pinky0') and (HAnimSegment[not(@name='r_pinky_metacarpal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_pinky_metacarpal' </report>
      <report test="$isHAnim1 and (@name='r_pinky1') and (HAnimSegment[not(@name='r_pinky_proximal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_pinky_proximal' </report>
      <report test="$isHAnim1 and (@name='r_pinky2') and (HAnimSegment[not(@name='r_pinky_middle')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_pinky_middle' </report>
      <report test="$isHAnim1 and (@name='r_pinky3') and (HAnimSegment[not(@name='r_pinky_distal')])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has child &lt;HAnimSegment name='<value-of select="HAnimSegment/@name"/>'/&gt; that instead should have name='r_pinky_distal' </report>
      <!-- Ensure left l_ site x translations are positive,  right r_ site x translations are negative -->
      <report test="contains(@name,'_l_') and     starts-with(normalize-space(@center),'-')"  role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; translation needs positive x when on left side </report>
      <report test="contains(@name,'_r_') and not(starts-with(normalize-space(@center),'-'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; translation needs negative x when on left side </report>
      <report test="contains(@name,'_HumanoidRoot') and not(starts-with(normalize-space(@center),'0'))" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; ought to be centered on x axis </report>
      <!-- TODO deserves closer look -->
      <report test="(@name='l_temporomandibular') or (@name='r_temporomandibular')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; instead should have name='temporomandibular' since single jaw bone is controlled by left and right joints </report>
      <!-- TODO check for default orientation, also add cleanup to X3D-Tidy -->
      <assert test="not(@rotation) or (string-length(@rotation) = 0) or (string-length($simplifiedRotation) = 0) or ($simplifiedRotation = '1 0 0 0') or ($simplifiedRotation = '0 1 0 0') or ($simplifiedRotation = '0 0 1 0')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' rotation='<value-of select='@rotation'/>'/&gt; has an arbitrary default rotation (rather than an expected identity rotation) which may distort body animations </assert>
      
      <!-- *** start: HAnim2 HAnimJoint name test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or
        (@name='humanoid_root') or (@name='sacroiliac') or (@name='l_hip') or (@name='l_knee') or 
        (@name='l_talocrural') or (@name='l_talocalcaneonavicular') or (@name='l_cuneonavicular_1') or (@name='l_tarsometatarsal_1') or (@name='l_metatarsophalangeal_1') or 
        (@name='l_tarsal_interphalangeal_1') or (@name='l_cuneonavicular_2') or (@name='l_tarsometatarsal_2') or (@name='l_metatarsophalangeal_2') or (@name='l_tarsal_proximal_interphalangeal_2') or 
        (@name='l_tarsal_distal_interphalangeal_2') or (@name='l_cuneonavicular_3') or (@name='l_tarsometatarsal_3') or (@name='l_metatarsophalangeal_3') or (@name='l_tarsal_proximal_interphalangeal_3') or 
        (@name='l_tarsal_distal_interphalangeal_3') or (@name='l_calcaneocuboid') or (@name='l_transversetarsal') or (@name='l_tarsometatarsal_4') or (@name='l_metatarsophalangeal_4') or 
        (@name='l_tarsal_proximal_interphalangeal_4') or (@name='l_tarsal_distal_interphalangeal_4') or (@name='l_tarsometatarsal_5') or (@name='l_metatarsophalangeal_5') or (@name='l_tarsal_proximal_interphalangeal_5') or 
        (@name='l_tarsal_distal_interphalangeal_5') or (@name='r_hip') or (@name='r_knee') or (@name='r_talocrural') or (@name='r_talocalcaneonavicular') or 
        (@name='r_cuneonavicular_1') or (@name='r_tarsometatarsal_1') or (@name='r_metatarsophalangeal_1') or (@name='r_tarsal_interphalangeal_1') or (@name='r_cuneonavicular_2') or 
        (@name='r_tarsometatarsal_2') or (@name='r_metatarsophalangeal_2') or (@name='r_tarsal_proximal_interphalangeal_2') or (@name='r_tarsal_distal_interphalangeal_2') or (@name='r_cuneonavicular_3') or 
        (@name='r_tarsometatarsal_3') or (@name='r_metatarsophalangeal_3') or (@name='r_tarsal_proximal_interphalangeal_3') or (@name='r_tarsal_distal_interphalangeal_3') or (@name='r_calcaneocuboid') or 
        (@name='r_transversetarsal') or (@name='r_tarsometatarsal_4') or (@name='r_metatarsophalangeal_4') or (@name='r_tarsal_proximal_interphalangeal_4') or (@name='r_tarsal_distal_interphalangeal_4') or 
        (@name='r_tarsometatarsal_5') or (@name='r_metatarsophalangeal_5') or (@name='r_tarsal_proximal_interphalangeal_5') or (@name='r_tarsal_distal_interphalangeal_5') or (@name='vl5') or 
        (@name='vl4') or (@name='vl3') or (@name='vl2') or (@name='vl1') or (@name='vt12') or 
        (@name='vt11') or (@name='vt10') or (@name='vt9') or (@name='vt8') or (@name='vt7') or 
        (@name='vt6') or (@name='vt5') or (@name='vt4') or (@name='vt3') or (@name='vt2') or 
        (@name='vt1') or (@name='vc7') or (@name='vc6') or (@name='vc5') or (@name='vc4') or 
        (@name='vc3') or (@name='vc2') or (@name='vc1') or (@name='skullbase') or (@name='l_eyelid_joint') or 
        (@name='r_eyelid_joint') or (@name='l_eyeball_joint') or (@name='r_eyeball_joint') or (@name='l_eyebrow_joint') or (@name='r_eyebrow_joint') or 
        (@name='temporomandibular') or (@name='l_sternoclavicular') or (@name='l_acromioclavicular') or (@name='l_shoulder') or (@name='l_elbow') or 
        (@name='l_radiocarpal') or (@name='l_midcarpal_1') or (@name='l_carpometacarpal_1') or (@name='l_metacarpophalangeal_1') or (@name='l_carpal_interphalangeal_1') or 
        (@name='l_midcarpal_2') or (@name='l_carpometacarpal_2') or (@name='l_metacarpophalangeal_2') or (@name='l_carpal_proximal_interphalangeal_2') or (@name='l_carpal_distal_interphalangeal_2') or 
        (@name='l_midcarpal_3') or (@name='l_carpometacarpal_3') or (@name='l_metacarpophalangeal_3') or (@name='l_carpal_proximal_interphalangeal_3') or (@name='l_carpal_distal_interphalangeal_3') or 
        (@name='l_midcarpal_4_5') or (@name='l_carpometacarpal_4') or (@name='l_metacarpophalangeal_4') or (@name='l_carpal_proximal_interphalangeal_4') or (@name='l_carpal_distal_interphalangeal_4') or 
        (@name='l_carpometacarpal_5') or (@name='l_metacarpophalangeal_5') or (@name='l_carpal_proximal_interphalangeal_5') or (@name='l_carpal_distal_interphalangeal_5') or (@name='r_sternoclavicular') or 
        (@name='r_acromioclavicular') or (@name='r_shoulder') or (@name='r_elbow') or (@name='r_radiocarpal') or (@name='r_midcarpal_1') or 
        (@name='r_carpometacarpal_1') or (@name='r_metacarpophalangeal_1') or (@name='r_carpal_interphalangeal_1') or (@name='r_midcarpal_2') or (@name='r_carpometacarpal_2') or 
        (@name='r_metacarpophalangeal_2') or (@name='r_carpal_proximal_interphalangeal_2') or (@name='r_carpal_distal_interphalangeal_2') or (@name='r_midcarpal_3') or (@name='r_carpometacarpal_3') or 
        (@name='r_metacarpophalangeal_3') or (@name='r_carpal_proximal_interphalangeal_3') or (@name='r_carpal_distal_interphalangeal_3') or (@name='r_midcarpal_4_5') or (@name='r_carpometacarpal_4') or 
        (@name='r_metacarpophalangeal_4') or (@name='r_carpal_proximal_interphalangeal_4') or (@name='r_carpal_distal_interphalangeal_4') or (@name='r_carpometacarpal_5') or (@name='r_metacarpophalangeal_5') or 
        (@name='r_carpal_proximal_interphalangeal_5') or (@name='r_carpal_distal_interphalangeal_5')"
        role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is not a recognized name for HAnim2 HAnimJoint </assert>
      <!-- *** finish: HAnim2 HAnimJoint name test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->

      <!-- *** start: HAnim2 HAnimJoint alias test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and (@name='SIJ')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'sacroiliac', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='SI joint')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'sacroiliac', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ankle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_talocrural', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_talocalcaneal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_talocalcaneonavicular', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneonavicular')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_cuneonavicular_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_subtalar')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_tarsometatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_tarsometatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_midtarsal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metatarsophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metatarsophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_tarsal_proximal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_tarsal_distal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_calcaneuscuboid')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_calcaneocuboid', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ankle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_talocrural', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_talocalcaneal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_talocalcaneonavicular', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneonavicular')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_cuneonavicular_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_subtalar')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_tarsometatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_tarsometatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_midtarsal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metatarsophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metatarsophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_tarsal_proximal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_tarsal_distal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_tarsal_distal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_calcaneuscuboid')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_calcaneocuboid', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_wrist')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_radiocarpal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_thumb1')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpometacarpal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_thumb2')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metacarpophalangeal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_thumb3')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_interphalangeal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index0')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpometacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpometacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index1')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metacarpophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metacarpophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index2')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_proximal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_proximal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index3')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_distal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_distal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle0')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpometacarpal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle1')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metacarpophalangeal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle2')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_proximal_interphalangeal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle3')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_distal_interphalangeal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring0')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpometacarpal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring1')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metacarpophalangeal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring2')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_proximal_interphalangeal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring3')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_distal_interphalangeal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky0')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpometacarpal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky1')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_metacarpophalangeal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky2')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_proximal_interphalangeal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky3')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'l_carpal_distal_interphalangeal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_wrist')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_radiocarpal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_thumb1')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpometacarpal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_thumb2')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metacarpophalangeal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_thumb3')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_interphalangeal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index0')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpometacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpometacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index1')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metacarpophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metacarpophalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index2')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_proximal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_proximal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index3')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_distal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_distal_interphalangeal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle0')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpometacarpal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle1')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metacarpophalangeal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle2')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_proximal_interphalangeal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle3')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_distal_interphalangeal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring0')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpometacarpal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring1')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metacarpophalangeal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring2')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_proximal_interphalangeal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring3')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_distal_interphalangeal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky0')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpometacarpal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky1')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_metacarpophalangeal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky2')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_proximal_interphalangeal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky3')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimJoint alias for 'r_carpal_distal_interphalangeal_5', recommend updating X3D model source </report>
      <!-- *** finish: HAnim2 HAnimJoint alias test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->

      <!-- *** start: HAnim2 HAnimJoint Level of Articulation (loa) test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and (@name='humanoid_root') and not($loa = -1) and ($loa lt 0)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='0' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='sacroiliac') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_hip') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_knee') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_talocrural') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_talocalcaneonavicular') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneonavicular_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_interphalangeal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneonavicular_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_2') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneonavicular_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_calcaneocuboid') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_transversetarsal') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_hip') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_knee') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_talocrural') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_talocalcaneonavicular') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneonavicular_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_interphalangeal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneonavicular_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_2') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneonavicular_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_calcaneocuboid') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_transversetarsal') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vl5') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vl4') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vl3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vl2') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vl1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt12') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt11') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt10') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt9') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt8') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt7') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt6') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt5') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt4') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt3') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt2') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vt1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vc7') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vc6') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vc5') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vc4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vc3') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vc2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='vc1') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='skullbase') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_eyelid_joint') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_eyelid_joint') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_eyeball_joint') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_eyeball_joint') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_eyebrow_joint') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_eyebrow_joint') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='temporomandibular') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_sternoclavicular') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_acromioclavicular') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_shoulder') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_elbow') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_radiocarpal') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_interphalangeal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_4_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_sternoclavicular') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_acromioclavicular') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_shoulder') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_elbow') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_radiocarpal') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_interphalangeal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_4_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <!-- *** finish: HAnim2 HAnimJoint Level of Articulation (loa) test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->

      <!-- *** start: HAnim2 HAnimJoint parent test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and (@name='sacroiliac') and parent::HAnimJoint[not(@name='humanoid_root')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='humanoid_root', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_hip') and parent::HAnimJoint[not(@name='sacroiliac')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='sacroiliac', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_knee') and parent::HAnimJoint[not(@name='l_hip')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_hip', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_talocrural') and parent::HAnimJoint[not(@name='l_knee')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_knee', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_talocalcaneonavicular') and parent::HAnimJoint[not(@name='l_talocrural')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talocrural', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_cuneonavicular_1') and parent::HAnimJoint[not(@name='l_talocalcaneonavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_1') and parent::HAnimJoint[not(@name='l_cuneonavicular_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_cuneonavicular_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_1') and parent::HAnimJoint[not(@name='l_tarsometatarsal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_interphalangeal_1') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_cuneonavicular_2') and parent::HAnimJoint[not(@name='l_talocalcaneonavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_2') and parent::HAnimJoint[not(@name='l_cuneonavicular_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_cuneonavicular_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_2') and parent::HAnimJoint[not(@name='l_tarsometatarsal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_2') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_2') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_cuneonavicular_3') and parent::HAnimJoint[not(@name='l_talocalcaneonavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_3') and parent::HAnimJoint[not(@name='l_cuneonavicular_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_cuneonavicular_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_3') and parent::HAnimJoint[not(@name='l_tarsometatarsal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_3') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_3') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_calcaneocuboid') and parent::HAnimJoint[not(@name='l_talocrural')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talocrural', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_transversetarsal') and parent::HAnimJoint[not(@name='l_calcaneocuboid')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_calcaneocuboid', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_4') and parent::HAnimJoint[not(@name='l_transversetarsal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_transversetarsal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_4') and parent::HAnimJoint[not(@name='l_tarsometatarsal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_4') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_4') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsometatarsal_5') and parent::HAnimJoint[not(@name='l_transversetarsal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_transversetarsal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsophalangeal_5') and parent::HAnimJoint[not(@name='l_tarsometatarsal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_interphalangeal_5') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_interphalangeal_5') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_hip') and parent::HAnimJoint[not(@name='sacroiliac')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='sacroiliac', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_knee') and parent::HAnimJoint[not(@name='r_hip')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_hip', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_talocrural') and parent::HAnimJoint[not(@name='r_knee')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_knee', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_talocalcaneonavicular') and parent::HAnimJoint[not(@name='r_talocrural')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talocrural', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_cuneonavicular_1') and parent::HAnimJoint[not(@name='r_talocalcaneonavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_1') and parent::HAnimJoint[not(@name='r_cuneonavicular_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_cuneonavicular_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_1') and parent::HAnimJoint[not(@name='r_tarsometatarsal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_interphalangeal_1') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_cuneonavicular_2') and parent::HAnimJoint[not(@name='r_talocalcaneonavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_2') and parent::HAnimJoint[not(@name='r_cuneonavicular_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_cuneonavicular_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_2') and parent::HAnimJoint[not(@name='r_tarsometatarsal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_2') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_2') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_cuneonavicular_3') and parent::HAnimJoint[not(@name='r_talocalcaneonavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_3') and parent::HAnimJoint[not(@name='r_cuneonavicular_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_cuneonavicular_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_3') and parent::HAnimJoint[not(@name='r_tarsometatarsal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_3') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_3') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_calcaneocuboid') and parent::HAnimJoint[not(@name='r_talocrural')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talocrural', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_transversetarsal') and parent::HAnimJoint[not(@name='r_calcaneocuboid')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_calcaneocuboid', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_4') and parent::HAnimJoint[not(@name='r_transversetarsal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_transversetarsal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_4') and parent::HAnimJoint[not(@name='r_tarsometatarsal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_4') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_4') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsometatarsal_5') and parent::HAnimJoint[not(@name='r_transversetarsal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_transversetarsal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsophalangeal_5') and parent::HAnimJoint[not(@name='r_tarsometatarsal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_interphalangeal_5') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_interphalangeal_5') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vl5') and parent::HAnimJoint[not(@name='sacroiliac')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='sacroiliac', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vl4') and parent::HAnimJoint[not(@name='vl5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vl3') and parent::HAnimJoint[not(@name='vl4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vl2') and parent::HAnimJoint[not(@name='vl3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vl1') and parent::HAnimJoint[not(@name='vl2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt12') and parent::HAnimJoint[not(@name='vl1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt11') and parent::HAnimJoint[not(@name='vt12')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt12', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt10') and parent::HAnimJoint[not(@name='vt11')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt11', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt9') and parent::HAnimJoint[not(@name='vt10')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt10', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt8') and parent::HAnimJoint[not(@name='vt9')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt9', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt7') and parent::HAnimJoint[not(@name='vt8')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt8', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt6') and parent::HAnimJoint[not(@name='vt7')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt7', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt5') and parent::HAnimJoint[not(@name='vt6')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt6', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt4') and parent::HAnimJoint[not(@name='vt5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt3') and parent::HAnimJoint[not(@name='vt4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt2') and parent::HAnimJoint[not(@name='vt3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vt1') and parent::HAnimJoint[not(@name='vt2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vc7') and parent::HAnimJoint[not(@name='vt1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vc6') and parent::HAnimJoint[not(@name='vc7')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc7', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vc5') and parent::HAnimJoint[not(@name='vc6')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc6', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vc4') and parent::HAnimJoint[not(@name='vc5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vc3') and parent::HAnimJoint[not(@name='vc4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vc2') and parent::HAnimJoint[not(@name='vc3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='vc1') and parent::HAnimJoint[not(@name='vc2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='skullbase') and parent::HAnimJoint[not(@name='vc1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_eyelid_joint') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_eyelid_joint') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_eyeball_joint') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_eyeball_joint') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_eyebrow_joint') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_eyebrow_joint') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='temporomandibular') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_sternoclavicular') and parent::HAnimJoint[not(@name='vc7')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc7', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_acromioclavicular') and parent::HAnimJoint[not(@name='l_sternoclavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_sternoclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_shoulder') and parent::HAnimJoint[not(@name='l_acromioclavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_acromioclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_elbow') and parent::HAnimJoint[not(@name='l_shoulder')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_shoulder', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_radiocarpal') and parent::HAnimJoint[not(@name='l_elbow')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_elbow', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_1') and parent::HAnimJoint[not(@name='l_radiocarpal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_1') and parent::HAnimJoint[not(@name='l_midcarpal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_1') and parent::HAnimJoint[not(@name='l_carpometacarpal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_interphalangeal_1') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_2') and parent::HAnimJoint[not(@name='l_radiocarpal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_2') and parent::HAnimJoint[not(@name='l_midcarpal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_2') and parent::HAnimJoint[not(@name='l_carpometacarpal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_2') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_2') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_3') and parent::HAnimJoint[not(@name='l_radiocarpal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_3') and parent::HAnimJoint[not(@name='l_midcarpal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_3') and parent::HAnimJoint[not(@name='l_carpometacarpal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_3') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_3') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_midcarpal_4_5') and parent::HAnimJoint[not(@name='l_radiocarpal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_4') and parent::HAnimJoint[not(@name='l_midcarpal_4_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_4_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_4') and parent::HAnimJoint[not(@name='l_carpometacarpal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_4') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_4') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpometacarpal_5') and parent::HAnimJoint[not(@name='l_midcarpal_4_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_4_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpophalangeal_5') and parent::HAnimJoint[not(@name='l_carpometacarpal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_interphalangeal_5') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_interphalangeal_5') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_sternoclavicular') and parent::HAnimJoint[not(@name='vc7')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc7', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_acromioclavicular') and parent::HAnimJoint[not(@name='r_sternoclavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_sternoclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_shoulder') and parent::HAnimJoint[not(@name='r_acromioclavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_acromioclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_elbow') and parent::HAnimJoint[not(@name='r_shoulder')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_shoulder', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_radiocarpal') and parent::HAnimJoint[not(@name='r_elbow')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_elbow', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_1') and parent::HAnimJoint[not(@name='r_radiocarpal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_1') and parent::HAnimJoint[not(@name='r_midcarpal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_1') and parent::HAnimJoint[not(@name='r_carpometacarpal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_interphalangeal_1') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_2') and parent::HAnimJoint[not(@name='r_radiocarpal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_2') and parent::HAnimJoint[not(@name='r_midcarpal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_2') and parent::HAnimJoint[not(@name='r_carpometacarpal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_2') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_2') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_3') and parent::HAnimJoint[not(@name='r_radiocarpal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_3') and parent::HAnimJoint[not(@name='r_midcarpal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_3') and parent::HAnimJoint[not(@name='r_carpometacarpal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_3') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_3') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_midcarpal_4_5') and parent::HAnimJoint[not(@name='r_radiocarpal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_4') and parent::HAnimJoint[not(@name='r_midcarpal_4_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_4_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_4') and parent::HAnimJoint[not(@name='r_carpometacarpal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_4') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_4') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpometacarpal_5') and parent::HAnimJoint[not(@name='r_midcarpal_4_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_4_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpophalangeal_5') and parent::HAnimJoint[not(@name='r_carpometacarpal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_interphalangeal_5') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_interphalangeal_5') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_5', recommend checking model </report>
      <!-- *** finish: HAnim2 HAnimJoint parent test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
    </rule>

    <rule context="HAnimSegment">
      <extends rule="hanimDEFtests"/>
      <extends rule="hanimProfile"/>
      <extends rule="boundingBoxTests"/>
      <!-- child nodes optional, typically has contained geometry but might be invisible -->
      <!-- TODO table rules for allowed names for each node -->
      <!-- TODO LOA rules -->
      <!-- TODO check for positiveX/negativeX for left/right based on presence of l_ and r_ in name -->
      <!-- TODO check for duplicates -->
      <!-- HAnimSegment only provides naming, mass, moment -->
      <!-- if any top-level USE fields are included in ancestor HAnimHumanoid, report if missing a corresponding USE copy of this DEF node -->
      <report test="not(@USE) and not(string-length(@USE) > 0) and (ancestor::HAnimSegment[(string-length(@USE) > 0)]) and not(ancestor::HAnimSegment[(string-length(@USE) > 0)][@DEF=$USE])" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has ancestor HAnimHumanoid that does not include a corresponding &lt;<name/> USE='<value-of select='@DEF'/>' containerField='segments'/&gt; to match this node </report>
      <report test="(string-length(@USE) > 0) and (preceding-sibling::HAnimSegment[(@USE = $USE)])" role="error">&lt;<name/> USE='<value-of select='@USE'/>' containerField='<value-of select='@containerField'/>'/&gt; matches a duplicate preceding USE node </report>
      <!-- HAnimSegment nodes are contained by HAnimJoint or HAnimHumanoid -->
      <report test="not(parent::HAnimJoint) and not(parent::HAnimHumanoid) and not(parent::field) and not(parent::fieldValue)"  role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>' containerField='<value-of select='@ontainerField'/>'/&gt; must be child of HAnimJoint, not <value-of select='local-name(..)'/> </report>
      <!-- TODO questionable, one HAnimSegment at top level seems OK -->
	  <report test="(parent::HAnimHumanoid) and (not(@USE) or not(string-length(@USE) > 0))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>' containerField='<value-of select='@ontainerField'/>'/&gt; with parent HAnimHumanoid needs to be a USE reference to original DEF node under skeleton tree </report>
      <report test="(parent::HAnimHumanoid) and not(@containerField='segments')" role="error">&lt;<name/> USE='<value-of select='@USE'/>' containerField='<value-of select='@ontainerField'/>'/&gt; with parent HAnimHumanoid needs containerField='segments' </report>
      <report test="(parent::HAnimJoint)    and not(@containerField='children')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>' USE='<value-of select='@USE'/>' containerField='<value-of select='@ontainerField'/>'/&gt; with parent HAnimJoint needs containerField='children' </report>
      <!-- check that child Transform translation for geometry matches parent HAnimJoint-->
      <report test="(parent::HAnimJoint)    and (Transform/Shape) and not(Transform/@translation = ../@center)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has contained Transform/Shape, but child Transform/translation='<value-of select="Transform/@translation"/>' does not match parent HAnimJoint/center='<value-of select="../@center"/>' and may not be in the right location (possibly parent HAnimJoint/center value was changed but contained visualization geometry did not) </report>
      <report test="(parent::HAnimJoint)    and (Shape) and not(Transform/Shape) and not(../@containerField='skeleton')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/>'/&gt; has contained Shape geometry, but needs an intermediate Transform with translation value matching parent HAnimJoint/translation='<value-of select="../@center"/>' in order to be in the right location </report>
      <!-- HAnimSegment can only contain HAnimDisplacer or HAnimSite and no other HAnim nodes -->
      <report test="*[(local-name()='HAnimJoint')]"   role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; HAnimSegment cannot contain an HAnimJoint node </report>
      <report test="*[(local-name()='HAnimSegment')]" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; HAnimSegment cannot contain another HAnimSegment node </report>
      <!-- only test immediate children to help localize extraneous HAnimHumanoid and avoid numerous false positives; might miss deeper descendants-->
      <report test="HAnimHumanoid" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot contain another &lt;HAnimHumanoid DEF=&quot;<value-of select="HAnimHumanoid/@DEF"/>&quot; name=&quot;<value-of select="HAnimHumanoid/@name"/>&quot;/&gt; </report>
      <report test="Coordinate      [not(@containerField='coord')]" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains &lt;Coordinate containerField='<value-of select="Coordinate[not(@containerField='coord')]/@containerField"/>'/&gt; that instead must have containerField='coord' </report>
      <report test="CoordinateDouble[not(@containerField='coord')]" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains &lt;CoordinateDouble containerField='<value-of select="CoordinateDouble[not(@containerField='coord')]/@containerField"/>'/&gt; that instead must have containerField='coord' </report>
      <report test="count(Coordinate|CoordinateDouble) > 1" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; can only contain one Coordinate/CoordinateDouble node (instead of <value-of select="count(Coordinate|CoordinateDouble)"/>) </report>
      <!-- 4.8.2 Modelling of humanoids: HAnimSegment should not be contained by Transform, rather 'built in place' for best performance -->
      <report test="parent::*[local-name()='Transform']" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent &lt;Transform DEF='<value-of select="parent::*/@DEF"/>'/&gt; that can be avoided by building body segments in place </report>
      <!-- Common practice is to contain Transform that establishes local coordinate system matching parent HAnimJoint. If so, confirm consistent values are used. -->
      <report test="parent::*[local-name(..)='HAnimJoint'] and Transform and (parent::*[local-name(..)='HAnimJoint']/@center != Transform/@translation)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent &lt;HAnimJoint DEF='<value-of select="parent::*/@DEF"/>' center='<value-of select="parent::*/@center"/>'/&gt; that does not match child &lt;Transform DEF='<value-of select="Transform[1]/@DEF"/>' translation='<value-of select="Transform[1]/@translation"/>'/&gt;, resulting in mismatched local coordinate system </report>
      <!-- excessive caution, also complicates addition of visualization geometry unnecessarily:
	  <report test="(count(Transform) > 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has more than one child Transform node, watch out for mismatched local coordinate systems </report> -->
      
      <!-- *** start: HAnim2 HAnimSegment name test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or
        (@name='sacrum') or (@name='pelvis') or (@name='l_thigh') or (@name='l_calf') or 
        (@name='l_talus') or (@name='l_navicular') or (@name='l_cuneiform_1') or (@name='l_metatarsal_1') or (@name='l_tarsal_proximal_phalanx_1') or 
        (@name='l_tarsal_distal_phalanx_1') or (@name='l_cuneiform_2') or (@name='l_metatarsal_2') or (@name='l_tarsal_proximal_phalanx_2') or (@name='l_tarsal_middle_phalanx_2') or 
        (@name='l_tarsal_distal_phalanx_2') or (@name='l_cuneiform_3') or (@name='l_metatarsal_3') or (@name='l_tarsal_proximal_phalanx_3') or (@name='l_tarsal_middle_phalanx_3') or 
        (@name='l_tarsal_distal_phalanx_3') or (@name='l_calcaneus') or (@name='l_cuboid') or (@name='l_metatarsal_4') or (@name='l_tarsal_proximal_phalanx_4') or 
        (@name='l_tarsal_middle_phalanx_4') or (@name='l_tarsal_distal_phalanx_4') or (@name='l_metatarsal_5') or (@name='l_tarsal_proximal_phalanx_5') or (@name='l_tarsal_middle_phalanx_5') or 
        (@name='l_tarsal_distal_phalanx_5') or (@name='r_thigh') or (@name='r_calf') or (@name='r_talus') or (@name='r_navicular') or 
        (@name='r_cuneiform_1') or (@name='r_metatarsal_1') or (@name='r_tarsal_proximal_phalanx_1') or (@name='r_tarsal_distal_phalanx_1') or (@name='r_cuneiform_2') or 
        (@name='r_metatarsal_2') or (@name='r_tarsal_proximal_phalanx_2') or (@name='r_tarsal_middle_phalanx_2') or (@name='r_tarsal_distal_phalanx_2') or (@name='r_cuneiform_3') or 
        (@name='r_metatarsal_3') or (@name='r_tarsal_proximal_phalanx_3') or (@name='r_tarsal_middle_phalanx_3') or (@name='r_tarsal_distal_phalanx_3') or (@name='r_calcaneus') or 
        (@name='r_cuboid') or (@name='r_metatarsal_4') or (@name='r_tarsal_proximal_phalanx_4') or (@name='r_tarsal_middle_phalanx_4') or (@name='r_tarsal_distal_phalanx_4') or 
        (@name='r_metatarsal_5') or (@name='r_tarsal_proximal_phalanx_5') or (@name='r_tarsal_middle_phalanx_5') or (@name='r_tarsal_distal_phalanx_5') or (@name='l5') or 
        (@name='l4') or (@name='l3') or (@name='l2') or (@name='l1') or (@name='t12') or 
        (@name='t11') or (@name='t10') or (@name='t9') or (@name='t8') or (@name='t7') or 
        (@name='t6') or (@name='t5') or (@name='t4') or (@name='t3') or (@name='t2') or 
        (@name='t1') or (@name='c7') or (@name='c6') or (@name='c5') or (@name='c4') or 
        (@name='c3') or (@name='c2') or (@name='c1') or (@name='skull') or (@name='l_eyelid') or 
        (@name='r_eyelid') or (@name='l_eyeball') or (@name='r_eyeball') or (@name='l_eyebrow') or (@name='r_eyebrow') or 
        (@name='jaw') or (@name='l_clavicle') or (@name='l_scapula') or (@name='l_upperarm') or (@name='l_forearm') or 
        (@name='l_carpal') or (@name='l_trapezium') or (@name='l_metacarpal_1') or (@name='l_carpal_proximal_phalanx_1') or (@name='l_carpal_distal_phalanx_1') or 
        (@name='l_trapezoid') or (@name='l_metacarpal_2') or (@name='l_carpal_proximal_phalanx_2') or (@name='l_carpal_middle_phalanx_2') or (@name='l_carpal_distal_phalanx_2') or 
        (@name='l_capitate') or (@name='l_metacarpal_3') or (@name='l_carpal_proximal_phalanx_3') or (@name='l_carpal_middle_phalanx_3') or (@name='l_carpal_distal_phalanx_3') or 
        (@name='l_hamate') or (@name='l_metacarpal_4') or (@name='l_carpal_proximal_phalanx_4') or (@name='l_carpal_middle_phalanx_4') or (@name='l_carpal_distal_phalanx_4') or 
        (@name='l_metacarpal_5') or (@name='l_carpal_proximal_phalanx_5') or (@name='l_carpal_middle_phalanx_5') or (@name='l_carpal_distal_phalanx_5') or (@name='r_clavicle') or 
        (@name='r_scapula') or (@name='r_upperarm') or (@name='r_forearm') or (@name='r_carpal') or (@name='r_trapezium') or 
        (@name='r_metacarpal_1') or (@name='r_carpal_proximal_phalanx_1') or (@name='r_carpal_distal_phalanx_1') or (@name='r_trapezoid') or (@name='r_metacarpal_2') or 
        (@name='r_carpal_proximal_phalanx_2') or (@name='r_carpal_middle_phalanx_2') or (@name='r_carpal_distal_phalanx_2') or (@name='r_capitate') or (@name='r_metacarpal_3') or 
        (@name='r_carpal_proximal_phalanx_3') or (@name='r_carpal_middle_phalanx_3') or (@name='r_carpal_distal_phalanx_3') or (@name='r_hamate') or (@name='r_metacarpal_4') or 
        (@name='r_carpal_proximal_phalanx_4') or (@name='r_carpal_middle_phalanx_4') or (@name='r_carpal_distal_phalanx_4') or (@name='r_metacarpal_5') or (@name='r_carpal_proximal_phalanx_5') or 
        (@name='r_carpal_middle_phalanx_5') or (@name='r_carpal_distal_phalanx_5')"
        role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is not a recognized name for HAnim2 HAnimSegment </assert>
      <!-- *** finish HAnim2 HAnimSegment name test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->

      <!-- *** start: HAnim2 HAnimSegment alias test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and (@name='l_hindfoot')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_talus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneiform')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_cuneiform_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_midproximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_metatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_metatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middistal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_tarsal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_forefoot')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_calcaneum')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_calcaneus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_hindfoot')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_talus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneiform')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_cuneiform_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_midproximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_metatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middistal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_tarsal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_forefoot')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_calcaneum')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_calcaneus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='head')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'skull', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_wrist')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_thumb_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_metacarpal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_thumb_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_proximal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_thumb_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_distal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_metacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_index_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_metacarpal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_proximal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_middle_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_middle_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_distal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_metacarpal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_proximal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_middle_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_ring_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_distal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_metacarpal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_proximal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_middle_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='l_pinky_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'l_carpal_distal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_hand')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_thumb_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_metacarpal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_thumb_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_proximal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_thumb_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_distal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_metacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_index_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_metacarpal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_proximal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_middle_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_middle_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_distal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_metacarpal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_proximal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_middle_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_ring_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_distal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_metacarpal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_proximal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_middle_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and (@name='r_pinky_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSegment alias for 'r_carpal_distal_phalanx_5', recommend updating X3D model source </report>
      <!-- *** finish: HAnim2 HAnimSegment alias test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->

      <!-- *** start: HAnim2 HAnimSegment Level of Articulation (loa) test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and (@name='sacrum') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='pelvis') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_thigh') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_calf') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_talus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_navicular') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneiform_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneiform_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_2') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuneiform_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_calcaneus') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_cuboid') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_thigh') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_calf') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_talus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_navicular') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneiform_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneiform_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_2') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_2') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuneiform_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_calcaneus') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_cuboid') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l5') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l4') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l2') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t12') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t11') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t10') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t9') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t8') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t7') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t6') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t5') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t4') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t3') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t2') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='t1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='c7') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='c6') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='c5') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='c4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='c3') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='c2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='c1') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='skull') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_eyelid') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_eyelid') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_eyeball') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_eyeball') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_eyebrow') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_eyebrow') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='jaw') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_clavicle') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_scapula') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_upperarm') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_forearm') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_trapezium') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_trapezoid') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_capitate') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_hamate') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_clavicle') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_scapula') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_upperarm') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_forearm') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_trapezium') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_trapezoid') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_capitate') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_hamate') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <!-- *** finish: HAnim2 HAnimSegment Level of Articulation (loa) test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->

      <!-- *** start: HAnim2 HAnimSegment parent test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and (@name='sacrum') and parent::HAnimJoint[not(@name='humanoid_root')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='humanoid_root', recommend checking model </report>
      <report test="$isHAnim2 and (@name='pelvis') and parent::HAnimJoint[not(@name='sacroiliac')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='sacroiliac', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_thigh') and parent::HAnimJoint[not(@name='l_hip')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_hip', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_calf') and parent::HAnimJoint[not(@name='l_knee')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_knee', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_talus') and parent::HAnimJoint[not(@name='l_talocrural')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talocrural', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_navicular') and parent::HAnimJoint[not(@name='l_talocalcaneonavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_cuneiform_1') and parent::HAnimJoint[not(@name='l_cuneonavicular_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_cuneonavicular_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_1') and parent::HAnimJoint[not(@name='l_tarsometatarsal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_1') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_1') and parent::HAnimJoint[not(@name='l_tarsal_interphalangeal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_interphalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_cuneiform_2') and parent::HAnimJoint[not(@name='l_cuneonavicular_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_cuneonavicular_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_2') and parent::HAnimJoint[not(@name='l_tarsometatarsal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_2') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_2') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_2') and parent::HAnimJoint[not(@name='l_tarsal_distal_interphalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_cuneiform_3') and parent::HAnimJoint[not(@name='l_cuneonavicular_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_cuneonavicular_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_3') and parent::HAnimJoint[not(@name='l_tarsometatarsal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_3') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_3') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_3') and parent::HAnimJoint[not(@name='l_tarsal_distal_interphalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_calcaneus') and parent::HAnimJoint[not(@name='l_calcaneocuboid')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_calcaneocuboid', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_cuboid') and parent::HAnimJoint[not(@name='l_transversetarsal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_transversetarsal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_4') and parent::HAnimJoint[not(@name='l_tarsometatarsal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_4') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_4') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_4') and parent::HAnimJoint[not(@name='l_tarsal_distal_interphalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metatarsal_5') and parent::HAnimJoint[not(@name='l_tarsometatarsal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsometatarsal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_proximal_phalanx_5') and parent::HAnimJoint[not(@name='l_metatarsophalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metatarsophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_middle_phalanx_5') and parent::HAnimJoint[not(@name='l_tarsal_proximal_interphalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_tarsal_distal_phalanx_5') and parent::HAnimJoint[not(@name='l_tarsal_distal_interphalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_thigh') and parent::HAnimJoint[not(@name='r_hip')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_hip', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_calf') and parent::HAnimJoint[not(@name='r_knee')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_knee', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_talus') and parent::HAnimJoint[not(@name='r_talocrural')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talocrural', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_navicular') and parent::HAnimJoint[not(@name='r_talocalcaneonavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talocalcaneonavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_cuneiform_1') and parent::HAnimJoint[not(@name='r_cuneonavicular_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_cuneonavicular_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_1') and parent::HAnimJoint[not(@name='r_tarsometatarsal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_1') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_1') and parent::HAnimJoint[not(@name='r_tarsal_interphalangeal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_interphalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_cuneiform_2') and parent::HAnimJoint[not(@name='r_cuneonavicular_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_cuneonavicular_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_2') and parent::HAnimJoint[not(@name='r_tarsometatarsal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_2') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_2') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_2') and parent::HAnimJoint[not(@name='r_tarsal_distal_interphalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_cuneiform_3') and parent::HAnimJoint[not(@name='r_cuneonavicular_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_cuneonavicular_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_3') and parent::HAnimJoint[not(@name='r_tarsometatarsal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_3') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_3') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_3') and parent::HAnimJoint[not(@name='r_tarsal_distal_interphalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_calcaneus') and parent::HAnimJoint[not(@name='r_calcaneocuboid')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_calcaneocuboid', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_cuboid') and parent::HAnimJoint[not(@name='r_transversetarsal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_transversetarsal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_4') and parent::HAnimJoint[not(@name='r_tarsometatarsal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_4') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_4') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_4') and parent::HAnimJoint[not(@name='r_tarsal_distal_interphalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metatarsal_5') and parent::HAnimJoint[not(@name='r_tarsometatarsal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsometatarsal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_proximal_phalanx_5') and parent::HAnimJoint[not(@name='r_metatarsophalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metatarsophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_middle_phalanx_5') and parent::HAnimJoint[not(@name='r_tarsal_proximal_interphalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_tarsal_distal_phalanx_5') and parent::HAnimJoint[not(@name='r_tarsal_distal_interphalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l5') and parent::HAnimJoint[not(@name='vl5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l4') and parent::HAnimJoint[not(@name='vl4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l3') and parent::HAnimJoint[not(@name='vl3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l2') and parent::HAnimJoint[not(@name='vl2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l1') and parent::HAnimJoint[not(@name='vl1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vl1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t12') and parent::HAnimJoint[not(@name='vt12')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt12', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t11') and parent::HAnimJoint[not(@name='vt11')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt11', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t10') and parent::HAnimJoint[not(@name='vt10')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt10', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t9') and parent::HAnimJoint[not(@name='vt9')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt9', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t8') and parent::HAnimJoint[not(@name='vt8')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt8', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t7') and parent::HAnimJoint[not(@name='vt7')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt7', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t6') and parent::HAnimJoint[not(@name='vt6')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt6', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t5') and parent::HAnimJoint[not(@name='vt5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t4') and parent::HAnimJoint[not(@name='vt4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t3') and parent::HAnimJoint[not(@name='vt3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t2') and parent::HAnimJoint[not(@name='vt2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='t1') and parent::HAnimJoint[not(@name='vt1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vt1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='c7') and parent::HAnimJoint[not(@name='vc7')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc7', recommend checking model </report>
      <report test="$isHAnim2 and (@name='c6') and parent::HAnimJoint[not(@name='vc6')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc6', recommend checking model </report>
      <report test="$isHAnim2 and (@name='c5') and parent::HAnimJoint[not(@name='vc5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='c4') and parent::HAnimJoint[not(@name='vc4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='c3') and parent::HAnimJoint[not(@name='vc3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='c2') and parent::HAnimJoint[not(@name='vc2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='c1') and parent::HAnimJoint[not(@name='vc1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='vc1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='skull') and parent::HAnimJoint[not(@name='skullbase')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skullbase', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_eyelid') and parent::HAnimJoint[not(@name='l_eyelid_joint')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_eyelid_joint', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_eyelid') and parent::HAnimJoint[not(@name='r_eyelid_joint')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_eyelid_joint', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_eyeball') and parent::HAnimJoint[not(@name='l_eyeball_joint')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_eyeball_joint', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_eyeball') and parent::HAnimJoint[not(@name='r_eyeball_joint')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_eyeball_joint', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_eyebrow') and parent::HAnimJoint[not(@name='l_eyebrow_joint')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_eyebrow_joint', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_eyebrow') and parent::HAnimJoint[not(@name='r_eyebrow_joint')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_eyebrow_joint', recommend checking model </report>
      <report test="$isHAnim2 and (@name='jaw') and parent::HAnimJoint[not(@name='temporomandibular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='temporomandibular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_clavicle') and parent::HAnimJoint[not(@name='l_sternoclavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_sternoclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_scapula') and parent::HAnimJoint[not(@name='l_acromioclavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_acromioclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_upperarm') and parent::HAnimJoint[not(@name='l_shoulder')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_shoulder', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_forearm') and parent::HAnimJoint[not(@name='l_elbow')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_elbow', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal') and parent::HAnimJoint[not(@name='l_radiocarpal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_trapezium') and parent::HAnimJoint[not(@name='l_midcarpal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_1') and parent::HAnimJoint[not(@name='l_carpometacarpal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_1') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_1') and parent::HAnimJoint[not(@name='l_carpal_interphalangeal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_interphalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_trapezoid') and parent::HAnimJoint[not(@name='l_midcarpal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_2') and parent::HAnimJoint[not(@name='l_carpometacarpal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_2') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_2') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_2') and parent::HAnimJoint[not(@name='l_carpal_distal_interphalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_capitate') and parent::HAnimJoint[not(@name='l_midcarpal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_3') and parent::HAnimJoint[not(@name='l_carpometacarpal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_3') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_3') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_3') and parent::HAnimJoint[not(@name='l_carpal_distal_interphalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_hamate') and parent::HAnimJoint[not(@name='l_midcarpal_4_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_midcarpal_4_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_4') and parent::HAnimJoint[not(@name='l_carpometacarpal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_4') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_4') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_4') and parent::HAnimJoint[not(@name='l_carpal_distal_interphalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_metacarpal_5') and parent::HAnimJoint[not(@name='l_carpometacarpal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpometacarpal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_proximal_phalanx_5') and parent::HAnimJoint[not(@name='l_metacarpophalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_middle_phalanx_5') and parent::HAnimJoint[not(@name='l_carpal_proximal_interphalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_proximal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='l_carpal_distal_phalanx_5') and parent::HAnimJoint[not(@name='l_carpal_distal_interphalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_clavicle') and parent::HAnimJoint[not(@name='r_sternoclavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_sternoclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_scapula') and parent::HAnimJoint[not(@name='r_acromioclavicular')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_acromioclavicular', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_upperarm') and parent::HAnimJoint[not(@name='r_shoulder')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_shoulder', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_forearm') and parent::HAnimJoint[not(@name='r_elbow')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_elbow', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal') and parent::HAnimJoint[not(@name='r_radiocarpal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_radiocarpal', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_trapezium') and parent::HAnimJoint[not(@name='r_midcarpal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_1') and parent::HAnimJoint[not(@name='r_carpometacarpal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_1') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_1') and parent::HAnimJoint[not(@name='r_carpal_interphalangeal_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_interphalangeal_1', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_trapezoid') and parent::HAnimJoint[not(@name='r_midcarpal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_2') and parent::HAnimJoint[not(@name='r_carpometacarpal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_2') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_2') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_2') and parent::HAnimJoint[not(@name='r_carpal_distal_interphalangeal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_interphalangeal_2', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_capitate') and parent::HAnimJoint[not(@name='r_midcarpal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_3') and parent::HAnimJoint[not(@name='r_carpometacarpal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_3') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_3') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_3') and parent::HAnimJoint[not(@name='r_carpal_distal_interphalangeal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_interphalangeal_3', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_hamate') and parent::HAnimJoint[not(@name='r_midcarpal_4_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_midcarpal_4_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_4') and parent::HAnimJoint[not(@name='r_carpometacarpal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_4') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_4') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_4') and parent::HAnimJoint[not(@name='r_carpal_distal_interphalangeal_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_interphalangeal_4', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_metacarpal_5') and parent::HAnimJoint[not(@name='r_carpometacarpal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpometacarpal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_proximal_phalanx_5') and parent::HAnimJoint[not(@name='r_metacarpophalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpophalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_middle_phalanx_5') and parent::HAnimJoint[not(@name='r_carpal_proximal_interphalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_proximal_interphalangeal_5', recommend checking model </report>
      <report test="$isHAnim2 and (@name='r_carpal_distal_phalanx_5') and parent::HAnimJoint[not(@name='r_carpal_distal_interphalangeal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_interphalangeal_5', recommend checking model </report>
      <!-- *** finish: HAnim2 HAnimSegment parent test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
    </rule>

    <rule context="HAnimSite">
      <extends rule="hanimDEFtests"/>
      <extends rule="hanimProfile"/>
      <extends rule="boundingBoxTests"/>
      <!-- child nodes optional, typically has contained geometry but might be invisible -->
	  <!-- TODO relax NamedNeedsChildNode warning if no other Shape nodes present in this HAnimHumanoid -->
      <!-- TODO table rules for allowed names for each node -->
      <!-- TODO HAnimHumanoid naming prefix rules -->
      <!-- TODO LOA rules -->
      <!-- TODO check for positiveX/negativeX for left/right based on presence of l_ and r_ in name -->
      <!-- TODO check for duplicates -->
      <!-- Debug statement: set test="true()" to enable, test="false()" to disable -->
      <report test="false()" role="diagnostic">HAnim<value-of select='$hanimVersion'/> checks for <name/> </report>
      <!-- HAnimSegment only provides naming, mass, moment -->
      <!-- HAnimSite translation cannot have -y value since that is underground. -->
      <report test="@translation and (string-length(@translation) > 0) and starts-with(substring-after(@translation,' '),'-') and not(ancestor::HAnimJoint[@containerField='skeleton'][string-length(@translation) > 0])" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has negative-y vertical value in translation='<value-of select="@translation"/>', which is illegal since HAnimSite cannot be underground </report>
      <!-- if any top-level USE fields are included in ancestor HAnimHumanoid, report if missing a corresponding USE copy of this DEF node -->
      <report test="not(@USE) and not(string-length(@USE) > 0) and (ancestor::HAnimSite[(string-length(@USE) > 0)]) and not(ancestor::HAnimSite[(string-length(@USE) > 0)][@DEF=$USE]) and not(Viewpoint and (@containerField='viewpoints'))" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has ancestor HAnimHumanoid that does not include a corresponding &lt;<name/> USE='<value-of select='@DEF'/>' containerField='sites'/&gt; (or containerField='viewpoints') to match this node </report>
      <report test="(string-length(@USE) > 0) and (preceding-sibling::HAnimSite[(@USE = $USE)])" role="error">&lt;<name/> USE='<value-of select='@USE'/>' containerField='<value-of select='@containerField'/>'/&gt; matches a duplicate preceding USE node </report>
      <!-- HAnimSite nodes are contained by HAnimJoint or HAnimHumanoid -->
      <report test="not(ancestor::HAnimSegment) and not(ancestor::HAnimHumanoid) and not(ancestor::field) and not(ancestor::fieldValue)" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is missing an ancestor HAnimSegment or HAnimHumanoid </report>
      <report test="(parent::HAnimHumanoid) and (not(@USE) or not(string-length(@USE) > 0)) and not(@containerField='skeleton') and not(Viewpoint and (@containerField='viewpoints'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; with parent HAnimHumanoid needs to be a USE reference to original DEF node under skeleton tree, or else have containerField='viewpoints' and contain a Viewpoint node </report>
      <report test="(parent::HAnimHumanoid) and (@USE)  and not(@containerField='sites') and not(@containerField='viewpoints')" role="error">&lt;<name/> USE='<value-of select='@USE'/>'/&gt; with parent HAnimHumanoid needs containerField='sites' or containerField='viewpoints' </report>
      <report test="(parent::HAnimJoint)    and not(@containerField='children')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>' USE='<value-of select='@USE'/>'/&gt; with parent HAnimJoint needs containerField='children' </report>
      <!-- only test immediate children to help localize extraneous HAnimHumanoid and avoid numerous false positives; might miss deeper descendants-->
      <report test="HAnimHumanoid" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; cannot contain another &lt;HAnimHumanoid DEF=&quot;<value-of select="HAnimHumanoid/@DEF"/>&quot; name=&quot;<value-of select="HAnimHumanoid/@name"/>&quot;/&gt; </report>
      <!-- Ensure left l_ site x translations are positive,  right r_ site x translations are negative -->
      <report test="contains(@name,'_l_') and     starts-with(normalize-space(@translation),'-')"  role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; translation needs positive x when on left side </report>
      <report test="contains(@name,'_r_') and not(starts-with(normalize-space(@translation),'-'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; translation needs negative x when on left side </report>
      <!-- child nodes optional, typically has contained geometry but might be invisible -->
      <report test="not(@USE) and ends-with(normalize-space(@name),'_tip') and not(@name=concat(ancestor::HAnimSegment/@name,'_tip'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; needs to match name of parent &lt;HAnimSegment name='<value-of select='ancestor::HAnimSegment/@name'/>' (meaning name='<value-of select='ancestor::HAnimSegment/@name'/>_tip') </report>
      <!-- HAnimSite does not contain HAnimDisplacer. Do not warn about USE nodes at top of HAnimHumanoid. -->
	  <report test="(count(HAnimDisplacer) > 0)  and not(@USE)" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains HAnimDisplacer node which should be moved up a level to be contained by parent &lt;HAnimJoint DEF='<value-of select='../@DEF'/>' name='<value-of select='../@name'/>'/&gt; node </report>
      <report test="(count(HAnimSegment) > 0)    and not(ends-with(@name,'_tip'))  and not(@USE)" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains HAnimSegment but has erronous name that instead must have suffix '_tip' appended, for example: name='<value-of select='@name'/>_tip' </report>
      <report test="(count(Viewpoint) > 0)       and not(ends-with(@name,'_view')) and not(@USE)" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains Viewpoint but has erronous name that instead must have suffix '_view' appended, for example: name='<value-of select='@name'/>_view' </report>
      <report test="(count(Viewpoint) > 1)"                                                       role="info" >&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains <value-of select='count(Viewpoint)'/> Viewpoints, more than one may be ambiguous </report>
      <report test="not(ends-with(@name,'_tip')) and not(ends-with(@name,'_view')) and not(ends-with(@name,'_pt')) and not(@USE)"  role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has incomplete name that must have suffix '_tip' or '_view' or '_pt' appended, depending on function </report>
      <!-- HAnim1 HAnimSite name test -->
      <assert test="(string-length(normalize-space(@USE)) > 0) or not(ancestor::HAnimHumanoid/@version = '1.0') or
        (ends-with(normalize-space(@name),'_tip') or ends-with(normalize-space(@name),'_view') or ends-with(normalize-space(@name),'_pt') or (string-length(normalize-space(@name)) = 0) or
        (@name='cervicale') or (@name='crotch') or (@name='l_acromion') or (@name='l_asis') or (@name='l_axilla_ant') or (@name='l_axilla_post') or 
        (@name='l_calcaneous_post') or (@name='l_clavicale') or (@name='l_dactylion') or (@name='l_digit2') or (@name='l_femoral_lateral_epicn') or 
        (@name='l_femoral_medial_epicn') or (@name='l_forefoot_tip') or (@name='l_gonion') or (@name='l_hand_tip') or (@name='l_humeral_lateral_epicn') or 
        (@name='l_humeral_medial_epicn') or (@name='l_iliocristale') or (@name='l_index_distal_tip') or (@name='l_infraorbitale') or (@name='l_knee_crease') or 
        (@name='l_lateral_malleolus') or (@name='l_medial_malleolus') or (@name='l_metacarpal_pha2') or (@name='l_metacarpal_pha5') or (@name='l_metatarsal_pha1') or 
        (@name='l_metatarsal_pha5') or (@name='l_middle_distal_tip') or (@name='l_neck_base') or (@name='l_olecranon') or (@name='l_pinky_distal_tip') or 
        (@name='l_psis') or (@name='l_radial_styloid') or (@name='l_radiale') or (@name='l_rib10') or (@name='l_ring_distal_tip') or (@name='l_sphyrion') or 
        (@name='l_thelion') or (@name='l_thumb_distal_tip') or (@name='l_tragion') or (@name='l_trochanterion') or (@name='l_ulnar_styloid') or (@name='navel') or 
        (@name='nuchale') or (@name='r_acromion') or (@name='r_asis') or (@name='r_axilla_ant') or (@name='r_axilla_post') or (@name='r_calcaneous_post') or 
        (@name='r_clavicale') or (@name='r_dactylion') or (@name='r_digit2') or (@name='r_femoral_lateral_epicn') or (@name='r_femoral_medial_epicn') or 
        (@name='r_forefoot_tip') or (@name='r_gonion') or (@name='r_hand_tip') or (@name='r_humeral_lateral_epicn') or (@name='r_humeral_medial_epicn') or 
        (@name='r_iliocristale') or (@name='r_index_distal_tip') or (@name='r_infraorbitale') or (@name='r_knee_crease') or (@name='r_lateral_malleolus') or 
        (@name='r_medial_malleolus') or (@name='r_metacarpal_pha2') or (@name='r_metacarpal_pha5') or (@name='r_metatarsal_pha1') or (@name='r_metatarsal_pha5') or 
        (@name='r_middle_distal_tip') or (@name='r_neck_base') or (@name='r_olecranon') or (@name='r_pinky_distal_tip') or (@name='r_psis') or (@name='r_radial_styloid') or 
        (@name='r_radiale') or (@name='r_rib10') or (@name='r_ring_distal_tip') or (@name='r_sphyrion') or (@name='r_thelion') or (@name='r_thumb_distal_tip') or 
        (@name='r_tragion') or (@name='r_trochanterion') or (@name='r_ulnar_styloid') or (@name='rib10_midspine') or (@name='sellion') or (@name='skull_tip') or 
        (@name='substernale') or (@name='supramenton') or (@name='suprasternale') or (@name='waist_preferred_post'))" role="info">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is not a recognized name for HAnim1 HAnimSite </assert>
      
      <!-- *** start: HAnim2 HAnimSite name test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <assert test="(string-length(normalize-space(@USE)) &gt; 0) or not($isHAnim2) or
        starts-with(@name,'skull_vertex') or starts-with(@name,'glabella') or starts-with(@name,'sellion') or starts-with(@name,'l_infraorbitale') or 
        starts-with(@name,'l_tragion') or starts-with(@name,'l_gonion') or starts-with(@name,'r_infraorbitale') or starts-with(@name,'r_tragion') or starts-with(@name,'r_gonion') or 
        starts-with(@name,'supramenton') or starts-with(@name,'cervicale') or starts-with(@name,'adams_apple') or starts-with(@name,'suprasternale') or starts-with(@name,'substernale') or 
        starts-with(@name,'l_clavicle') or starts-with(@name,'l_acromion') or starts-with(@name,'l_axilla_proximal') or starts-with(@name,'l_axilla_distal') or starts-with(@name,'l_axilla_posterior_folds') or 
        starts-with(@name,'r_clavicle') or starts-with(@name,'r_acromion') or starts-with(@name,'r_axilla_proximal') or starts-with(@name,'r_axilla_distal') or starts-with(@name,'r_axilla_posterior_folds') or 
        starts-with(@name,'spine_1_middle_back') or starts-with(@name,'spine_2_lower_back') or starts-with(@name,'waist_preferred_anterior') or starts-with(@name,'waist_preferred_posterior') or starts-with(@name,'l_rib10') or 
        starts-with(@name,'l_thelion') or starts-with(@name,'r_rib10') or starts-with(@name,'r_thelion') or starts-with(@name,'l_asis') or starts-with(@name,'l_iliocristale') or 
        starts-with(@name,'l_psis') or starts-with(@name,'r_asis') or starts-with(@name,'r_iliocristale') or starts-with(@name,'r_psis') or starts-with(@name,'crotch') or 
        starts-with(@name,'l_femoral_lateral_epicondyle') or starts-with(@name,'l_femoral_medial_epicondyle') or starts-with(@name,'l_suprapatella') or starts-with(@name,'l_trochanterion') or starts-with(@name,'r_femoral_lateral_epicondyle') or 
        starts-with(@name,'r_femoral_medial_epicondyle') or starts-with(@name,'r_suprapatella') or starts-with(@name,'r_trochanterion') or starts-with(@name,'l_tibiale') or starts-with(@name,'l_medial_malleolus') or 
        starts-with(@name,'l_lateral_malleolus') or starts-with(@name,'l_sphyrion') or starts-with(@name,'r_tibiale') or starts-with(@name,'r_medial_malleolus') or starts-with(@name,'r_lateral_malleolus') or 
        starts-with(@name,'r_sphyrion') or starts-with(@name,'l_metatarsal_phalanx_1') or starts-with(@name,'l_metatarsal_phalanx_5') or starts-with(@name,'l_dactylion') or starts-with(@name,'l_calcaneus_posterior') or 
        starts-with(@name,'r_metatarsal_phalanx_1') or starts-with(@name,'r_metatarsal_phalanx_5') or starts-with(@name,'r_dactylion') or starts-with(@name,'r_calcaneus_posterior') or starts-with(@name,'l_humeral_lateral_epicondyle') or 
        starts-with(@name,'l_humeral_medial_epicondyle') or starts-with(@name,'l_olecranon') or starts-with(@name,'r_humeral_lateral_epicondyle') or starts-with(@name,'r_humeral_medial_epicondyle') or starts-with(@name,'r_olecranon') or 
        starts-with(@name,'l_radiale') or starts-with(@name,'l_ulnar_styloid') or starts-with(@name,'l_radial_styloid') or starts-with(@name,'r_radiale') or starts-with(@name,'r_ulnar_styloid') or 
        starts-with(@name,'r_radial_styloid') or starts-with(@name,'l_metacarpal_phalanx_2') or starts-with(@name,'l_metacarpal_phalanx_3') or starts-with(@name,'l_metacarpal_phalanx_5') or starts-with(@name,'r_metacarpal_phalanx_2') or 
        starts-with(@name,'r_metacarpal_phalanx_3') or starts-with(@name,'r_metacarpal_phalanx_5') or starts-with(@name,'nuchale') or starts-with(@name,'l_neck_base') or starts-with(@name,'r_neck_base') or 
        starts-with(@name,'navel') or starts-with(@name,'l_ectocanthus') or starts-with(@name,'r_ectocanthus') or starts-with(@name,'menton') or starts-with(@name,'mesosternale') or 
        starts-with(@name,'opisthocranion') or starts-with(@name,'l_knee_crease') or starts-with(@name,'r_knee_crease') or starts-with(@name,'rear_center_midsagittal_plane') or starts-with(@name,'buttocks_standing_wall_contact_point') or 
        starts-with(@name,'l_chest_midsagittal_plane') or starts-with(@name,'r_chest_midsagittal_plane') or starts-with(@name,'l_bideltoid') or starts-with(@name,'r_bideltoid') or starts-with(@name,'l_carpal_distal_phalanx_1') or 
        starts-with(@name,'l_carpal_distal_phalanx_2') or starts-with(@name,'l_carpal_distal_phalanx_3') or starts-with(@name,'l_carpal_distal_phalanx_4') or starts-with(@name,'l_carpal_distal_phalanx_5') or starts-with(@name,'r_carpal_distal_phalanx_1') or 
        starts-with(@name,'r_carpal_distal_phalanx_2') or starts-with(@name,'r_carpal_distal_phalanx_3') or starts-with(@name,'r_carpal_distal_phalanx_4') or starts-with(@name,'r_carpal_distal_phalanx_5') or starts-with(@name,'l_tarsal_distal_phalanx_1') or 
        starts-with(@name,'l_tarsal_distal_phalanx_2') or starts-with(@name,'l_tarsal_distal_phalanx_3') or starts-with(@name,'l_tarsal_distal_phalanx_4') or starts-with(@name,'l_tarsal_distal_phalanx_5') or starts-with(@name,'r_tarsal_distal_phalanx_1') or 
        starts-with(@name,'r_tarsal_distal_phalanx_2') or starts-with(@name,'r_tarsal_distal_phalanx_3') or starts-with(@name,'r_tarsal_distal_phalanx_4') or starts-with(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'sacrum') or 
        contains(@name,'pelvis') or contains(@name,'l_thigh') or contains(@name,'l_calf') or contains(@name,'l_talus') or contains(@name,'l_navicular') or 
        contains(@name,'l_cuneiform_1') or contains(@name,'l_metatarsal_1') or contains(@name,'l_tarsal_proximal_phalanx_1') or contains(@name,'l_tarsal_distal_phalanx_1') or contains(@name,'l_cuneiform_2') or 
        contains(@name,'l_metatarsal_2') or contains(@name,'l_tarsal_proximal_phalanx_2') or contains(@name,'l_tarsal_middle_phalanx_2') or contains(@name,'l_tarsal_distal_phalanx_2') or contains(@name,'l_cuneiform_3') or 
        contains(@name,'l_metatarsal_3') or contains(@name,'l_tarsal_proximal_phalanx_3') or contains(@name,'l_tarsal_middle_phalanx_3') or contains(@name,'l_tarsal_distal_phalanx_3') or contains(@name,'l_calcaneus') or 
        contains(@name,'l_cuboid') or contains(@name,'l_metatarsal_4') or contains(@name,'l_tarsal_proximal_phalanx_4') or contains(@name,'l_tarsal_middle_phalanx_4') or contains(@name,'l_tarsal_distal_phalanx_4') or 
        contains(@name,'l_metatarsal_5') or contains(@name,'l_tarsal_proximal_phalanx_5') or contains(@name,'l_tarsal_middle_phalanx_5') or contains(@name,'l_tarsal_distal_phalanx_5') or contains(@name,'r_thigh') or 
        contains(@name,'r_calf') or contains(@name,'r_talus') or contains(@name,'r_navicular') or contains(@name,'r_cuneiform_1') or contains(@name,'r_metatarsal_1') or 
        contains(@name,'r_tarsal_proximal_phalanx_1') or contains(@name,'r_tarsal_distal_phalanx_1') or contains(@name,'r_cuneiform_2') or contains(@name,'r_metatarsal_2') or contains(@name,'r_tarsal_proximal_phalanx_2') or 
        contains(@name,'r_tarsal_middle_phalanx_2') or contains(@name,'r_tarsal_distal_phalanx_2') or contains(@name,'r_cuneiform_3') or contains(@name,'r_metatarsal_3') or contains(@name,'r_tarsal_proximal_phalanx_3') or 
        contains(@name,'r_tarsal_middle_phalanx_3') or contains(@name,'r_tarsal_distal_phalanx_3') or contains(@name,'r_calcaneus') or contains(@name,'r_cuboid') or contains(@name,'r_metatarsal_4') or 
        contains(@name,'r_tarsal_proximal_phalanx_4') or contains(@name,'r_tarsal_middle_phalanx_4') or contains(@name,'r_tarsal_distal_phalanx_4') or contains(@name,'r_metatarsal_5') or contains(@name,'r_tarsal_proximal_phalanx_5') or 
        contains(@name,'r_tarsal_middle_phalanx_5') or contains(@name,'r_tarsal_distal_phalanx_5') or contains(@name,'l5') or contains(@name,'l4') or contains(@name,'l3') or 
        contains(@name,'l2') or contains(@name,'l1') or contains(@name,'t12') or contains(@name,'t11') or contains(@name,'t10') or 
        contains(@name,'t9') or contains(@name,'t8') or contains(@name,'t7') or contains(@name,'t6') or contains(@name,'t5') or 
        contains(@name,'t4') or contains(@name,'t3') or contains(@name,'t2') or contains(@name,'t1') or contains(@name,'c7') or 
        contains(@name,'c6') or contains(@name,'c5') or contains(@name,'c4') or contains(@name,'c3') or contains(@name,'c2') or 
        contains(@name,'c1') or contains(@name,'skull') or contains(@name,'l_eyelid') or contains(@name,'r_eyelid') or contains(@name,'l_eyeball') or 
        contains(@name,'r_eyeball') or contains(@name,'l_eyebrow') or contains(@name,'r_eyebrow') or contains(@name,'jaw') or contains(@name,'l_clavicle') or 
        contains(@name,'l_scapula') or contains(@name,'l_upperarm') or contains(@name,'l_forearm') or contains(@name,'l_carpal') or contains(@name,'l_trapezium') or 
        contains(@name,'l_metacarpal_1') or contains(@name,'l_carpal_proximal_phalanx_1') or contains(@name,'l_carpal_distal_phalanx_1') or contains(@name,'l_trapezoid') or contains(@name,'l_metacarpal_2') or 
        contains(@name,'l_carpal_proximal_phalanx_2') or contains(@name,'l_carpal_middle_phalanx_2') or contains(@name,'l_carpal_distal_phalanx_2') or contains(@name,'l_capitate') or contains(@name,'l_metacarpal_3') or 
        contains(@name,'l_carpal_proximal_phalanx_3') or contains(@name,'l_carpal_middle_phalanx_3') or contains(@name,'l_carpal_distal_phalanx_3') or contains(@name,'l_hamate') or contains(@name,'l_metacarpal_4') or 
        contains(@name,'l_carpal_proximal_phalanx_4') or contains(@name,'l_carpal_middle_phalanx_4') or contains(@name,'l_carpal_distal_phalanx_4') or contains(@name,'l_metacarpal_5') or contains(@name,'l_carpal_proximal_phalanx_5') or 
        contains(@name,'l_carpal_middle_phalanx_5') or contains(@name,'l_carpal_distal_phalanx_5') or contains(@name,'r_clavicle') or contains(@name,'r_scapula') or contains(@name,'r_upperarm') or 
        contains(@name,'r_forearm') or contains(@name,'r_carpal') or contains(@name,'r_trapezium') or contains(@name,'r_metacarpal_1') or contains(@name,'r_carpal_proximal_phalanx_1') or 
        contains(@name,'r_carpal_distal_phalanx_1') or contains(@name,'r_trapezoid') or contains(@name,'r_metacarpal_2') or contains(@name,'r_carpal_proximal_phalanx_2') or contains(@name,'r_carpal_middle_phalanx_2') or 
        contains(@name,'r_carpal_distal_phalanx_2') or contains(@name,'r_capitate') or contains(@name,'r_metacarpal_3') or contains(@name,'r_carpal_proximal_phalanx_3') or contains(@name,'r_carpal_middle_phalanx_3') or 
        contains(@name,'r_carpal_distal_phalanx_3') or contains(@name,'r_hamate') or contains(@name,'r_metacarpal_4') or contains(@name,'r_carpal_proximal_phalanx_4') or contains(@name,'r_carpal_middle_phalanx_4') or 
        contains(@name,'r_carpal_distal_phalanx_4') or contains(@name,'r_metacarpal_5') or contains(@name,'r_carpal_proximal_phalanx_5') or contains(@name,'r_carpal_middle_phalanx_5') or contains(@name,'r_carpal_distal_phalanx_5')"
        role="info">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is not a recognized name for HAnim2 HAnimSite </assert>
      <!-- *** finish: HAnim2 HAnimSite name test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->

      <!-- *** start: HAnim2 HAnimSite alias test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and starts-with(@name,'skull_tip')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'skull_vertex', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'vertex')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'skull_vertex', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_clavicale')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_clavicle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_axilla_ant')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_axilla_proximal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_axilla_post')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_axilla_distal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_clavicale')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_clavicle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_axilla_ant')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_axilla_proximal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_axilla_post')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_axilla_distal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'middle back')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'spine_1_middle_back', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'lower back')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'spine_2_lower_back', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'waist_preferred_ant') and not(contains(.,'waist_preferred_anterior'))" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'waist_preferred_anterior', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'waist_preferred_post') and not(contains(.,'waist_preferred_posterior'))" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'waist_preferred_posterior', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_rib10_midspine')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_rib10', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'Left Bustpoint')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_thelion', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_rib10_midspine')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_rib10', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'Right Bustpoint')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_thelion', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'Left Anterior Superior Iliac Spine')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_asis', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'Left Posterior Superior Iliac Spine')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_psis', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'Right Anterior Superior Iliac Spine')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_asis', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'Right Posterior Superior Iliac Spine')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_psis', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_femoral_lateral_epicn')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_femoral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_femoral_lateral_epicondyles')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_femoral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_femoral_medial_epicn')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_femoral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_femoral_medial_epicondyles')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_femoral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_kneecap')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_suprapatella', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_trochanter') and not(contains(.,'trochanterion'))" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_trochanterion', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_femoral_lateral_epicn')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_femoral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_femoral_lateral_epicondyles')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_femoral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_femoral_medial_epicn')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_femoral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_femoral_medial_epicondyles')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_femoral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_kneecap')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_suprapatella', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_trochanter') and not(contains(.,'trochanterion'))" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_trochanterion', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metatarsal_pha1')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_metatarsal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metatarsal_pha5')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_metatarsal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_calcaneous_post')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_calcaneus_posterior', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metatarsal_pha1')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_metatarsal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metatarsal_pha5')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_metatarsal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_calcaneous_post')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_calcaneus_posterior', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_humeral_lateral_epicn')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_humeral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_humeral_lateral_epicondyles')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_humeral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_humeral_medial_epicn')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_humeral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_humeral_medial_epicondyles')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_humeral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_humeral_lateral_epicn')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_humeral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_humeral_lateral_epicondyles')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_humeral_lateral_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_humeral_medial_epicn')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_humeral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_humeral_medial_epicondyles')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_humeral_medial_epicondyle', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metacarpal_pha2')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_metacarpal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metacarpal_phalanx') and not(contains(.,'phalanx_'))" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_metacarpal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metacarpal_pha5')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_metacarpal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metacarpal_pha2')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_metacarpal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metacarpal_phalanx') and not(contains(.,'phalanx_'))" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_metacarpal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metacarpal_pha5')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_metacarpal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'nuchal') and not(contains(.,'nuchale'))" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'nuchale', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'belly button')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'navel', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_canthus')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_ectocanthus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_canthus')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_ectocanthus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'chin')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'menton', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'mesosternum')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'mesosternale', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'median plane')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'rear_center_midsagittal_plane', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_thumb_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_carpal_distal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_index_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_middle_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_carpal_distal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_ring_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_carpal_distal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_pinky_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_carpal_distal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_thumb_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_carpal_distal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_index_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_middle_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_carpal_distal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_ring_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_carpal_distal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_pinky_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_carpal_distal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_digit2')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tarsal_distal_pha5')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'l_tarsal_distal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_digit2')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tarsal_distal_pha5')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; is an HAnimSite alias for 'r_tarsal_distal_phalanx_5', recommend updating X3D model source </report>
      <!-- ***   next: HAnim2 HAnimSite alias test matching HAnimSegment alias names, which may match -->
      <report test="$isHAnim2 and contains(@name,'l_hindfoot')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_talus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_cuneiform')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_cuneiform_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_midproximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_metatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_metatarsal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_metatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_middistal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_proximal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_middle_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_tarsal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_forefoot')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_calcaneum')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_calcaneus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_hindfoot')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_talus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_cuneiform')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_cuneiform_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_midproximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_metatarsal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_middistal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_proximal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_tarsal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_middle_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_tarsal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_forefoot')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_tarsal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_calcaneum')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_calcaneus', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'head')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'skull', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_hand')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_thumb_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_metacarpal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_thumb_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_proximal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_thumb_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_index_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_metacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_index_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_proximal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_index_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_middle_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_index_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_middle_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_metacarpal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_middle_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_proximal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_middle_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_middle_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_middle_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_ring_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_metacarpal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_ring_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_proximal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_ring_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_middle_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_ring_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_pinky_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_metacarpal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_pinky_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_proximal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_pinky_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_middle_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_pinky_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'l_carpal_distal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_hand')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_thumb_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_metacarpal_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_thumb_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_proximal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_thumb_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_1', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_index_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_metacarpal_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_index_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_proximal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_proximal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_index_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_middle_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_middle_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_index_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_2', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_middle_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_metacarpal_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_middle_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_proximal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_middle_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_middle_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_middle_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_3', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_ring_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_metacarpal_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_ring_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_proximal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_ring_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_middle_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_ring_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_4', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_pinky_metacarpal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_metacarpal_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_pinky_proximal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_proximal_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_pinky_middle')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_middle_phalanx_5', recommend updating X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_pinky_distal')" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; contains an HAnimSegment alias for 'r_carpal_distal_phalanx_5', recommend updating X3D model source </report>
      <!-- *** finish: HAnim2 HAnimSite alias test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->

      <!-- *** start: HAnim2 HAnimSite Level of Articulation (loa) test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and contains(@name,'skull_vertex') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'glabella') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'sellion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_infraorbitale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tragion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_gonion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_infraorbitale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tragion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_gonion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'supramenton') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'cervicale') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'adams_apple') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'suprasternale') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'substernale') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_clavicle') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_acromion') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_axilla_proximal') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_axilla_distal') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_axilla_posterior_folds') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_clavicle') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_acromion') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_axilla_proximal') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_axilla_distal') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_axilla_posterior_folds') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'spine_1_middle_back') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'spine_2_lower_back') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'waist_preferred_anterior') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'waist_preferred_posterior') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_rib10') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_thelion') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_rib10') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_thelion') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_asis') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_iliocristale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_psis') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_asis') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_iliocristale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_psis') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'crotch') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_femoral_lateral_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_femoral_medial_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_suprapatella') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_trochanterion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_femoral_lateral_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_femoral_medial_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_suprapatella') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_trochanterion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tibiale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_medial_malleolus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_lateral_malleolus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_sphyrion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tibiale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_medial_malleolus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_lateral_malleolus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_sphyrion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_metatarsal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_metatarsal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_dactylion') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_calcaneus_posterior') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_metatarsal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_metatarsal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_dactylion') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_calcaneus_posterior') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_humeral_lateral_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_humeral_medial_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_olecranon') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_humeral_lateral_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_humeral_medial_epicondyle') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_olecranon') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_radiale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_ulnar_styloid') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_radial_styloid') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_radiale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_ulnar_styloid') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_radial_styloid') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_metacarpal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_metacarpal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_metacarpal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_metacarpal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_metacarpal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_metacarpal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'nuchale') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_neck_base') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_neck_base') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'navel') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_ectocanthus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_ectocanthus') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'menton') and not($loa = -1) and ($loa lt 3)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='3' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'mesosternale') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'opisthocranion') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_knee_crease') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_knee_crease') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'rear_center_midsagittal_plane') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'buttocks_standing_wall_contact_point') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_chest_midsagittal_plane') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_chest_midsagittal_plane') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_bideltoid') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_bideltoid') and not($loa = -1) and ($loa lt 1)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='1' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_carpal_distal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx_1') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx_3') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx_4') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_carpal_distal_phalanx_5') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'l_tarsal_distal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx_1') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx_2') and not($loa = -1) and ($loa lt 2)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='2' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx_3') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx_4') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <report test="$isHAnim2 and contains(@name,'r_tarsal_distal_phalanx_5') and not($loa = -1) and ($loa lt 4)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires minimum loa='4' but ancestor HAnimHumanoid loa='<value-of select='$loa'/>' is insufficient, recommend revising X3D model source </report>
      <!-- *** finish: HAnim2 HAnimSite Level of Articulation (loa) test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->

      <!-- *** start: HAnim2 HAnimSite parent test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="$isHAnim2 and starts-with(@name,'skull_vertex') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'glabella') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'sellion') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_infraorbitale') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tragion') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_gonion') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_infraorbitale') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tragion') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_gonion') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'supramenton') and parent::HAnimJoint[not(@name='jaw')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='jaw', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'cervicale') and parent::HAnimJoint[not(@name='t1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'adams_apple') and parent::HAnimJoint[not(@name='c2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='c2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'suprasternale') and parent::HAnimJoint[not(@name='t1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'substernale') and parent::HAnimJoint[not(@name='t10')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t10', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_clavicle') and parent::HAnimJoint[not(@name='l_clavicle')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_acromion') and parent::HAnimJoint[not(@name='l_clavicle')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_axilla_proximal') and parent::HAnimJoint[not(@name='l_clavicle')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_axilla_distal') and parent::HAnimJoint[not(@name='l_clavicle')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_axilla_posterior_folds') and parent::HAnimJoint[not(@name='l_clavicle')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_clavicle') and parent::HAnimJoint[not(@name='r_clavicle')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_acromion') and parent::HAnimJoint[not(@name='r_clavicle')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_axilla_proximal') and parent::HAnimJoint[not(@name='r_clavicle')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_axilla_distal') and parent::HAnimJoint[not(@name='r_clavicle')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_axilla_posterior_folds') and parent::HAnimJoint[not(@name='r_clavicle')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_clavicle', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'spine_1_middle_back') and parent::HAnimJoint[not(@name='t5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'spine_2_lower_back') and parent::HAnimJoint[not(@name='l2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'waist_preferred_anterior') and parent::HAnimJoint[not(@name='l2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'waist_preferred_posterior') and parent::HAnimJoint[not(@name='l2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_rib10') and parent::HAnimJoint[not(@name='l2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_thelion') and parent::HAnimJoint[not(@name='t9')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t9', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_rib10') and parent::HAnimJoint[not(@name='l2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_thelion') and parent::HAnimJoint[not(@name='t9')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t9', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_asis') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_iliocristale') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_psis') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_asis') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_iliocristale') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_psis') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'crotch') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_femoral_lateral_epicondyle') and parent::HAnimJoint[not(@name='l_thigh')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_femoral_medial_epicondyle') and parent::HAnimJoint[not(@name='l_thigh')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_suprapatella') and parent::HAnimJoint[not(@name='l_thigh')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_trochanterion') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_femoral_lateral_epicondyle') and parent::HAnimJoint[not(@name='r_thigh')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_femoral_medial_epicondyle') and parent::HAnimJoint[not(@name='r_thigh')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_suprapatella') and parent::HAnimJoint[not(@name='r_thigh')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_trochanterion') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tibiale') and parent::HAnimJoint[not(@name='l_calf')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_calf', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_medial_malleolus') and parent::HAnimJoint[not(@name='l_calf')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_calf', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_lateral_malleolus') and parent::HAnimJoint[not(@name='l_calf')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_calf', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_sphyrion') and parent::HAnimJoint[not(@name='l_talus')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talus', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tibiale') and parent::HAnimJoint[not(@name='r_calf')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_calf', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_medial_malleolus') and parent::HAnimJoint[not(@name='r_calf')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_calf', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_lateral_malleolus') and parent::HAnimJoint[not(@name='r_calf')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_calf', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_sphyrion') and parent::HAnimJoint[not(@name='r_talus')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talus', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metatarsal_phalanx_1') and parent::HAnimJoint[not(@name='l_tarsal_proximal_phalanx_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_phalanx_1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metatarsal_phalanx_5') and parent::HAnimJoint[not(@name='l_tarsal_proximal_phalanx_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_proximal_phalanx_5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_dactylion') and parent::HAnimJoint[not(@name='l_carpal_distal_phalanx_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_phalanx_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_calcaneus_posterior') and parent::HAnimJoint[not(@name='l_talus')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_talus', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metatarsal_phalanx_1') and parent::HAnimJoint[not(@name='r_tarsal_proximal_phalanx_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_phalanx_1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metatarsal_phalanx_5') and parent::HAnimJoint[not(@name='r_tarsal_proximal_phalanx_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_proximal_phalanx_5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_dactylion') and parent::HAnimJoint[not(@name='r_carpal_distal_phalanx_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_phalanx_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_calcaneus_posterior') and parent::HAnimJoint[not(@name='r_talus')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_talus', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_humeral_lateral_epicondyle') and parent::HAnimJoint[not(@name='l_upperarm')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_upperarm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_humeral_medial_epicondyle') and parent::HAnimJoint[not(@name='l_forearm')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_olecranon') and parent::HAnimJoint[not(@name='l_forearm')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_humeral_lateral_epicondyle') and parent::HAnimJoint[not(@name='r_upperarm')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_upperarm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_humeral_medial_epicondyle') and parent::HAnimJoint[not(@name='r_forearm')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_olecranon') and parent::HAnimJoint[not(@name='r_forearm')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_radiale') and parent::HAnimJoint[not(@name='l_forearm')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_ulnar_styloid') and parent::HAnimJoint[not(@name='l_carpal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_radial_styloid') and parent::HAnimJoint[not(@name='l_forearm')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_radiale') and parent::HAnimJoint[not(@name='r_forearm')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_ulnar_styloid') and parent::HAnimJoint[not(@name='r_carpal')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_radial_styloid') and parent::HAnimJoint[not(@name='r_forearm')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_forearm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metacarpal_phalanx_2') and parent::HAnimJoint[not(@name='l_metacarpal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metacarpal_phalanx_3') and parent::HAnimJoint[not(@name='l_metacarpal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_metacarpal_phalanx_5') and parent::HAnimJoint[not(@name='l_metacarpal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_metacarpal_5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metacarpal_phalanx_2') and parent::HAnimJoint[not(@name='r_metacarpal_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpal_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metacarpal_phalanx_3') and parent::HAnimJoint[not(@name='r_metacarpal_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpal_3', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_metacarpal_phalanx_5') and parent::HAnimJoint[not(@name='r_metacarpal_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_metacarpal_5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'nuchale') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_neck_base') and parent::HAnimJoint[not(@name='c7')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='c7', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_neck_base') and parent::HAnimJoint[not(@name='c7')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='c7', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'navel') and parent::HAnimJoint[not(@name='l5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_ectocanthus') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_ectocanthus') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'menton') and parent::HAnimJoint[not(@name='jaw')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='jaw', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'mesosternale') and parent::HAnimJoint[not(@name='t6')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t6', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'opisthocranion') and parent::HAnimJoint[not(@name='skull')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='skull', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_knee_crease') and parent::HAnimJoint[not(@name='l_thigh')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_knee_crease') and parent::HAnimJoint[not(@name='r_thigh')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_thigh', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'rear_center_midsagittal_plane') and parent::HAnimJoint[not(@name='t6')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t6', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'buttocks_standing_wall_contact_point') and parent::HAnimJoint[not(@name='pelvis')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='pelvis', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_chest_midsagittal_plane') and parent::HAnimJoint[not(@name='t6')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t6', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_chest_midsagittal_plane') and parent::HAnimJoint[not(@name='t6')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='t6', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_bideltoid') and parent::HAnimJoint[not(@name='l_upperarm')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_upperarm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_bideltoid') and parent::HAnimJoint[not(@name='r_upperarm')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_upperarm', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_carpal_distal_phalanx_1') and parent::HAnimJoint[not(@name='l_carpal_distal_phalanx_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_phalanx_1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_carpal_distal_phalanx_2') and parent::HAnimJoint[not(@name='l_carpal_distal_phalanx_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_phalanx_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_carpal_distal_phalanx_3') and parent::HAnimJoint[not(@name='l_carpal_distal_phalanx_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_phalanx_3', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_carpal_distal_phalanx_4') and parent::HAnimJoint[not(@name='l_carpal_distal_phalanx_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_phalanx_4', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_carpal_distal_phalanx_5') and parent::HAnimJoint[not(@name='l_carpal_distal_phalanx_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_carpal_distal_phalanx_5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_carpal_distal_phalanx_1') and parent::HAnimJoint[not(@name='r_carpal_distal_phalanx_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_phalanx_1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_carpal_distal_phalanx_2') and parent::HAnimJoint[not(@name='r_carpal_distal_phalanx_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_phalanx_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_carpal_distal_phalanx_3') and parent::HAnimJoint[not(@name='r_carpal_distal_phalanx_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_phalanx_3', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_carpal_distal_phalanx_4') and parent::HAnimJoint[not(@name='r_carpal_distal_phalanx_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_phalanx_4', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_carpal_distal_phalanx_5') and parent::HAnimJoint[not(@name='r_carpal_distal_phalanx_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_carpal_distal_phalanx_5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tarsal_distal_phalanx_1') and parent::HAnimJoint[not(@name='l_tarsal_distal_phalanx_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_phalanx_1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tarsal_distal_phalanx_2') and parent::HAnimJoint[not(@name='l_tarsal_distal_phalanx_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_phalanx_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tarsal_distal_phalanx_3') and parent::HAnimJoint[not(@name='l_tarsal_distal_phalanx_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_phalanx_3', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tarsal_distal_phalanx_4') and parent::HAnimJoint[not(@name='l_tarsal_distal_phalanx_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_phalanx_4', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'l_tarsal_distal_phalanx_5') and parent::HAnimJoint[not(@name='l_tarsal_distal_phalanx_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='l_tarsal_distal_phalanx_5', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tarsal_distal_phalanx_1') and parent::HAnimJoint[not(@name='r_tarsal_distal_phalanx_1')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_phalanx_1', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tarsal_distal_phalanx_2') and parent::HAnimJoint[not(@name='r_tarsal_distal_phalanx_2')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_phalanx_2', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tarsal_distal_phalanx_3') and parent::HAnimJoint[not(@name='r_tarsal_distal_phalanx_3')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_phalanx_3', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tarsal_distal_phalanx_4') and parent::HAnimJoint[not(@name='r_tarsal_distal_phalanx_4')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_phalanx_4', recommend checking model </report>
      <report test="$isHAnim2 and starts-with(@name,'r_tarsal_distal_phalanx_5') and parent::HAnimJoint[not(@name='r_tarsal_distal_phalanx_5')]" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; has parent HAnimJoint name=' name='<value-of select='parent::HAnimJoint/@name'/>' rather than expected parent name='r_tarsal_distal_phalanx_5', recommend checking model </report>
      <!-- *** finish: HAnim2 HAnimSite parent test generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
    </rule>

    <rule context="HAnimMotion">
      <extends rule="hanimDEFtests"/>
      <extends rule="hanimProfile"/>
      <extends rule="boundingBoxTests"/>
      <extends rule="NoChildNode"/>
      <!-- TODO should HAnimMotion node include a name field for consistency? -->
      <!-- Debug statement: set test="true()" to enable, test="false()" to disable -->
      <report test="false()" role="diagnostic">HAnim checks for <name/> </report>
      <report test="/X3D[starts-with(@version,'3')]" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' name='<value-of select='@name'/>'/&gt; requires X3D version='4.0' </report>
      <!-- TODO generalize these rules? is a pattern possile? -->
      <report test="(string-length(@elapsedTime) > 0)" role="error">&NamedNodeDEFname; attribute elapsedTime='<value-of select='@elapsedTime'/>' has accessType outputOnly and cannot appear in a file </report>
      <!-- TODO table rules for allowed names for each node -->
      <!-- TODO HAnimHumanoid naming prefix rules -->
      <!-- TODO LOA rules -->
      <!-- TODO check for positiveX/negativeX for left/right based on presence of l_ and r_ in name -->
      <!-- TODO check for duplicates -->
      <!-- TODO check syntax capitalization keywords, perhaps regexes also -->
      <!-- TODO counting checks -->
    </rule>

    <!-- ========= Metadata nodes ========== -->

    <rule context="MetadataBoolean">
      <let name="valueResidue" value="translate(normalize-space(@value),' truefalse,','')"/>
      <extends rule="Metadata"/>
      <extends rule="X3Dversion3.3"/>
      <!-- check for weird mixed-space -->
      <report test="not(@USE) and (string-length($valueResidue) != 0)" role="error">&NamedNodeDEFname; array value='<value-of select='@value'/>' has illegal characters, only (true, false) values are allowed </report>
      <!-- TODO is it possible to add similar rules for simple boolean fields, without leading to false positives for string fields? -->
      <report test="contains(value,'TRUE' )"   role="error">&NamedNodeDEFname; value array 'TRUE' values are incorrect, use 'true' instead </report>
      <report test="contains(value,'True' )"   role="error">&NamedNodeDEFname; value array 'True' values are incorrect, use 'true' instead </report>
      <report test="contains(value,'FALSE')"   role="error">&NamedNodeDEFname; value array 'FALSE' values are incorrect, use 'false' instead </report>
      <report test="contains(value,'False')"   role="error">&NamedNodeDEFname; value array 'False' values are incorrect, use 'false' instead </report>
    </rule>
    
    <rule context="MetadataInteger">
      <let name="valueResidue" value="translate(normalize-space(@value),' +-0123456789Ee,','')"/>
      <extends rule="Metadata"/>
      <report test="not(@USE) and (string-length($valueResidue) != 0)" role="error">&NamedNodeDEFname; array value='<value-of select='@value'/>' has illegal characters, only integer numbers are allowed </report>
    </rule>
    
    <rule context="MetadataFloat | MetadataDouble">
      <let name="valueResidue" value="translate(normalize-space(@value),' +-0123456789Ee,.','')"/>
      <extends rule="Metadata"/>
      <report test="not(@USE) and (string-length(normalize-space($valueResidue)) != 0)" role="error">&NamedNodeDEFname; array value='<value-of select='@value'/>' has illegal characters, only floating-point numbers are allowed </report>
    </rule>
    
    <rule context="MetadataSet">
      <let name="HAnimHumanoid.info.MetaNode.gender"          value="*[@name='gender']         [local-name()  = 'MetadataString']"/>
      <let name="HAnimHumanoid.info.MetaNode.height"          value="*[@name='height']         [local-name() != 'MetadataFloat']"/>
      <let name="HAnimHumanoid.info.MetaNode.weight"          value="*[@name='weight']         [local-name() != 'MetadataFloat']"/>
      <let name="GeoMetadata.summary.MetaNode.resolution"     value="*[@name='resolution']     [local-name() != 'MetadataFloat']"/>
      <extends rule="Metadata"/>
      <extends rule="NamedNeedsChildNode"/>
      <!-- default Metadata* containerfield='metadata' for X3D3 but TODO proposed default containerField='value' for X3D4 -->
	  <report test="$isX3D3 and (count(*[(@containerField='metadata') or (string-length(@containerField) = 0)]) > 1)"                                     role="error"  >&NamedNodeDEFname; contains more than one Metadata* child node with default containerField='metadata' or containerField='' where typically such nodes have containerField='value' (X3D3 rule) </report>
	  <report test="$isX3D4 and (count(*[(@containerField='metadata') or (string-length(@containerField) = 0)]) > 1)"                                     role="error"  >&NamedNodeDEFname; contains more than one Metadata* child node with default containerField='metadata' where typically such nodes have containerField='value' (X3D4 rule) </report>
	  <report test="$isX3D3 and (count(*[(@containerField='metadata') or (string-length(@containerField) = 0)]) = 1) and not(*[@containerField='value'])" role="warning">&NamedNodeDEFname; contains a Metadata* node with default containerField='metadata' or containerField='' where typically such nodes have containerField='value' (X3D3 rule) </report>
      <report test="$isX3D4 and (count(*[(@containerField='metadata') or (string-length(@containerField) = 0)]) = 1) and not(*[@containerField='value'])" role="warning">&NamedNodeDEFname; contains a Metadata* node with default containerField='metadata' where typically such nodes have containerField='value' (X3D4 rule) </report>
      <!-- HAnimHumanoid.info rules for special MetadataSet vocabulary -->
      <report test="(local-name(..) = 'HAnimHumanoid') and (@name='HAnimHumanoid.info')  and not(@reference='https://www.web3d.org/documents/specifications/19774/V2.0/Architecture/ObjectInterfaces.html#Humanoid')" role="warning">&NamedNodeDEFname; contains name='HAnimHumanoid.info' but reference='<value-of select='@reference'/>' rather than expected reference='https://www.web3d.org/documents/specifications/19774/V2.0/Architecture/ObjectInterfaces.html#Humanoid'</report>
      <report test="(local-name(..) = 'HAnimHumanoid') and (@name='HAnimHumanoid.info')  and $HAnimHumanoid.info.MetaNode.gender and not($HAnimHumanoid.info.MetaNode.gender/@value = 'male') and not($HAnimHumanoid.info.MetaNode.gender/@value = 'female') and not($HAnimHumanoid.info.MetaNode.gender/@value = 'neutral')"          role="warning"><value-of select='local-name(..)'/>/&NamedNodeDEFname; contains <value-of select='local-name($HAnimHumanoid.info.MetaNode.gender)'/> name='<value-of select='$HAnimHumanoid.info.MetaNode.gender/@name'/>' value='<value-of select='$HAnimHumanoid.info.MetaNode.gender/@value'/>' which is expected to be 'male' or 'female' or 'neutral' </report>
      <report test="(local-name(..) = 'HAnimHumanoid') and (@name='HAnimHumanoid.info')  and $HAnimHumanoid.info.MetaNode.height"      role="warning"><value-of select='local-name(..)'/>/&NamedNodeDEFname; contains <value-of select='local-name($HAnimHumanoid.info.MetaNode.height)'     /> name='<value-of select='$HAnimHumanoid.info.MetaNode.height/@name'     />' value='<value-of select='$HAnimHumanoid.info.MetaNode.height/@value'     />' which instead needs to be element type MetadataFloat </report>
      <report test="(local-name(..) = 'HAnimHumanoid') and (@name='HAnimHumanoid.info')  and $HAnimHumanoid.info.MetaNode.weight"      role="warning"><value-of select='local-name(..)'/>/&NamedNodeDEFname; contains <value-of select='local-name($HAnimHumanoid.info.MetaNode.weight)'     /> name='<value-of select='$HAnimHumanoid.info.MetaNode.weight/@name'     />' value='<value-of select='$HAnimHumanoid.info.MetaNode.weight/@value'     />' which instead needs to be element type MetadataFloat </report>
      <report test="(local-name(..) = 'GeoMetadata')   and (@name='GeoMetadata.summary') and not(@reference='https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-CD/Part01/components/geospatial.html#GeoMetadata')" role="warning">&NamedNodeDEFname; contains name='HAnimHumanoid.info' but reference='<value-of select='@reference'/>' rather than expected reference='https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-CD/Part01/components/geospatial.html#GeoMetadata'</report>
      <report test="(local-name(..) = 'GeoMetadata')   and (@name='GeoMetadata.summary') and $GeoMetadata.summary.MetaNode.resolution" role="warning"><value-of select='local-name(..)'/>/&NamedNodeDEFname; contains <value-of select='local-name($GeoMetadata.summary.MetaNode.resolution)'/> name='<value-of select='$GeoMetadata.summary.MetaNode.resolution/@name'/>' value='<value-of select='$GeoMetadata.summary.MetaNode.resolution/@value'/>' which instead needs to be element type MetadataFloat </report>
      <!-- TODO additional checks for other typed vocabularies may occur here... -->
      <!-- no other special tests since XML validation handles typed values of children -->
    </rule>

    <rule context="MetadataString">
      <let name="stringResidueApos" value="translate(@value,' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890`~!@#$%^*()-_=+;:[]{}?,./\|&#928;&gt;&lt;&amp;','')"/>
      <let name="stringResidue" value='translate($stringResidueApos,"&apos;","")'/>
      <let name="quoteCount" value="string-length($stringResidue)"/>
      <let name="normalizedString" value="normalize-space(@value)"/>
      <let name="lastCharacter" value="substring($normalizedString,string-length($normalizedString))"/>
      <extends rule="Metadata"/>
      <!-- value field MFString array checks -->
      <report test="false()" role="trace">$quoteCount=<value-of select='$quoteCount'/>, $stringResidue=<value-of select='$stringResidue'/>, $stringResidueApos=<value-of select='$stringResidueApos'/> , $lastCharacter=<value-of select='$lastCharacter'/> </report>
      <report test="not(@USE) and contains($normalizedString,'&quot;&quot;') and not(contains($normalizedString,'\&quot;&quot;') or contains($normalizedString,'&quot;\&quot;') or contains($normalizedString,'&quot;&quot; &quot;') or contains($normalizedString,'&quot; &quot;&quot;'))" role="error">&NamedNodeDEFname; array value='<value-of select='@value'/>' has questionable line-break &quot;&quot; quote marks </report>
      <!-- requirement for SFString quoting likely to be relaxed
      <report test="not(@USE) and (@value) and not(contains(@value,'&quot;'))"   role="error">&NamedNodeDEFname; array value='<value-of select='@value'/>' needs to begin and end with &quot;quote marks&quot;.  Corrected example: &lt;<name/> DEF='<value-of select='$DEF'/>' value=&apos;&quot;<value-of select='(@value)'/>&quot;&apos;/&gt; </report> -->
      <report test="not(@USE) and (@value) and    (contains(@value,'&quot;')) and (($quoteCount div 2)!=round($quoteCount div 2)) and not(contains(@value,'\&quot;'))"   role="error">&NamedNodeDEFname; array value='<value-of select='@value'/>' has <value-of select='($quoteCount)'/> unescaped &quot;quote marks&quot; but instead needs to have an even number of matched pairs </report>
      <report test="not(@USE) and (@value) and (contains(@value,'\&quot;'))"    role="warning">&NamedNodeDEFname; array value='<value-of select='@value'/>' has <value-of select='($quoteCount)'/> quote marks with at least one escaped quote mark \&quot; so double-check to ensure paired &quot;quote marks&quot; for each line are matched </report>
      <report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&quot;')) and not($lastCharacter='&quot;') and (contains(@value,'&quot;'))" role="error">&NamedNodeDEFname; array value='<value-of select='@value'/>' needs to begin and end with &quot;quote marks&quot; </report>
      <report test="not(@USE) and ($normalizedString) and not(starts-with($normalizedString,'&quot;')) and    ($lastCharacter='&quot;')"                                 role="error">&NamedNodeDEFname; array value='<value-of select='@value'/>' needs to begin with quote mark &quot; </report>
      <report test="not(@USE) and ($normalizedString) and    (starts-with($normalizedString,'&quot;')) and not($lastCharacter='&quot;')"                                 role="error">&NamedNodeDEFname; array value='<value-of select='@value'/>' needs to end with quote mark &quot; </report>
    </rule>

    <!-- ========= Shader nodes ========== -->
    <rule id="ShaderLanguage" abstract="true">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.1"/>
      <assert test="(@language='Cg') or (@language='GLSL') or (@language='HLSL') or (string-length(normalize-space(@language)) = 0)" role="warning">&lt;<name/> DEF='<value-of select='@DEF'/>' language='<value-of select='@language'/>'/&gt;, note optionally supported shader language values are Cg GLSL or HLSL </assert>
    </rule>

    <rule id="embeddedWhiteSpaceCount" abstract="true">
      <let name="embeddedWhiteSpaceCount" value="string-length(normalize-space(translate(@value,',',' '))) - string-length(translate(normalize-space(translate(@value,',',' ')),' ',''))"/>
      <extends rule="DEFtests"/>
    </rule>

    <rule context="ComposedShader | ProgramShader">
      <extends rule="ShaderLanguage"/>
      <!-- contained field definition checks are also applied automatically for ComposedShader -->
    </rule>

    <rule context="PackagedShader">
      <extends rule="ShaderLanguage"/>
      <extends rule="hasUrl"/>
      <!-- contained field definition checks are also applied automatically -->
    </rule>

    <rule context="ShaderPart | ShaderProgram">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.1"/>
      <extends rule="hasUrl"/>
      <!-- recommend that type VERTEX/FRAGMENT gets explicitly included due to security sensitivity; correct values are caught by DTD/Schema -->
      <report test="not(@type) or (string-length(normalize-space(@type)) = 0)" role="warning">&NodeDEFname; default type='VERTEX' is not defined, it is good shader practice to include it </report>
      <!-- extraneous-quote tests for SFString enumeration fields -->
      <report test="contains(@type, '&quot;')" role="error">&NodeDEFname; type='<value-of select='@type'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <!-- contained field definition checks are also applied automatically for ShaderProgram -->
      <report test="(local-name(.)='ShaderPart') and (local-name(..)!='ComposedShader')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' value='<value-of select='@value'/>'/&gt; needs to be contained by a &lt;ComposedShader&gt; node rather than a &lt;<value-of select='@numComponents'/>&gt; node </report>
    </rule>

    <rule context="FloatVertexAttribute">
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="true()"/>
      <extends rule="X3Dversion3.1"/>
      <extends rule="requiredName"/>
    </rule>

    <rule context="Matrix3VertexAttribute">
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="true()"/>
      <extends rule="embeddedWhiteSpaceCount"/>
      <extends rule="X3Dversion3.1"/>
      <extends rule="requiredName"/>
      <report test="((($embeddedWhiteSpaceCount + 1) mod  9) != 0)" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' value='<value-of select='@value'/>'/&gt; has illegal number of values (<value-of select='(($embeddedWhiteSpaceCount + 1) div 9)'/>) for 9-tuple Matrix3VertexAttribute array </report>
    </rule>

    <rule context="Matrix4VertexAttribute">
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="true()"/>
      <extends rule="embeddedWhiteSpaceCount"/>
      <extends rule="X3Dversion3.1"/>
      <extends rule="requiredName"/>
      <report test="((($embeddedWhiteSpaceCount + 1) mod 16) != 0)" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' value='<value-of select='@value'/>'/&gt; has illegal number of values (<value-of select='(($embeddedWhiteSpaceCount + 1) div 16)'/>'/>) for 16-tuple Matrix4VertexAttribute array </report>
    </rule>

    <!-- TODO two versions?? -->
    <rule context="Matrix4VertexAttribute">
      <!-- X3D Scene Authoring Hints, Naming Conventions. Typing of name attributes: https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
      <!-- NMTOKEN names (no whitespace) is strict for component and unit and prototype statements, Humanoid Animation, and X3DVertexAttribute nodes -->
      <let name="enableWhitespaceNameWarning" value="true()"/>
      <extends rule="embeddedWhiteSpaceCount"/>
      <extends rule="X3Dversion3.1"/>
      <extends rule="optionalName"/>
      <report test="((($embeddedWhiteSpaceCount + 1) mod number(@numComponents)) != 0)" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>' value='<value-of select='@value'/>'/&gt; has illegal number of values (<value-of select='(($embeddedWhiteSpaceCount + 1) div @numComponents)'/>'/>) for @numComponents=<value-of select='@numComponents'/> FloatVertexAttribute array </report>
      <report test="(number(@numComponents) lt 1) or (number(@numComponents) gt 4) " role="error">&lt;<value-of select='local-name(..)'/> name='<value-of select='../@name'/>' DEF='<value-of select='../@DEF'/>'&gt; &lt;<name/> name='<value-of select='@name'/>' numComponents='<value-of select='@numComponents'/>'/&gt; has illegal numComponents value, must be in range [1..4] inclusive </report>
    </rule>
    
    <!-- ========= Cube map environmental texturing nodes ========== -->

    <rule context="ComposedCubeMapTexture">
      <!-- attribute value validation performed by X3D Schema -->
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.1"/>
      <report test="count(*[@containerField = 'front'])  > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='front' </report>
      <report test="count(*[@containerField = 'back'])   > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='back' </report>
      <report test="count(*[@containerField = 'left'])   > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='left' </report>
      <report test="count(*[@containerField = 'right'])  > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='right' </report>
      <report test="count(*[@containerField = 'top'])    > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='top' </report>
      <report test="count(*[@containerField = 'bottom']) > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='bottom' </report>
      <report test="count(*[contains(@containerField, 'front')])  > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='front' or 'frontTexture' </report>
      <report test="count(*[contains(@containerField, 'back')])   > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='back' or 'backTexture' </report>
      <report test="count(*[contains(@containerField, 'left')])   > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='left' or 'leftTexture' </report>
      <report test="count(*[contains(@containerField, 'right')])  > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='right' or 'rightTexture' </report>
      <report test="count(*[contains(@containerField, 'top')])    > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='top' or 'topTexture' </report>
      <report test="count(*[contains(@containerField, 'bottom')]) > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='bottom' or 'bottomTexture' </report>
      <!-- X3D4 Field name changes https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#fieldNameChanges -->
      <report test="$isX3D3 and (count(*[contains(local-name(),'Texture') and    (contains(@containerField, 'Texture'))]) > 0)" role="error">&NodeDEFname; in X3D version='<value-of select='/X3D/@version'/>' contains X3DTexture2DNode child node(s) with containerField ending in 'Texture', which is only allowed in X3D4 </report>
      <report test="$isX3D4 and (count(*[contains(local-name(),'Texture') and not(contains(@containerField, 'Texture'))]) > 0)" role="error">&NodeDEFname; in X3D version='<value-of select='/X3D/@version'/>' contains X3DTexture2DNode child node(s) without containerField ending in 'Texture', which is only allowed in X3D3 </report>
    </rule>
    
    <rule context="GeneratedCubeMapTexture">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.1"/>
      <assert test="(/X3D[@profile='Full'] or /X3D/head/component[@name='CubeMapTexturing'][number(@level) ge 3] or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='CubeMapTexturing' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </assert>
    
      <!-- extraneous-quote tests for SFString enumeration fields -->
      <report test="contains(@update, '&quot;')" role="error">&NodeDEFname; update='<value-of select='@update'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <!-- TODO more rules -->
    </rule>

    <rule context="ImageCubeMapTexture">
      <!-- attribute value validation performed by X3D Schema -->
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.1"/>
      <extends rule="hasUrl"/>
      <!-- TODO file format check -->
    </rule>

    <!-- ========= Followers: Chasers and Dampers ========== -->

    <rule id="Chaser" abstract="true">
      <!-- attribute value validation performed by X3D Schema -->
      <extends rule="DEFtests"/>
      <report test="starts-with(normalize-space(@duration),'-')" role="info">&NodeDEFname; duration='<value-of select='@duration'/>' cannot be negative </report>
    </rule>

    <rule context="OrientationChaser | PositionChaser | PositionChaser2D | ScalarChaser">
      <extends rule="Chaser"/>
      <extends rule="X3Dversion3.2"/>
    </rule>

    <rule context="ColorChaser | CoordinateChaser | TexCoordChaser2D">
      <extends rule="Chaser"/>
      <extends rule="X3Dversion3.3"/>
    </rule>

    <rule id="Damper" abstract="true">
      <!-- attribute value validation performed by X3D Schema -->
      <extends rule="DEFtests"/>
      <report test="starts-with(normalize-space(@tau),'-')" role="info">&NodeDEFname; tau='<value-of select='@tau'/>' time constant cannot be negative </report>
      <report test="starts-with(normalize-space(@tolerance),'-') and (normalize-space(@tolerance) != '-1')" role="info">&NodeDEFname; tolerance='<value-of select='@tau'/>' is an absolute value that can only be positive, zero or -1 (for browser choice) </report>
    </rule>

    <rule context="ColorDamper | CoordinateDamper | OrientationDamper | PositionDamper | PositionDamper2D | TexCoordDamper2D">
      <extends rule="Damper"/>
      <extends rule="X3Dversion3.2"/>
    </rule>

    <rule context="ScalarDamper">
      <extends rule="Damper"/>
      <extends rule="X3Dversion3.3"/>
    </rule>
    
    <!-- ========= NURBS nodes ========== -->

    <rule id="NurbsSurfaceGeometryNode" abstract="true">
      <!-- attribute value validation performed by X3D Schema -->
      <let name="embeddedWhiteSpaceCount" value="string-length(normalize-space(translate(*[(local-name='Coordinate') or (local-name='CoordinateDouble')]/@point,',',' '))) - string-length(translate(normalize-space(translate(*[(local-name='Coordinate') or (local-name='CoordinateDouble')]/@point,',',' ')),' ',''))"/>
      <extends rule="DEFtests"/>
      <report test="starts-with(normalize-space(@uDimension),'-')" role="info">&NodeDEFname; uDimension='<value-of select='@duration'/>' cannot be negative </report>
      <report test="starts-with(normalize-space(@vDimension),'-')" role="info">&NodeDEFname; vDimension='<value-of select='@duration'/>' cannot be negative </report>
      <assert test="@USE or ($embeddedWhiteSpaceCount = 0) or not(($embeddedWhiteSpaceCount+1) = (@uDimension * @vDimension))" role="warning">&lt;<name/>/&gt; controlPoint array size (<value-of select='($embeddedWhiteSpaceCount+1)'/>) must equal (@uDimension='<value-of select='@uDimension'/>') * (@vDimension='<value-of select='@vDimension'/>') </assert>
      <report test="(@uClosed='TRUE' )" role="error">&NodeDEFname; uClosed='TRUE' is incorrect, define uClosed='true' instead </report>
      <report test="(@uClosed='FALSE')" role="error">&NodeDEFname; uClosed='FALSE' is incorrect, define uClosed='false' instead </report>
      <report test="(@vClosed='TRUE' )" role="error">&NodeDEFname; vClosed='TRUE' is incorrect, define vClosed='true' instead </report>
      <report test="(@vClosed='FALSE')" role="error">&NodeDEFname; vClosed='FALSE' is incorrect, define vClosed='false' instead </report>
    </rule>

    <rule context="Contour2D">
      <let name="embeddedWhiteSpaceCount" value="string-length(normalize-space(translate(@controlPoint,',',' '))) - string-length(translate(normalize-space(translate(@controlPoint,',',' ')),' ',''))"/>
      <extends rule="DEFtests"/>
      <!-- TODO -->
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='NURBS'][number(@level) ge 4]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='NURBS' level='4'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>

    <rule context="ContourPolyline2D">
      <let name="embeddedWhiteSpaceCount" value="string-length(normalize-space(translate(@controlPoint,',',' '))) - string-length(translate(normalize-space(translate(@controlPoint,',',' ')),' ',''))"/>
      <extends rule="DEFtests"/>
      <report test="(parent::Contour2D)         and not((@containerField='children') or not(@containerField) or (string-length(@containerField) = 0))" role="error">&NodeDEFname; containerField='<value-of select='@containerField'/>' but must be containerField='children' (default value) when parent node is Contour2D </report>
      <report test="(parent::NurbsSweptSurface) and not((@containerField='crossSectionCurve') or (@containerField='trajectoryCurve'))"                 role="error">&NodeDEFname; containerField='<value-of select='@containerField'/>' but must be containerField='crossSectionCurve' or 'trajectoryCurve' when parent node is NurbsSweptSurface </report>
      <report test="(parent::NurbsSwungSurface) and not((@containerField='profileCurve')      or (@containerField='trajectoryCurve'))"                 role="error">&NodeDEFname; containerField='<value-of select='@containerField'/>' but must be containerField='profileCurve' or 'trajectoryCurve' when parent node is NurbsSwungSurface </report>
      <assert test="@USE or ($embeddedWhiteSpaceCount = 0) or (($embeddedWhiteSpaceCount div 2)!=round($embeddedWhiteSpaceCount div 2))" role="error">&lt;&NodeDEFname; controlPoint='<value-of select='@controlPoint'/>' array size (<value-of select='($embeddedWhiteSpaceCount+1)'/>) must be an even number for type MFVec2d </assert>
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='NURBS'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='NURBS' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>

    <rule context="NurbsCurve">
      <let name="embeddedWhiteSpaceCount" value="string-length(normalize-space(translate(@controlPoint,',',' '))) - string-length(translate(normalize-space(translate(@controlPoint,',',' ')),' ',''))"/>
      <extends rule="DEFtests"/>
      <report test="(parent::Shape)         and not((@containerField='geometry') or not(@containerField) or (string-length(@containerField) = 0))" role="error">&NodeDEFname; containerField='<value-of select='@containerField'/>' but must be containerField='geometry' (default value) when parent node is Shape </report>
      <report test="(parent::NurbsSweptSurface) and not(@containerField='trajectoryCurve')"                                                        role="error">&NodeDEFname; containerField='<value-of select='@containerField'/>' but must be containerField='trajectoryCurve' when parent node is NurbsSweptSurface </report>
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='NURBS'][number(@level) ge 1]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='NURBS' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>

    <rule context="NurbsCurve2D">
      <let name="embeddedWhiteSpaceCount" value="string-length(normalize-space(translate(@controlPoint,',',' '))) - string-length(translate(normalize-space(translate(@controlPoint,',',' ')),' ',''))"/>
      <extends rule="DEFtests"/>
      <!-- TODO -->
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='NURBS'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='NURBS' level='3'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>

    <rule context="NurbsPositionInterpolator">
      <extends rule="DEFtests"/>
      <!-- TODO -->
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='NURBS'][number(@level) ge 1]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='NURBS' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>

    <rule context="NurbsOrientationInterpolator">
      <extends rule="DEFtests"/>
      <!-- TODO -->
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='NURBS'][number(@level) ge 1]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='NURBS' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>

    <rule context="NurbsPatchSurface">
      <extends rule="NurbsSurfaceGeometryNode"/>
      <!-- TODO ensure content model correct: no more than one controlPoint node, one texCoord node. Also check corresponding containerField values are correct. -->
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='NURBS'][number(@level) ge 1]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='NURBS' level='1'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>

    <rule context="NurbsSweptSurface">
      <extends rule="DEFtests"/>
      <!-- TODO ensure content model correct: no more than one X3DNurbsControlCurveNode node, one NurbsCurve node. Also check corresponding containerField values are correct. -->
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='NURBS'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='NURBS' level='4'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>

    <rule context="NurbsSwungSurface">
      <extends rule="DEFtests"/>
      <!-- TODO ensure content model correct: no more than two X3DNurbsControlCurveNode children. Also check corresponding containerField values are correct. -->
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='NURBS'][number(@level) ge 3]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='NURBS' level='4'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>

    <rule context="NurbsTrimmedSurface">
      <extends rule="NurbsSurfaceGeometryNode"/>
      <!-- TODO ensure content model correct. Also check corresponding containerField values are correct. -->
      <report test="not((/X3D[@profile='Full']) or (/X3D/head/component[@name='NURBS'][number(@level) ge 4]) or (count(preceding::*[local-name()=$nodeName]) > 0))" role="error">&NodeDEFname; requires at least &lt;component name='NURBS' level='4'/&gt; or &lt;X3D profile='Full'/&gt; </report>
    </rule>

    <!-- TODO
    default weight field: all 1 values, one for each point; point array length / 3
    
    If the length of the weight vector is 0, the default weight 1.0 is assumed for each control point, thus defining a non-Rational curve. If the number of weight values is less than the number of control points, all weight values shall be ignored and a value of 1.0 shall be used.
    
    27.2.3 last paragraph on knots
    knots defines the knot vector. The number of knots shall be equal to the number of control points plus the order of the curve. The order shall be non-decreasing. Within the knot vector there may not be more than order−1 consecutive knots of equal value. If the length of a knot vector is 0 or not the exact number required (numcontrolPoint + order), a default uniform knot vector is computed.
    Nurbs Book p.66 bottom definition of uniform knot: uniformly spaced values
    
    default knots: default range [0..1] ? add normalize button, largest range 0..1, other scaled appropriately
    p. 85, 89: different uniformly spaced knots for different degrees of polynomials
    
    27.4.1 Contour2D
    27.4.3 CoordinateDouble
    27.4.5 NurbsCurve2D
    27.4.6 NurbsOrientationInterpolator
    27.4.8 NurbsPositionInterpolator
    27.4.9 NurbsSet
    27.4.10 NurbsSurfaceInterpolator
    27.4.11 NurbsSweptSurface
    27.4.12 NurbsSwungSurface
    27.4.13 NurbsTextureCoordinate

    -->

    <!-- ========= Particle System nodes ========== -->

    <rule context="ParticleSystem">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
      <!-- X3D4 Field name changes https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#fieldNameChanges -->
      <report test="$isX3D3 and (count(*[@containerField = 'color']       ) > 0)" role="error">&NodeDEFname; in X3D version='<value-of select='/X3D/@version'/>' contains child Color/ColorRGBA node with containerField='color' rather than 'colorRamp', which is only allowed value in X3D3 </report>
      <report test="$isX3D4 and (count(*[@containerField = 'colorRamp']   ) > 0)" role="error">&NodeDEFname; in X3D version='<value-of select='/X3D/@version'/>' contains child Color/ColorRGBA node with containerField='colorRamp' rather than 'color', which is only allowed value in X3D4 </report>
      <report test="$isX3D3 and (count(*[@containerField = 'texCoord']    ) > 0)" role="error">&NodeDEFname; in X3D version='<value-of select='/X3D/@version'/>' contains child TextureCoordinate node with containerField='texCoord' rather than 'texCoordRamp', which is only allowed value in X3D3 </report>
      <report test="$isX3D4 and (count(*[@containerField = 'texCoordRamp']) > 0)" role="error">&NodeDEFname; in X3D version='<value-of select='/X3D/@version'/>' contains child TextureCoordinate node with containerField='texCoordRamp' rather than 'texCoord', which is only allowed value in X3D4 </report>
      <!-- TODO extraneous-quote tests for SFString enumeration fields -->
	  <!-- TODO check ordering that Appearance child occurs first -->
      <report test="contains(@geometryType, '&quot;')" role="error">&NodeDEFname; geometryType='<value-of select='@geometryType'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <!-- TODO more rules -->
    </rule>

    <!-- TODO rule for (BoundedPhysicsModel | ForcePhysicsModel | WindPhysicsModel) must have parent ParticleSystem -->

    <!-- ========= Volume Rendering nodes ========== -->

    <!-- ========= abstract: VolumeDataNode ========== -->
    <rule id="VolumeDataNode" abstract="true">
      <let name="embeddedWhiteSpaceCount" value="string-length(normalize-space(translate(@dimensions,',',' '))) - string-length(translate(normalize-space(translate(@dimensions,',',' ')),' ',''))"/>
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.3"/>
      <!-- TODO ensure content model correct and corresponding containerField values are correct for each implementing node. -->
      <assert test="@USE or not(@dimensions) or ($embeddedWhiteSpaceCount = 2)" role="warning">&NodeDEFname; dimensions='<value-of select='@dimensions'/>' must have 3 values </assert>
      <report test="starts-with(normalize-space(@dimensions),'-') or contains(normalize-space(@dimensions),' -')" role="info">&NodeDEFname; dimensions='<value-of select='@dimensions'/>' cannot include a negative value </report>
    </rule>

    <rule context="BlendedVolumeStyle">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.3"/>
      <!-- extraneous-quote tests for SFString enumeration fields -->
      <report test="contains(@weightFunction1, '&quot;')" role="error">&NodeDEFname; weightFunction1='<value-of select='@weightFunction1'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <report test="contains(@weightFunction2, '&quot;')" role="error">&NodeDEFname; weightFunction2='<value-of select='@weightFunction2'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <!-- rules about contained nodes -->
      <report test="(count(*[ends-with(local-name(),'VolumeStyle')][@containerField = 'renderStyle']) > 1)"         role="error">&NodeDEFname; can only contain one child X3DComposableVolumeRenderStyleNode node with containerField='renderStyle' </report>
      <report test="(count(*[ends-with(local-name(),'Texture3D')][@containerField = 'voxels']) > 1)"                role="error">&NodeDEFname; can only contain one child X3DTexture3DNode node with containerField='voxels' </report>
      <report test="(count(*[ends-with(local-name(),'Texture')][@containerField = 'weightTransferFunction1']) > 1)" role="error">&NodeDEFname; can only contain one child X3DTexture2DNode node with containerField='weightTransferFunction1' </report>
      <report test="(count(*[ends-with(local-name(),'Texture')][@containerField = 'weightTransferFunction2']) > 1)" role="error">&NodeDEFname; can only contain one child X3DTexture2DNode node with containerField='weightTransferFunction2' </report>
      <!-- additional rules -->
      <report test="contains(@weightFunction1,'ALPHA0') or contains(@weightFunction2,'ALPHA0')" role="error">&NodeDEFname; BlendedVolumeStyle weightFunction enumeration constants for ALPHA0/ALPHA1 need correction to ALPHA1/ALPHA2 </report>
    </rule>

    <rule context="ProjectionVolumeStyle">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.3"/>
      <!-- extraneous-quote tests for SFString enumeration fields -->
      <report test="contains(@type, '&quot;')" role="error">&NodeDEFname; type='<value-of select='@type'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <!-- TODO more rules -->
    </rule>

    <rule context="ShadedVolumeStyle">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.3"/>
      <!-- TODO ensure content model correct and corresponding containerField values are correct. -->
      <!-- extraneous-quote tests for SFString enumeration fields -->
      <report test="contains(@phaseFunction, '&quot;')" role="error">&NodeDEFname; phaseFunction='<value-of select='@phaseFunction'/>' is erroneous since the contained enumeration value must not include "quotation marks" </report>
      <report test="Appearance/Material" role="error">&NodeDEFname; contains Appearance/Material children, instead can only contain Material with no Appearance </report>
      <!-- TODO more rules -->
    </rule>

    <rule context="ISOSurfaceVolumeData">
      <report test="not(@USE) and true()" role="error">&NodeDEFname; has incorrect capitalization, change to IsoSurfaceVolumeData </report>
    </rule>

    <rule context="IsoSurfaceVolumeData">
      <extends rule="VolumeDataNode"/>
      <report test="count(ComposedTexture3D | ImageTexture3D | PixelTexture3D) > 1" role="error">&NodeDEFname; can only contain one (ComposedTexture3D | ImageTexture3D | PixelTexture3D) node (for voxels) </report>
    </rule>

    <rule context="SegmentedVolumeData">
      <extends rule="VolumeDataNode"/>
      <report test="count(ComposedTexture3D | ImageTexture3D | PixelTexture3D) > 2" role="error">&NodeDEFname; cannot contain more than 2 (ComposedTexture3D | ImageTexture3D | PixelTexture3D) nodes (one for containerField = 'gradients' and one for containerField = 'voxels') </report>
      <report test="(count(*[ends-with(local-name(),'Texture3D')][@containerField = 'segmentIdentifiers']) > 1)" role="error">&NodeDEFname; can only contain one child X3DTexture3DNode node with containerField='segmentIdentifiers' </report>
      <report test="(count(*[ends-with(local-name(),'Texture3D')][@containerField = 'voxels']) > 1)" role="error">&NodeDEFname; can only contain one child X3DTexture3DNode node with containerField='voxels' </report>
    </rule>

    <rule context="VolumeData">
      <extends rule="VolumeDataNode"/>
      <report test="count(ComposedTexture3D | ImageTexture3D | PixelTexture3D) > 2" role="error">&NodeDEFname; cannot contain more than 2 (ComposedTexture3D | ImageTexture3D | PixelTexture3D) nodes (one for containerField = 'segmentIdentifiers' and one for containerField = 'voxels') </report>
    </rule>

    <rule context="BoundaryEnhancementVolumeStyle | CartoonVolumeStyle | ComposedVolumeStyle | EdgeEnhancementVolumeStyle |
                   OpacityMapVolumeStyle | SilhouetteEnhancementVolumeStyle | ToneMappedVolumeStyle">
      <!-- attribute value validation performed by X3D Schema -->
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.3"/>
    </rule>

    <!-- 3D texture nodes TODO finish -->

    <!-- ========= abstract: X3DTexture3DNode ========== -->
    <rule id="X3DTexture3DNode" abstract="true">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.1"/>
      <!-- TODO additional containerField rules -->
      <report test="(parent::IsoSurfaceVolumeData) and not(@containerField = 'voxels') and not(@containerField = 'gradients')" role="error">&NodeDEFname; illegal containerField='<value-of select='@containerField'/>' with parent IsoSurfaceVolumeData, allowed values are containerField='voxels' and containerField='gradients' </report>
      <report test="(parent::SegmentedVolumeData) and not(@containerField = 'voxels') and not(@containerField = 'segmentIdentifiers')" role="error">&NodeDEFname; illegal containerField='<value-of select='@containerField'/>' with parent SegmentedVolumeData, allowed values are containerField='voxels' and containerField='segmentIdentifiers' </report>
      <report test="parent::VolumeData and not(@containerField = 'voxels')" role="error">&NodeDEFname; illegal containerField='<value-of select='@containerField'/>' with parent VolumeData, allowed value is containerField='voxels' </report>
    </rule>
    
    <rule context="ComposedTexture3D">
      <extends rule="X3DTexture3DNode"/>
      <report test="count(*[local-name() = 'front'])  > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='front' </report>
      <report test="count(*[local-name() = 'back'])   > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='back' </report>
      <report test="count(*[local-name() = 'left'])   > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='left' </report>
      <report test="count(*[local-name() = 'right'])  > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='right' </report>
      <report test="count(*[local-name() = 'top'])    > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='top' </report>
      <report test="count(*[local-name() = 'bottom']) > 1" role="error">&NodeDEFname; contains more than one X3DTexture2DNode child node with containerField='bottom' </report>
    </rule>
    
    <rule context="ImageTexture3D">
      <extends rule="X3DTexture3DNode"/>
    </rule>
    
    <rule context="PixelTexture3D">
      <extends rule="X3DTexture3DNode"/>
    </rule>
        
    <!-- TODO integrate using regular patterns -->
    <!-- ========= X3Dversion3.1 nodes ========== -->
    <rule context="ComposedCubeMapTexture | ComposedShader | ComposedTexture3D | FloatVertexAttribute | FogCoordinate | GeneratedCubeMapTexture |
                   ImageCubeMapTexture | ImageTexture3D | Matrix3VertexAttribute | Matrix4VertexAttribute | PackagedShader | PixelTexture3D |
                   ProgramShader | ShaderPart | ShaderProgram |
                   TextureCoordinate3D | TextureCoordinate4D | TextureTransform3D | TextureTransformMatrix3D">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.1"/>
      <assert test="(/X3D/@version='3.1') or (/X3D/@version='3.2') or (/X3D/@version='3.3') or (/X3D/@version='4.0')" role="error">contained node requires X3D version 3.1 or higher, but found version='<value-of select='/X3D/@version'/>' </assert>
      <report test="(@repeatS='TRUE' )" role="error">&NodeDEFname; repeatS='TRUE' is incorrect, define repeatS='true' instead </report>
      <report test="(@repeatS='FALSE')" role="error">&NodeDEFname; repeatS='FALSE' is incorrect, define repeatS='false' instead </report>
      <report test="(@repeatT='TRUE' )" role="error">&NodeDEFname; repeatT='TRUE' is incorrect, define repeatT='true' instead </report>
      <report test="(@repeatT='FALSE')" role="error">&NodeDEFname; repeatT='FALSE' is incorrect, define repeatT='false' instead </report>
      <report test="(@repeatR='TRUE' )" role="error">&NodeDEFname; repeatR='TRUE' is incorrect, define repeatR='true' instead </report>
      <report test="(@repeatR='FALSE')" role="error">&NodeDEFname; repeatR='FALSE' is incorrect, define repeatR='false' instead </report>
      <!-- TODO break out rules for different nodes having field definitions and contained CDATA text. -->
   </rule>
   
<!-- Need to rewrite these composite rules on a node-by-node basis, also need to check that ALL v3.2 nodes included in legal node tests
     and update coverage stylesheet. -->
	 
<!-- ========== X3Dversion3.2 nodes ========== -->
    <rule context="BoundedPhysicsModel | ConeEmitter | ExplosionEmitter | ForcePhysicsModel">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
	  <!-- TODO -->
    </rule>
    <rule context="Layer | LayerSet | Layout | LayoutGroup | LayoutLayer | LinePickSensor |
                   PickableGroup | PointEmitter | PointPickSensor | PolylineEmitter | PrimitivePickSensor">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
	  <!-- TODO -->
    </rule>
    <rule context="ScreenFontStyle | ScreenGroup">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
	  <!-- TODO -->
    </rule>
    <rule context="SurfaceEmitter | Viewport | VolumeEmitter | VolumePickSensor | WindPhysicsModel">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion3.2"/>
	  <!-- TODO -->
    </rule>
<!--
  TODO
  Warning: only one LayerSet node is allowed in a scene, and it shall be a root node at the top of the scene graph.
  
  Check appliedParamaterValues in MFString appliedParameters field for CollisionCollection and Contact.  Also check that regular hyphen used rather than mdash.
  Also put a rule in Schema documentation/encoding generator that reports such anomalies.
  
  X3DPickSensorNode: only one pickingGeometry node
 -->

<!-- ========== X3Dversion4.0 nodes ========== -->

    <rule id="X3DSoundProcessingNode" abstract="true">
      <extends rule="DEFtests"/>
      <extends rule="X3Dversion4.0"/>
      <extends rule="enabledOnTests"/>
      <extends rule="descriptionTests"/>
      <report test="(string-length(@Q) > 0)" role="error">&NodeDEFname; field Q='<value-of select='@Q'/>' is misnamed, correct name is qualityFactor </report>
    </rule>

    <rule context="Analyzer">
      <extends rule="X3DSoundProcessingNode"/>
      <report test="true()" role="error">&NodeDEFname; (with a 'z') is incorrectly named, actual spelling is Analyser (with an 's') </report>
    </rule>

    <rule context="Analyser">
      <extends rule="X3DSoundProcessingNode"/>
      <report test="not(number(@tailTime) = 0)" role="error">&NodeDEFname; tailTime='<value-of select='@tailTime'/>' must always be 0 for <value-of select='local-name()'/> </report>
      <report test="(string-length(@description) = 0) and not(boolean(IS/connect/@nodeField='description')) and not(@USE) and ((local-name()='PlaneSensor'))" role="warning">&NodeDEFname; is missing description to explain purpose of this audio-graph node </report>
    </rule>

    <!-- TODO audio graphs -->
    <rule context="AcousticProperties |  AudioDestination | BiquadFilter | BufferAudioSource | 
            ChannelMerger | ChannelSelector | ChannelSplitter | Convolver | Delay | DynamicsCompressor | 
            Gain | ListenerPointSource | MicrophoneSource | OscillatorSource | PeriodicWave | SpatialSound | 
            StreamAudioDestination | StreamAudioSource | WaveShaper">
      <extends rule="X3DSoundProcessingNode"/>
      <report test="(count(*[(local-name() = 'AudioClip')   ][@containerField = 'source']) > 0)" role="error">&NodeDEFname; children include AudioClip node with default containerField='source' but must be containerField='children' instead </report>
      <report test="(count(*[(local-name() = 'MovieTexture')][@containerField = 'source']) > 0)" role="error">&NodeDEFname; children include MovieTexture node with default containerField='source' but must be containerField='children' instead  </report>
      <report test="(string-length(@description) = 0) and not(boolean(IS/connect/@nodeField='description')) and not(@USE) and ((local-name()='PlaneSensor'))" role="warning">&NodeDEFname; is missing description to explain purpose of this audio-graph node </report>
    </rule>

    <!-- ========= abstract: profileTests ========== -->
    <rule id="profileTests" abstract="true">
      <!-- compute needed profile -->
      <let name="fullProfile" value="
           (//Arc2D                         and not(/X3D/head/component[@name='Geometry2D']          [number(@level) ge 2]))
		or (//ArcClose2D                    and not(/X3D/head/component[@name='Geometry2D']          [number(@level) ge 2]))
		or (//Circle2D                      and not(/X3D/head/component[@name='Geometry2D']          [number(@level) ge 2]))
		or (//ClipPlane                     and not(/X3D/head/component[@name='Rendering']           [number(@level) ge 5]))
		or (//Contour2D                     and not(/X3D/head/component[@name='NURBS']               [number(@level) ge 4]))
		or (//ContourPolyline2D             and not(/X3D/head/component[@name='NURBS']               [number(@level) ge 3]))
		or (//CoordinateDouble              and not(/X3D/head/component[@name='NURBS']               [number(@level) ge 1]))
		or (//CoordinateInterpolator2D      and not(/X3D/head/component[@name='Interpolation']       [number(@level) ge 3]))
        or (//DISEntityManager              and not(/X3D/head/component[@name='DIS']                 [number(@level) ge 2]))
        or (//DISEntityTypeMapping          and not(/X3D/head/component[@name='DIS']                 [number(@level) ge 2]))
		or (//Disk2D                        and not(/X3D/head/component[@name='Geometry2D']          [number(@level) ge 2]))
		or (//EspduTransform                and not(/X3D/head/component[@name='DIS']                 [number(@level) ge 1]))
		or (//FillProperties                and not(/X3D/head/component[@name='Shape']               [number(@level) ge 3]))
		or (//FogCoordinate                 and not(/X3D/head/component[@name='EnvironmentalEffects'][number(@level) ge 3]))
		or (//GeoLocation                   and not(/X3D/head/component[@name='Geospatial']          [number(@level) ge 1]))
		or (//GeoLOD                        and not(/X3D/head/component[@name='Geospatial']          [number(@level) ge 1]))
		or (//GeoMetadata                   and not(/X3D/head/component[@name='Geospatial']          [number(@level) ge 1]))
		or (//GeoOrigin                     and not(/X3D/head/component[@name='Geospatial']          [number(@level) ge 1]))
		or (//GeoPositionInterpolator       and not(/X3D/head/component[@name='Geospatial']          [number(@level) ge 1]))
		or (//GeoProximitySensor            and not(/X3D/head/component[@name='Geospatial']          [number(@level) ge 2]))
		or (//GeoTouchSensor                and not(/X3D/head/component[@name='Geospatial']          [number(@level) ge 1]))
		or (//GeoTransform                  and not(/X3D/head/component[@name='Geospatial']          [number(@level) ge 2]))
		or (//GeoViewpoint                  and not(/X3D/head/component[@name='Geospatial']          [number(@level) ge 1]))
        or (//HAnimDisplacer                and not(/X3D[starts-with(@version,'3')]/head/component[@name='H-Anim'][number(@level) ge 1] or 
                                                    /X3D[starts-with(@version,'4')]/head/component[@name='HAnim' ][number(@level) ge 1]))
		or (//HAnimHumanoid                 and not(/X3D[starts-with(@version,'3')]/head/component[@name='H-Anim'][number(@level) ge 1] or 
                                                    /X3D[starts-with(@version,'4')]/head/component[@name='HAnim' ][number(@level) ge 1]))
		or (//HAnimJoint                    and not(/X3D[starts-with(@version,'3')]/head/component[@name='H-Anim'][number(@level) ge 1] or 
                                                    /X3D[starts-with(@version,'4')]/head/component[@name='HAnim' ][number(@level) ge 1]))
		or (//HAnimSegment                  and not(/X3D[starts-with(@version,'3')]/head/component[@name='H-Anim'][number(@level) ge 1] or 
                                                    /X3D[starts-with(@version,'4')]/head/component[@name='HAnim' ][number(@level) ge 1]))
		or (//HAnimSite                     and not(/X3D[starts-with(@version,'3')]/head/component[@name='H-Anim'][number(@level) ge 1] or 
                                                    /X3D[starts-with(@version,'4')]/head/component[@name='HAnim' ][number(@level) ge 1]))
		or (//HAnimMotion                   and not(/X3D[starts-with(@version,'3')]/head/component[@name='H-Anim'][number(@level) ge 2] or 
                                                    /X3D[starts-with(@version,'4')]/head/component[@name='HAnim' ][number(@level) ge 2]))
		or (//LocalFog                      and not(/X3D/head/component[@name='EnvironmentalEffects'][number(@level) ge 3]))
		or (//NurbsCurve                    and not(/X3D/head/component[@name='NURBS']               [number(@level) ge 1]))
		or (//NurbsCurve2D                  and not(/X3D/head/component[@name='NURBS']               [number(@level) ge 3]))
		or (//NurbsOrientationInterpolator  and not(/X3D/head/component[@name='NURBS']               [number(@level) ge 1]))
		or (//NurbsPatchSurface             and not(/X3D/head/component[@name='NURBS']               [number(@level) ge 1]))
		or (//NurbsPositionInterpolator     and not(/X3D/head/component[@name='NURBS']               [number(@level) ge 1]))
		or (//NurbsSet                      and not(/X3D/head/component[@name='NURBS']               [number(@level) ge 2]))
		or (//NurbsSurfaceInterpolator      and not(/X3D/head/component[@name='NURBS']               [number(@level) ge 1]))
		or (//NurbsSweptSurface             and not(/X3D/head/component[@name='NURBS']               [number(@level) ge 3]))
		or (//NurbsSwungSurface             and not(/X3D/head/component[@name='NURBS']               [number(@level) ge 3]))
		or (//NurbsTextureCoordinate        and not(/X3D/head/component[@name='NURBS']               [number(@level) ge 1]))
		or (//NurbsTrimmedSurface           and not(/X3D/head/component[@name='NURBS']               [number(@level) ge 4]))
		or (//PositionInterpolator2D        and not(/X3D/head/component[@name='Interpolation']       [number(@level) ge 3]))
		or (//ReceiverPdu                   and not(/X3D/head/component[@name='DIS']                 [number(@level) ge 1]))
		or (//SignalPdu                     and not(/X3D/head/component[@name='DIS']                 [number(@level) ge 1]))
		or (//StaticGroup                   and not(/X3D/head/component[@name='Grouping']            [number(@level) ge 3]))
		or (//TextureBackground             and not(/X3D/head/component[@name='EnvironmentalEffects'][number(@level) ge 3]))
		or (//*[contains(local-name(),'TextureProjector')]
                                            and not(/X3D/head/component[@name='TextureProjector']    [number(@level) ge 1]))
		or (//TransformSensor               and not(/X3D/head/component[@name='EnvironmentalSensor'] [number(@level) ge 3]))
		or (//TransmitterPdu                and not(/X3D/head/component[@name='DIS']                 [number(@level) ge 1]))
        
		or ((//Analyser        or //AudioBufferSource or //AudioDestination or //BiquadFilter       or //ChannelMerger       or //ChannelSelector  or 
             //ChannelSplitter or //Convolver         or //Delay or //DynamicsCompressor or //Gain  or //ListenerPointSource or //MicrophoneSource or 
             //PeriodicWave    or //OscillatorSource  or //SpatialSound or //StreamAudioDestination or //StreamAudioSource   or //WaveShaper)
                                            and not(/X3D/head/component[@name='Sound']               [number(@level) ge 2]))"/>
	  
      <let name="immersiveProfile" value="not($fullProfile) and 
       ((//ExternProtoDeclare               and not(/X3D/head/component[@name='Core']         [number(@level) ge 2]))
		or (//field                         and not(/X3D/head/component[@name='Scripting']    [number(@level) ge 1] or
                                                    /X3D/head/component[@name='Core']         [number(@level) ge 2]))
		or (//fieldValue                    and not(/X3D/head/component[@name='Core']         [number(@level) ge 2]))
		or (//IS                            and not(/X3D/head/component[@name='Core']         [number(@level) ge 2]))
		or (//connect                       and not(/X3D/head/component[@name='Core']         [number(@level) ge 2]))
		or (//ProtoDeclare                  and not(/X3D/head/component[@name='Core']         [number(@level) ge 2]))
		or (//ProtoInterface                and not(/X3D/head/component[@name='Core']         [number(@level) ge 2]))
		or (//ProtoBody                     and not(/X3D/head/component[@name='Core']         [number(@level) ge 2]))
		or (//ProtoInstance                 and not(/X3D/head/component[@name='Core']         [number(@level) ge 2]))
		or (//AudioClip                     and not(/X3D/head/component[@name='Sound']        [number(@level) ge 1]))
		or (//Billboard                     and not(/X3D/head/component[@name='Navigation']   [number(@level) ge 2]))
		or (//Collision                     and not(/X3D/head/component[@name='Navigation']   [number(@level) ge 2]))
		or (//Extrusion                     and not(/X3D/head/component[@name='Geometry3D']   [number(@level) ge 4]))
		or (//Fog                           and not(/X3D/head/component[@name='EnvironmentalEffects'][number(@level) ge 2]))
		or (//FontStyle                     and not(/X3D/head/component[@name='Text']         [number(@level) ge 1]))
		or (//LineProperties                and not(/X3D/head/component[@name='Shape']        [number(@level) ge 2]))
		or (//IMPORT                        and not(/X3D/head/component[@name='Networking']   [number(@level) ge 3]))
		or (//EXPORT                        and not(/X3D/head/component[@name='Networking']   [number(@level) ge 3]))
		or (//LoadSensor                    and not(/X3D/head/component[@name='Networking']   [number(@level) ge 3]))
		or (//LOD                           and not(/X3D/head/component[@name='Navigation']   [number(@level) ge 2]))
		or (//MovieTexture                  and not(/X3D/head/component[@name='Texturing']    [number(@level) ge 3]))
		or (//Polyline2D                    and not(/X3D/head/component[@name='Geometry2D']   [number(@level) ge 1]))
		or (//PointProperties               and not(/X3D/head/component[@name='Shape']        [number(@level) ge 5]))
		or (//Polypoint2D                   and not(/X3D/head/component[@name='Geometry2D']   [number(@level) ge 1]))
		or (//Rectangle2D                   and not(/X3D/head/component[@name='Geometry2D']   [number(@level) ge 1]))
		or (//Script                        and not(/X3D/head/component[@name='Scripting']    [number(@level) ge 1]))
		or (//Sound                         and not(/X3D/head/component[@name='Sound']        [number(@level) ge 1]))
		or (//Switch                        and not(/X3D/head/component[@name='Grouping']     [number(@level) ge 2]))
		or (//Text                          and not(/X3D/head/component[@name='Text']         [number(@level) ge 1]))
		or (//TriangleSet2D                 and not(/X3D/head/component[@name='Geometry2D']   [number(@level) ge 1]))
		or (//VisibilitySensor              and not(/X3D/head/component[@name='EnvironmentalSensor'][number(@level) ge 2])))"/>
      
      <let name="interactiveProfile"    value="not($fullProfile) and not($immersiveProfile) and 
       (
		  (//Anchor					        and not(/X3D/head/component[@name='Networking']   [number(@level) ge 1]))
		or //BooleanFilter
		or //BooleanSequencer
		or //BooleanToggle
		or //BooleanTrigger
		or //CylinderSensor
		or //ElevationGrid
		or (//Inline				        and not(/X3D/head/component[@name='Networking']   [number(@level) ge 2]))
		or //IntegerSequencer
		or //IntegerTrigger
		or //KeySensor
		or //PlaneSensor
		or //PointLight
		or (//ProximitySensor               and not(/X3D/head/component[@name='EnvironmentalSensor'][number(@level) ge 1]))
		or //SphereSensor
		or //SpotLight
		or //StringSensor
		or //Switch
		or //TimeTrigger
		or //TouchSensor)"/>
      <let name="cadComponentNodes" value="
       (           //CADAssembly
		or //CADFace
		or //CADLayer
		or //CADPart
		or //IndexedQuadSet
		or //QuadSet)"/>
      <let name="medicalComponentNodes" value="
       (           //BlendedVolumeStyle
		or //BoundaryEnhancementVolumeStyle
		or //CartoonVolumeStyle
		or //ComposedVolumeStyle
		or //EdgeEnhancementVolumeStyle
		or //IsoSurfaceVolumeData
		or //OpacityMapVolumeStyle
		or //ProjectionVolumeStyle
		or //SegmentedVolumeData
		or //ShadedVolumeStyle
		or //SilhouetteEnhancementVolumeStyle
		or //ToneMappedVolumeStyle
		or //VolumeData)"/>
      <let name="interchangeProfile"    value="not($fullProfile) and not($immersiveProfile) and not($interactiveProfile) and not($cadComponentNodes) and
       (           //Appearance
		or //Background
		or //Box
		or //Color
		or //ColorInterpolator
		or //ColorRGBA
		or //Cone
		or //Coordinate
		or //CoordinateInterpolator
		or //Cylinder
		or //DirectionalLight
		or //Group
		or //ImageTexture
		or //IndexedFaceSet
		or //IndexedLineSet
		or //IndexedTriangleFanSet
		or //IndexedTriangleSet
		or //IndexedTriangleStripSet
		or //LineSet
		or //Material
		or //MultiTexture
		or //MultiTextureCoordinate
		or //MultiTextureTransform
		or //NavigationInfo
		or //Normal
		or //NormalInterpolator
		or //OrientationInterpolator
		or //PixelTexture
		or //PointSet
		or //PositionInterpolator
		or //ScalarInterpolator
		or //Shape
		or //Sphere
		or //TextureCoordinate
		or //TextureCoordinateGenerator
		or //TextureTransform
		or //TimeSensor
		or //Transform
		or //TriangleFanSet
		or //TriangleSet
		or //TriangleStripSet
		or //Viewpoint
		or //WorldInfo)"/>
      <!-- note that CADInterchange profile is quite a bit different from Interchange profile, with no subset/superset relationship -->
      <let name="cadInterchangeProfile" value="not($fullProfile) and not($immersiveProfile) and not($interactiveProfile) and not($interchangeProfile) and
       (   $cadComponentNodes
		or //Anchor
		or //Appearance
		or //Billboard
		or //Collision
		or //Color
		or //ColorRGBA
		or //Coordinate
		or //DirectionalLight
		or //FragmentShader
		or //Group
		or //ImageTexture
		or //IndexedLineSet
		or //IndexedTriangleFanSet
		or //IndexedTriangleSet
		or //IndexedTriangleStripSet
		or //Inline
		or //LineProperties
		or //LineSet
		or //LOD
		or //Material
		or //MetadataBoolean
		or //MetadataDouble
		or //MetadataFloat
		or //MetadataInteger
		or //MetadataSet
		or //MetadataString
		or //MultiShader
		or //MultiTexture
		or //MultiTextureCoordinate
		or //MultiTextureTransform
		or //NavigationInfo
		or //Normal
		or //PixelTexture
		or //PointSet
		or //Shader
		or //ShaderAppearance
		or //Shape
		or //TextureCoordinate
		or //TextureCoordinateGenerator
		or //TextureTransform
		or //Transform
		or //TriangleFanSet
		or //TriangleSet
		or //TriangleStripSet
		or //VertexShader
		or //Viewpoint
		or //WorldInfo)"/>
      <!-- note that MedicalInterchange profile is quite a bit different from Interchange profile, with no subset/superset relationship -->
      <let name="medicalInterchangeProfile" value="not($fullProfile) and not($immersiveProfile) and not($interactiveProfile) and not($interchangeProfile) and
       (   $medicalComponentNodes
		or //Anchor
		or //Arc2D
		or //ArcClose2D
		or //Appearance
		or //Background
		or //Billboard
		or //BooleanFilter
		or //BooleanSequencer
		or //BooleanToggle
		or //BooleanTrigger
		or //Circle2D
		or //ClipPlane
		or //Collision
		or //Color
		or //ColorRGBA
		or //ColorInterpolator
		or //CompositeTexture3D
		or //Cone
		or //Coordinate
		or //CoordinateDouble
		or //CoordinateInterpolator
		or //Cylinder
		or //DirectionalLight
		or //Disk2D
		or //FillProperties
		or //FontStyle
		or //Group
		or //ImageTexture
		or //ImageTexture3D
		or //IndexedFaceSet
		or //IndexedLineSet
		or //IndexedTriangleFanSet
		or //IndexedTriangleSet
		or //IndexedTriangleStripSet
		or //Inline
		or //IntegerSequencer
		or //IntegerTrigger
		or //LineProperties
		or //LineSet
		or //LOD
		or //Material
		or //MultiTexture
		or //MultiTextureCoordinate
		or //MultiTextureTransform
		or //NavigationInfo
		or //Normal
		or //NormalInterpolator
		or //OrientationInterpolator
		or //OrthoViewpoint
		or //PixelTexture
		or //PixelTexture3D
		or //PointSet
		or //Polyline2D
		or //Polypoint2D
		or //PositionInterpolator
		or //Rectangle2D
		or //ScalarInterpolator
		or //Shape
		or //Sphere
		or //StaticGroup
		or //Switch
		or //Text
		or //TextureCoordinate
		or //TextureCoordinate3D
		or //TextureCoordinate4D
		or //TextureCoordinateGenerator
		or //TextureMatrixTransform
		or //TextureProperties
		or //TextureTransform
		or //TextureTransform3D
		or //TimeSensor
		or //TimeTrigger
		or //Transform
		or //TriangleFanSet
		or //TriangleSet
		or //TriangleStripSet
		or //Viewpoint
		or //ViewpointGroup
		or //WorldInfo)"/>
      <let name="coreProfile"           value="not($fullProfile) and not($immersiveProfile) and not($interactiveProfile) and not($cadComponentNodes) and not($interchangeProfile) and
       (   //component
		or //head
		or //meta
		or //MetadataBoolean
		or //MetadataDouble
		or //MetadataFloat
		or //MetadataInteger
		or //MetadataSet
		or //MetadataString
		or //ROUTE
		or //X3D)"/>
      <let name="profileLegal"  value="(@profile='Full') or (@profile='Immersive') or (@profile='Interactive') or (@profile='CADInterchange') or (@profile='Interchange') or (@profile='Core')"/>
      <let name="profileMatch"  value="(@profile='Full'               and ($fullProfile)) or
                                       (@profile='Immersive'          and ($immersiveProfile)) or
                                       (@profile='Interactive'        and ($interactiveProfile)) or
                                       (@profile='CADInterchange'     and ($cadInterchangeProfile)) or
                                       (@profile='MedicalInterchange' and ($medicalInterchangeProfile)) or
                                       (@profile='Interchange'        and ($interchangeProfile)) or
                                       (@profile='Core'               and $coreProfile)"/>
      <let name="profileSufficient" 
                                value="($profileMatch) or (($profileLegal) and
          ((@profile='Full')  or
          ((@profile='Immersive')                     and ($coreProfile or $interchangeProfile or $interactiveProfile or $immersiveProfile)) or
          ((@profile='Immersive') and
           (/X3D/head/component[@name='CADGeometry']) and ($coreProfile or (    $cadInterchangeProfile))) or
          ((@profile='CADInterchange')                and ($coreProfile or (    $cadInterchangeProfile))) or
          ((@profile='MedicalInterchange')            and ($coreProfile or ($medicalInterchangeProfile))) or
          ((@profile='Interactive')                   and ($coreProfile or (       $interchangeProfile) or ($interactiveProfile))) or
          ((@profile='Interchange')                   and ($coreProfile or (       $interchangeProfile))) or
          ((@profile='Core')                          and ($coreProfile))))"/>
<!--  diagnostics:
      <report test="not(@USE) and true()" role="info"> Diagnostic:  found $fullProfile=<value-of select='$fullProfile'/>, $immersiveProfile=<value-of select='$immersiveProfile'/>,  $interactiveProfile=<value-of select='$interactiveProfile'/>, $cadInterchangeProfile=<value-of select='$cadInterchangeProfile'/>, $interchangeProfile=<value-of select='$interchangeProfile'/>, $coreProfile=<value-of select='$coreProfile'/> </report>
      <report test="not(@USE) and true()" role="info"> Diagnostic: actual /X3D/@profile=<value-of select='/X3D/@profile'/>, found $profileLegal=<value-of select='$profileLegal'/>, $profileMatch=<value-of select='$profileMatch'/>,  $profileSufficient=<value-of select='$profileSufficient'/> </report>
-->
      <!-- compare declared profile to measured profile -->
      <report test="not($profileSufficient) and not(/X3D/head/component)" role="error">&lt;X3D profile='<value-of select="@profile"/>'&gt; doesn't match contained nodes, increase profile or add needed &lt;X3D&gt;&lt;head&gt;&lt;component&gt; statements </report>
 <!-- <report test="not($profileSufficient) and    (/X3D/head/component)" role="info" >&lt;X3D profile='<value-of select="@profile"/>'&gt; doesn't match contained nodes, increase profile or ensure that &lt;X3D&gt;&lt;head&gt;&lt;component&gt; statements cover all nodes at higher levels </report> -->
      <!-- note parent scene profile must be equal or greater than Inline child scene profile, so those possibilities are allowed without report -->
      <report test="$profileLegal and not($profileMatch)      and not(/X3D/head/component) and $fullProfile"               role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; is defined, but nodes in scene have actual profile='Full' </report>
      <report test="$profileLegal and not($profileMatch)      and not(/X3D/head/component) and $immersiveProfile"          role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; is defined, but nodes in scene have actual profile='Immersive' </report>
      <report test="$profileLegal and not($profileMatch)      and not(/X3D/head/component) and $interactiveProfile"        role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; is defined, but nodes in scene have actual profile='Interactive' </report>
      <report test="$profileLegal and not($profileMatch)      and not(/X3D/head/component) and $cadInterchangeProfile"     role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; is defined, but nodes in scene have actual profile='CADInterchange' </report>
      <report test="$profileLegal and not($profileMatch)      and not(/X3D/head/component) and $medicalInterchangeProfile" role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; is defined, but nodes in scene have actual profile='MedicalInterchange' </report>
      <report test="$profileLegal and not($profileMatch)      and not(/X3D/head/component) and $interchangeProfile"        role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; is defined, but nodes in scene have actual profile='Interchange' </report>
      <report test="$profileLegal and not($profileMatch)      and not(/X3D/head/component) and $coreProfile"               role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; is defined, but nodes in scene have actual profile='Core' </report>
      <!--  individual profile mismatch reports (unless a component statement is present); $fullProfile" provides full coverage -->
      <report test="$profileLegal and not($profileSufficient) and not(/X3D/head/component) and $immersiveProfile          and not($fullProfile)"                                                         role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; is defined, but nodes in scene have actual profile='Immersive', ensure &lt;X3D&gt;&lt;head&gt;&lt;component&gt; statements are sufficient to provide coverage </report>
      <report test="$profileLegal and not($profileSufficient) and not(/X3D/head/component) and $cadInterchangeProfile     and not($fullProfile)"                                                         role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; is defined, but nodes in scene have actual profile='CADInterchange', ensure &lt;X3D&gt;&lt;head&gt;&lt;component&gt; statements are sufficient to provide coverage </report>
      <report test="$profileLegal and not($profileSufficient) and not(/X3D/head/component) and $medicalInterchangeProfile and not($fullProfile)"                                                         role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; is defined, but nodes in scene have actual profile='MedicalInterchange', ensure &lt;X3D&gt;&lt;head&gt;&lt;component&gt; statements are sufficient to provide coverage </report>
      <report test="$profileLegal and not($profileSufficient) and not(/X3D/head/component) and $interactiveProfile        and not($fullProfile) and not($immersiveProfile)"                              role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; is defined, but nodes in scene have actual profile='Interactive', ensure &lt;X3D&gt;&lt;head&gt;&lt;component&gt; statements are sufficient to provide coverage </report>
      <report test="$profileLegal and not($profileSufficient) and not(/X3D/head/component) and $interchangeProfile        and not($fullProfile) and not($immersiveProfile) and not($interactiveProfile)" role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; is defined, but nodes in scene have actual profile='Interchange', ensure &lt;X3D&gt;&lt;head&gt;&lt;component&gt; statements are sufficient to provide coverage </report>
      <report test="$profileLegal and not($profileSufficient) and not(/X3D/head/component) and $coreProfile               and (/X3D/Scene/*[not(starts-with(local-name(),'Metadata'))])"                 role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; is defined, but non-Metadata nodes in scene have actual profile higher than 'Core', ensure &lt;X3D&gt;&lt;head&gt;&lt;component&gt; statements are sufficient to provide coverage </report>
      
      <!-- this warning can be silenced by contained MetadataString within Inline, e.g. <MetadataString name='profile' value='"Interchange"'/> -->
      <report test="$profileLegal and (//Inline[not(MetadataString)][not(@USE)]) and not($fullProfile)" role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; is defined satisfactorily for this scene, but ensure that child Inline scenes do not exceed this profile/component combination since a parent scene must have an equal or higher profile/component combination </report>
      <report test="not($profileLegal) and $fullProfile"               role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; has unrecognized value, actual profile='Full' </report>
      <report test="not($profileLegal) and $immersiveProfile"          role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; has unrecognized value, actual profile='Immersive' </report>
      <report test="not($profileLegal) and $interactiveProfile"        role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; has unrecognized value, actual profile='Interactive' </report>
      <report test="not($profileLegal) and $cadInterchangeProfile"     role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; has unrecognized value, actual profile='CADInterchange' </report>
      <report test="not($profileLegal) and $medicalInterchangeProfile" role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; has unrecognized value, actual profile='MedicalInterchange' </report>
      <report test="not($profileLegal) and $interchangeProfile"        role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; has unrecognized value, actual profile='Interchange' </report>
      <report test="not($profileLegal) and $coreProfile"               role="info">&lt;X3D profile='<value-of select='@profile'/>'&gt; has unrecognized value, actual profile='Core' </report>
    </rule>
    
    <!-- ========= Wildcard (default) node tests: common miscapitalization and spelling errors ==========
    Important: this rule must appear last, in order to ensure that all other rules (for correctly named X3D nodes) fire first!
    -->
    <rule id="wildcardName" context="*">
      <extends rule="DEFtests"/>
      <extends rule="elementNameUnrecognized"/>
      <!-- Debug statement: set test="true()" to enable, test="false()" to disable -->
      <report test="false()" role="diagnostic">wildcardName checks for <name/> complete (no other rule found) </report>
    </rule>
   
    <rule id="elementNameUnrecognized" abstract="true">
      <!-- Any valid node must have a separate rule to trap it, otherwise this "unrecognized" rule will fire. -->
      <!-- Always include this initial report in case no other spell-check rule fires. -->
      <let name="commonHtmlElement" value="(local-name='html') or (local-name='body') or (local-name='form') or (local-name='button') or (local-name='input') or (local-name='table') or (local-name='th') or (local-name='tr') or (local-name='td') or (local-name='ul') or (local-name='ol') or (local-name='li') or (local-name='p') or (local-name='pre') or (local-name='code') or (local-name='hr') or (local-name='br') or (local-name='div') or (local-name='span') or (local-name='a')"/>
      <report test="$commonHtmlElement"                  role="error">&lt;<name/> id='<value-of  select='@id' />'/&gt; is an embedded HTML element, or else node name has unrecognized spelling that fails X3D DTD/Schema validation... </report>
      <report test="true() and (string-length(@id) > 0)" role="error">&lt;<name/> id='<value-of  select='@id' />'/&gt; node name has unrecognized spelling that fails X3D DTD/Schema validation, or else may be an embedded HTML element... </report>
      <report test="true() and (string-length(@id) = 0)" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; not handled correctly by X3D schematron rule, or else node name has unrecognized spelling that fails X3D DTD/Schema validation... </report>
      <!-- can test using lower-case for generality since properly spelled node names should have been caught already by preceding rules -->
      <report test="(contains(local-name(),'2d'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should be 2D (rather than 2d) for <name/> </report>
      <report test="(contains(local-name(),'3d'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should be 3D (rather than 3d) for <name/> </report>
      <report test="(contains(local-name(),'4d'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should be 4D (rather than 4d) for <name/> </report>
      <report test="(contains(lower-case(local-name()),'cad'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should start with CAD (rather than Cad) for <name/> </report>
      <report test="(contains(lower-case(local-name()),'polyLine'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should be Polyline (rather than <name/>) </report>
      <report test="(starts-with(lower-case(local-name()),'arcclose'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should be ArcClose2D (rather than <name/>) </report>
      <report test="(starts-with(lower-case(local-name()),'disentity'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should start with <emph>DISEntity</emph> (rather than <name/>) </report>
      <report test="(starts-with(lower-case(local-name()),'geo'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should start with <emph>Geo</emph> (rather than <name/>) </report>
      <report test="(starts-with(lower-case(local-name()),'hanim') or starts-with(lower-case(local-name()),'h-anim'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should start with <emph>HAnim</emph> (rather than <name/>) </report>
      <report test="(starts-with(lower-case(local-name()),'metadata'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should start with <emph>Metadata</emph> (rather than <name/>) </report>
      <report test="(starts-with(lower-case(local-name()),'nurbs'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should start with <emph>Nurbs</emph> (rather than <name/>) </report>
      <report test="(starts-with(lower-case(local-name()),'polyline'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should be <emph>Polyline</emph> (rather than <name/>) </report>
      <report test="(starts-with(lower-case(local-name()),'polypoint'))" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should be <emph>Polypoint2D</emph> (rather than <name/>) </report>
      <report test="not(local-name()='ClipPlane') and ((lower-case(local-name())='clipplane') or (lower-case(local-name())='clippingplane') or (lower-case(local-name())='cliplane'))" role="error">&lt;<name/> node name spelling is incorrect, should be <emph>ClipPlane</emph> (rather than <name/>) </report>
      <report test="(lower-case(local-name())='connect')" role="error">&lt;<name/>statement name capitalization is incorrect, should be <emph>connect</emph> (rather than <name/>) </report>
      <report test="(lower-case(local-name())='export')" role="error">&lt;<name/>statement name capitalization is incorrect, should be<emph>EXPORT</emph> (rather than <name/>) </report>
      <report test="(lower-case(local-name())='import')" role="error">&lt;<name/>statement name capitalization is incorrect, should be <emph>IMPORT</emph> (rather than <name/>) </report>
      <report test="(lower-case(local-name())='is')" role="error">&lt;<name/>statement name capitalization is incorrect, should be <emph>IS</emph> (rather than <name/>) </report>
      <report test="(lower-case(local-name())='geolod')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should be <emph>GeoLOD</emph> (rather than <name/>) </report>
      <report test="(lower-case(local-name())='lod')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should be <emph>LOD</emph> (rather than <name/>) </report>
      <report test="(lower-case(local-name())='navigationinfo') or (lower-case(local-name())='navinfo')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name spelling is incorrect, should be <emph>NavigationInfo</emph> (rather than <name/>) </report>
      <report test="(lower-case(local-name())='orthoviewpoint')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should be <emph>OrthoViewpoint</emph> (rather than <name/>) </report>
      <report test="(lower-case(local-name())='viewpoint')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should be <emph>Viewpoint</emph> (rather than <name/>) </report>
      <report test="(lower-case(local-name())='worldinfo')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name capitalization is incorrect, should be <emph>WorldInfo</emph> (rather than <name/>) </report>
      <report test="(lower-case(local-name())='matrix3dvertexattribute')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name spelling is incorrect, should be <emph>Matrix3VertexAttribute</emph> (rather than <name/>) </report>
      <report test="(lower-case(local-name())='matrix4dvertexattribute')" role="error">&lt;<name/> DEF='<value-of select='@DEF'/>'/&gt; node name spelling is incorrect, should be <emph>Matrix4VertexAttribute</emph> (rather than <name/>) </report>
      
      <!-- *** start: NodeName capitalization checks generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
      <report test="(lower-case(local-name()) = 'acousticproperties') and not(local-name() = 'AcousticProperties')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is AcousticProperties </report>
      <report test="(lower-case(local-name()) = 'analyser') and not(local-name() = 'Analyser')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Analyser </report>
      <report test="(lower-case(local-name()) = 'anchor') and not(local-name() = 'Anchor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Anchor </report>
      <report test="(lower-case(local-name()) = 'appearance') and not(local-name() = 'Appearance')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Appearance </report>
      <report test="(lower-case(local-name()) = 'arc2d') and not(local-name() = 'Arc2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Arc2D </report>
      <report test="(lower-case(local-name()) = 'arcclose2d') and not(local-name() = 'ArcClose2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ArcClose2D </report>
      <report test="(lower-case(local-name()) = 'audioclip') and not(local-name() = 'AudioClip')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is AudioClip </report>
      <report test="(lower-case(local-name()) = 'audiodestination') and not(local-name() = 'AudioDestination')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is AudioDestination </report>
      <report test="(lower-case(local-name()) = 'background') and not(local-name() = 'Background')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Background </report>
      <report test="(lower-case(local-name()) = 'balljoint') and not(local-name() = 'BallJoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BallJoint </report>
      <report test="(lower-case(local-name()) = 'billboard') and not(local-name() = 'Billboard')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Billboard </report>
      <report test="(lower-case(local-name()) = 'biquadfilter') and not(local-name() = 'BiquadFilter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BiquadFilter </report>
      <report test="(lower-case(local-name()) = 'blendedvolumestyle') and not(local-name() = 'BlendedVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BlendedVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'booleanfilter') and not(local-name() = 'BooleanFilter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BooleanFilter </report>
      <report test="(lower-case(local-name()) = 'booleansequencer') and not(local-name() = 'BooleanSequencer')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BooleanSequencer </report>
      <report test="(lower-case(local-name()) = 'booleantoggle') and not(local-name() = 'BooleanToggle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BooleanToggle </report>
      <report test="(lower-case(local-name()) = 'booleantrigger') and not(local-name() = 'BooleanTrigger')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BooleanTrigger </report>
      <report test="(lower-case(local-name()) = 'boundaryenhancementvolumestyle') and not(local-name() = 'BoundaryEnhancementVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BoundaryEnhancementVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'boundedphysicsmodel') and not(local-name() = 'BoundedPhysicsModel')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BoundedPhysicsModel </report>
      <report test="(lower-case(local-name()) = 'box') and not(local-name() = 'Box')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Box </report>
      <report test="(lower-case(local-name()) = 'bufferaudiosource') and not(local-name() = 'BufferAudioSource')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is BufferAudioSource </report>
      <report test="(lower-case(local-name()) = 'cadassembly') and not(local-name() = 'CADAssembly')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CADAssembly </report>
      <report test="(lower-case(local-name()) = 'cadface') and not(local-name() = 'CADFace')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CADFace </report>
      <report test="(lower-case(local-name()) = 'cadlayer') and not(local-name() = 'CADLayer')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CADLayer </report>
      <report test="(lower-case(local-name()) = 'cadpart') and not(local-name() = 'CADPart')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CADPart </report>
      <report test="(lower-case(local-name()) = 'cartoonvolumestyle') and not(local-name() = 'CartoonVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CartoonVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'channelmerger') and not(local-name() = 'ChannelMerger')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ChannelMerger </report>
      <report test="(lower-case(local-name()) = 'channelselector') and not(local-name() = 'ChannelSelector')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ChannelSelector </report>
      <report test="(lower-case(local-name()) = 'channelsplitter') and not(local-name() = 'ChannelSplitter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ChannelSplitter </report>
      <report test="(lower-case(local-name()) = 'circle2d') and not(local-name() = 'Circle2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Circle2D </report>
      <report test="(lower-case(local-name()) = 'clipplane') and not(local-name() = 'ClipPlane')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ClipPlane </report>
      <report test="(lower-case(local-name()) = 'collidableoffset') and not(local-name() = 'CollidableOffset')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CollidableOffset </report>
      <report test="(lower-case(local-name()) = 'collidableshape') and not(local-name() = 'CollidableShape')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CollidableShape </report>
      <report test="(lower-case(local-name()) = 'collision') and not(local-name() = 'Collision')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Collision </report>
      <report test="(lower-case(local-name()) = 'collisioncollection') and not(local-name() = 'CollisionCollection')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CollisionCollection </report>
      <report test="(lower-case(local-name()) = 'collisionsensor') and not(local-name() = 'CollisionSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CollisionSensor </report>
      <report test="(lower-case(local-name()) = 'collisionspace') and not(local-name() = 'CollisionSpace')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CollisionSpace </report>
      <report test="(lower-case(local-name()) = 'color') and not(local-name() = 'Color')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Color </report>
      <report test="(lower-case(local-name()) = 'colorchaser') and not(local-name() = 'ColorChaser')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ColorChaser </report>
      <report test="(lower-case(local-name()) = 'colordamper') and not(local-name() = 'ColorDamper')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ColorDamper </report>
      <report test="(lower-case(local-name()) = 'colorinterpolator') and not(local-name() = 'ColorInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ColorInterpolator </report>
      <report test="(lower-case(local-name()) = 'colorrgba') and not(local-name() = 'ColorRGBA')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ColorRGBA </report>
      <report test="(lower-case(local-name()) = 'composedcubemaptexture') and not(local-name() = 'ComposedCubeMapTexture')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ComposedCubeMapTexture </report>
      <report test="(lower-case(local-name()) = 'composedshader') and not(local-name() = 'ComposedShader')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ComposedShader </report>
      <report test="(lower-case(local-name()) = 'composedtexture3d') and not(local-name() = 'ComposedTexture3D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ComposedTexture3D </report>
      <report test="(lower-case(local-name()) = 'composedvolumestyle') and not(local-name() = 'ComposedVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ComposedVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'cone') and not(local-name() = 'Cone')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Cone </report>
      <report test="(lower-case(local-name()) = 'coneemitter') and not(local-name() = 'ConeEmitter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ConeEmitter </report>
      <report test="(lower-case(local-name()) = 'contact') and not(local-name() = 'Contact')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Contact </report>
      <report test="(lower-case(local-name()) = 'contour2d') and not(local-name() = 'Contour2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Contour2D </report>
      <report test="(lower-case(local-name()) = 'contourpolyline2d') and not(local-name() = 'ContourPolyline2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ContourPolyline2D </report>
      <report test="(lower-case(local-name()) = 'convolver') and not(local-name() = 'Convolver')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Convolver </report>
      <report test="(lower-case(local-name()) = 'coordinate') and not(local-name() = 'Coordinate')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Coordinate </report>
      <report test="(lower-case(local-name()) = 'coordinatechaser') and not(local-name() = 'CoordinateChaser')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CoordinateChaser </report>
      <report test="(lower-case(local-name()) = 'coordinatedamper') and not(local-name() = 'CoordinateDamper')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CoordinateDamper </report>
      <report test="(lower-case(local-name()) = 'coordinatedouble') and not(local-name() = 'CoordinateDouble')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CoordinateDouble </report>
      <report test="(lower-case(local-name()) = 'coordinateinterpolator') and not(local-name() = 'CoordinateInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CoordinateInterpolator </report>
      <report test="(lower-case(local-name()) = 'coordinateinterpolator2d') and not(local-name() = 'CoordinateInterpolator2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CoordinateInterpolator2D </report>
      <report test="(lower-case(local-name()) = 'cylinder') and not(local-name() = 'Cylinder')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Cylinder </report>
      <report test="(lower-case(local-name()) = 'cylindersensor') and not(local-name() = 'CylinderSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is CylinderSensor </report>
      <report test="(lower-case(local-name()) = 'disentitymanager') and not(local-name() = 'DISEntityManager')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is DISEntityManager </report>
      <report test="(lower-case(local-name()) = 'disentitytypemapping') and not(local-name() = 'DISEntityTypeMapping')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is DISEntityTypeMapping </report>
      <report test="(lower-case(local-name()) = 'delay') and not(local-name() = 'Delay')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Delay </report>
      <report test="(lower-case(local-name()) = 'directionallight') and not(local-name() = 'DirectionalLight')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is DirectionalLight </report>
      <report test="(lower-case(local-name()) = 'disk2d') and not(local-name() = 'Disk2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Disk2D </report>
      <report test="(lower-case(local-name()) = 'doubleaxishingejoint') and not(local-name() = 'DoubleAxisHingeJoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is DoubleAxisHingeJoint </report>
      <report test="(lower-case(local-name()) = 'dynamicscompressor') and not(local-name() = 'DynamicsCompressor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is DynamicsCompressor </report>
      <report test="(lower-case(local-name()) = 'easeineaseout') and not(local-name() = 'EaseInEaseOut')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is EaseInEaseOut </report>
      <report test="(lower-case(local-name()) = 'edgeenhancementvolumestyle') and not(local-name() = 'EdgeEnhancementVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is EdgeEnhancementVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'elevationgrid') and not(local-name() = 'ElevationGrid')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ElevationGrid </report>
      <report test="(lower-case(local-name()) = 'environmentlight') and not(local-name() = 'EnvironmentLight')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is EnvironmentLight </report>
      <report test="(lower-case(local-name()) = 'espdutransform') and not(local-name() = 'EspduTransform')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is EspduTransform </report>
      <report test="(lower-case(local-name()) = 'explosionemitter') and not(local-name() = 'ExplosionEmitter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ExplosionEmitter </report>
      <report test="(lower-case(local-name()) = 'extrusion') and not(local-name() = 'Extrusion')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Extrusion </report>
      <report test="(lower-case(local-name()) = 'fillproperties') and not(local-name() = 'FillProperties')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is FillProperties </report>
      <report test="(lower-case(local-name()) = 'floatvertexattribute') and not(local-name() = 'FloatVertexAttribute')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is FloatVertexAttribute </report>
      <report test="(lower-case(local-name()) = 'fog') and not(local-name() = 'Fog')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Fog </report>
      <report test="(lower-case(local-name()) = 'fogcoordinate') and not(local-name() = 'FogCoordinate')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is FogCoordinate </report>
      <report test="(lower-case(local-name()) = 'fontstyle') and not(local-name() = 'FontStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is FontStyle </report>
      <report test="(lower-case(local-name()) = 'forcephysicsmodel') and not(local-name() = 'ForcePhysicsModel')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ForcePhysicsModel </report>
      <report test="(lower-case(local-name()) = 'gain') and not(local-name() = 'Gain')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Gain </report>
      <report test="(lower-case(local-name()) = 'generatedcubemaptexture') and not(local-name() = 'GeneratedCubeMapTexture')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeneratedCubeMapTexture </report>
      <report test="(lower-case(local-name()) = 'geocoordinate') and not(local-name() = 'GeoCoordinate')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoCoordinate </report>
      <report test="(lower-case(local-name()) = 'geoelevationgrid') and not(local-name() = 'GeoElevationGrid')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoElevationGrid </report>
      <report test="(lower-case(local-name()) = 'geolod') and not(local-name() = 'GeoLOD')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoLOD </report>
      <report test="(lower-case(local-name()) = 'geolocation') and not(local-name() = 'GeoLocation')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoLocation </report>
      <report test="(lower-case(local-name()) = 'geometadata') and not(local-name() = 'GeoMetadata')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoMetadata </report>
      <report test="(lower-case(local-name()) = 'geoorigin') and not(local-name() = 'GeoOrigin')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoOrigin </report>
      <report test="(lower-case(local-name()) = 'geopositioninterpolator') and not(local-name() = 'GeoPositionInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoPositionInterpolator </report>
      <report test="(lower-case(local-name()) = 'geoproximitysensor') and not(local-name() = 'GeoProximitySensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoProximitySensor </report>
      <report test="(lower-case(local-name()) = 'geotouchsensor') and not(local-name() = 'GeoTouchSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoTouchSensor </report>
      <report test="(lower-case(local-name()) = 'geotransform') and not(local-name() = 'GeoTransform')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoTransform </report>
      <report test="(lower-case(local-name()) = 'geoviewpoint') and not(local-name() = 'GeoViewpoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is GeoViewpoint </report>
      <report test="(lower-case(local-name()) = 'group') and not(local-name() = 'Group')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Group </report>
      <report test="(lower-case(local-name()) = 'hanimdisplacer') and not(local-name() = 'HAnimDisplacer')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is HAnimDisplacer </report>
      <report test="(lower-case(local-name()) = 'hanimhumanoid') and not(local-name() = 'HAnimHumanoid')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is HAnimHumanoid </report>
      <report test="(lower-case(local-name()) = 'hanimjoint') and not(local-name() = 'HAnimJoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is HAnimJoint </report>
      <report test="(lower-case(local-name()) = 'hanimmotion') and not(local-name() = 'HAnimMotion')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is HAnimMotion </report>
      <report test="(lower-case(local-name()) = 'hanimsegment') and not(local-name() = 'HAnimSegment')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is HAnimSegment </report>
      <report test="(lower-case(local-name()) = 'hanimsite') and not(local-name() = 'HAnimSite')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is HAnimSite </report>
      <report test="(lower-case(local-name()) = 'imagecubemaptexture') and not(local-name() = 'ImageCubeMapTexture')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ImageCubeMapTexture </report>
      <report test="(lower-case(local-name()) = 'imagetexture') and not(local-name() = 'ImageTexture')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ImageTexture </report>
      <report test="(lower-case(local-name()) = 'imagetexture3d') and not(local-name() = 'ImageTexture3D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ImageTexture3D </report>
      <report test="(lower-case(local-name()) = 'indexedfaceset') and not(local-name() = 'IndexedFaceSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IndexedFaceSet </report>
      <report test="(lower-case(local-name()) = 'indexedlineset') and not(local-name() = 'IndexedLineSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IndexedLineSet </report>
      <report test="(lower-case(local-name()) = 'indexedquadset') and not(local-name() = 'IndexedQuadSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IndexedQuadSet </report>
      <report test="(lower-case(local-name()) = 'indexedtrianglefanset') and not(local-name() = 'IndexedTriangleFanSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IndexedTriangleFanSet </report>
      <report test="(lower-case(local-name()) = 'indexedtriangleset') and not(local-name() = 'IndexedTriangleSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IndexedTriangleSet </report>
      <report test="(lower-case(local-name()) = 'indexedtrianglestripset') and not(local-name() = 'IndexedTriangleStripSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IndexedTriangleStripSet </report>
      <report test="(lower-case(local-name()) = 'inline') and not(local-name() = 'Inline')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Inline </report>
      <report test="(lower-case(local-name()) = 'integersequencer') and not(local-name() = 'IntegerSequencer')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IntegerSequencer </report>
      <report test="(lower-case(local-name()) = 'integertrigger') and not(local-name() = 'IntegerTrigger')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IntegerTrigger </report>
      <report test="(lower-case(local-name()) = 'isosurfacevolumedata') and not(local-name() = 'IsoSurfaceVolumeData')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is IsoSurfaceVolumeData </report>
      <report test="(lower-case(local-name()) = 'keysensor') and not(local-name() = 'KeySensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is KeySensor </report>
      <report test="(lower-case(local-name()) = 'lod') and not(local-name() = 'LOD')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LOD </report>
      <report test="(lower-case(local-name()) = 'layer') and not(local-name() = 'Layer')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Layer </report>
      <report test="(lower-case(local-name()) = 'layerset') and not(local-name() = 'LayerSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LayerSet </report>
      <report test="(lower-case(local-name()) = 'layout') and not(local-name() = 'Layout')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Layout </report>
      <report test="(lower-case(local-name()) = 'layoutgroup') and not(local-name() = 'LayoutGroup')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LayoutGroup </report>
      <report test="(lower-case(local-name()) = 'layoutlayer') and not(local-name() = 'LayoutLayer')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LayoutLayer </report>
      <report test="(lower-case(local-name()) = 'linepicksensor') and not(local-name() = 'LinePickSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LinePickSensor </report>
      <report test="(lower-case(local-name()) = 'lineproperties') and not(local-name() = 'LineProperties')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LineProperties </report>
      <report test="(lower-case(local-name()) = 'lineset') and not(local-name() = 'LineSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LineSet </report>
      <report test="(lower-case(local-name()) = 'listenerpointsource') and not(local-name() = 'ListenerPointSource')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ListenerPointSource </report>
      <report test="(lower-case(local-name()) = 'loadsensor') and not(local-name() = 'LoadSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LoadSensor </report>
      <report test="(lower-case(local-name()) = 'localfog') and not(local-name() = 'LocalFog')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is LocalFog </report>
      <report test="(lower-case(local-name()) = 'material') and not(local-name() = 'Material')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Material </report>
      <report test="(lower-case(local-name()) = 'matrix3vertexattribute') and not(local-name() = 'Matrix3VertexAttribute')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Matrix3VertexAttribute </report>
      <report test="(lower-case(local-name()) = 'matrix4vertexattribute') and not(local-name() = 'Matrix4VertexAttribute')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Matrix4VertexAttribute </report>
      <report test="(lower-case(local-name()) = 'metadataboolean') and not(local-name() = 'MetadataBoolean')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MetadataBoolean </report>
      <report test="(lower-case(local-name()) = 'metadatadouble') and not(local-name() = 'MetadataDouble')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MetadataDouble </report>
      <report test="(lower-case(local-name()) = 'metadatafloat') and not(local-name() = 'MetadataFloat')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MetadataFloat </report>
      <report test="(lower-case(local-name()) = 'metadatainteger') and not(local-name() = 'MetadataInteger')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MetadataInteger </report>
      <report test="(lower-case(local-name()) = 'metadataset') and not(local-name() = 'MetadataSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MetadataSet </report>
      <report test="(lower-case(local-name()) = 'metadatastring') and not(local-name() = 'MetadataString')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MetadataString </report>
      <report test="(lower-case(local-name()) = 'microphonesource') and not(local-name() = 'MicrophoneSource')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MicrophoneSource </report>
      <report test="(lower-case(local-name()) = 'motorjoint') and not(local-name() = 'MotorJoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MotorJoint </report>
      <report test="(lower-case(local-name()) = 'movietexture') and not(local-name() = 'MovieTexture')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MovieTexture </report>
      <report test="(lower-case(local-name()) = 'multitexture') and not(local-name() = 'MultiTexture')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MultiTexture </report>
      <report test="(lower-case(local-name()) = 'multitexturecoordinate') and not(local-name() = 'MultiTextureCoordinate')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MultiTextureCoordinate </report>
      <report test="(lower-case(local-name()) = 'multitexturetransform') and not(local-name() = 'MultiTextureTransform')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is MultiTextureTransform </report>
      <report test="(lower-case(local-name()) = 'navigationinfo') and not(local-name() = 'NavigationInfo')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NavigationInfo </report>
      <report test="(lower-case(local-name()) = 'normal') and not(local-name() = 'Normal')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Normal </report>
      <report test="(lower-case(local-name()) = 'normalinterpolator') and not(local-name() = 'NormalInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NormalInterpolator </report>
      <report test="(lower-case(local-name()) = 'nurbscurve') and not(local-name() = 'NurbsCurve')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsCurve </report>
      <report test="(lower-case(local-name()) = 'nurbscurve2d') and not(local-name() = 'NurbsCurve2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsCurve2D </report>
      <report test="(lower-case(local-name()) = 'nurbsorientationinterpolator') and not(local-name() = 'NurbsOrientationInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsOrientationInterpolator </report>
      <report test="(lower-case(local-name()) = 'nurbspatchsurface') and not(local-name() = 'NurbsPatchSurface')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsPatchSurface </report>
      <report test="(lower-case(local-name()) = 'nurbspositioninterpolator') and not(local-name() = 'NurbsPositionInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsPositionInterpolator </report>
      <report test="(lower-case(local-name()) = 'nurbsset') and not(local-name() = 'NurbsSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsSet </report>
      <report test="(lower-case(local-name()) = 'nurbssurfaceinterpolator') and not(local-name() = 'NurbsSurfaceInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsSurfaceInterpolator </report>
      <report test="(lower-case(local-name()) = 'nurbssweptsurface') and not(local-name() = 'NurbsSweptSurface')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsSweptSurface </report>
      <report test="(lower-case(local-name()) = 'nurbsswungsurface') and not(local-name() = 'NurbsSwungSurface')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsSwungSurface </report>
      <report test="(lower-case(local-name()) = 'nurbstexturecoordinate') and not(local-name() = 'NurbsTextureCoordinate')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsTextureCoordinate </report>
      <report test="(lower-case(local-name()) = 'nurbstrimmedsurface') and not(local-name() = 'NurbsTrimmedSurface')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is NurbsTrimmedSurface </report>
      <report test="(lower-case(local-name()) = 'opacitymapvolumestyle') and not(local-name() = 'OpacityMapVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is OpacityMapVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'orientationchaser') and not(local-name() = 'OrientationChaser')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is OrientationChaser </report>
      <report test="(lower-case(local-name()) = 'orientationdamper') and not(local-name() = 'OrientationDamper')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is OrientationDamper </report>
      <report test="(lower-case(local-name()) = 'orientationinterpolator') and not(local-name() = 'OrientationInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is OrientationInterpolator </report>
      <report test="(lower-case(local-name()) = 'orthoviewpoint') and not(local-name() = 'OrthoViewpoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is OrthoViewpoint </report>
      <report test="(lower-case(local-name()) = 'oscillatorsource') and not(local-name() = 'OscillatorSource')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is OscillatorSource </report>
      <report test="(lower-case(local-name()) = 'packagedshader') and not(local-name() = 'PackagedShader')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PackagedShader </report>
      <report test="(lower-case(local-name()) = 'particlesystem') and not(local-name() = 'ParticleSystem')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ParticleSystem </report>
      <report test="(lower-case(local-name()) = 'periodicwave') and not(local-name() = 'PeriodicWave')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PeriodicWave </report>
      <report test="(lower-case(local-name()) = 'physicalmaterial') and not(local-name() = 'PhysicalMaterial')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PhysicalMaterial </report>
      <report test="(lower-case(local-name()) = 'pickablegroup') and not(local-name() = 'PickableGroup')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PickableGroup </report>
      <report test="(lower-case(local-name()) = 'pixeltexture') and not(local-name() = 'PixelTexture')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PixelTexture </report>
      <report test="(lower-case(local-name()) = 'pixeltexture3d') and not(local-name() = 'PixelTexture3D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PixelTexture3D </report>
      <report test="(lower-case(local-name()) = 'planesensor') and not(local-name() = 'PlaneSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PlaneSensor </report>
      <report test="(lower-case(local-name()) = 'pointemitter') and not(local-name() = 'PointEmitter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PointEmitter </report>
      <report test="(lower-case(local-name()) = 'pointlight') and not(local-name() = 'PointLight')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PointLight </report>
      <report test="(lower-case(local-name()) = 'pointpicksensor') and not(local-name() = 'PointPickSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PointPickSensor </report>
      <report test="(lower-case(local-name()) = 'pointproperties') and not(local-name() = 'PointProperties')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PointProperties </report>
      <report test="(lower-case(local-name()) = 'pointset') and not(local-name() = 'PointSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PointSet </report>
      <report test="(lower-case(local-name()) = 'polyline2d') and not(local-name() = 'Polyline2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Polyline2D </report>
      <report test="(lower-case(local-name()) = 'polylineemitter') and not(local-name() = 'PolylineEmitter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PolylineEmitter </report>
      <report test="(lower-case(local-name()) = 'polypoint2d') and not(local-name() = 'Polypoint2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Polypoint2D </report>
      <report test="(lower-case(local-name()) = 'positionchaser') and not(local-name() = 'PositionChaser')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PositionChaser </report>
      <report test="(lower-case(local-name()) = 'positionchaser2d') and not(local-name() = 'PositionChaser2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PositionChaser2D </report>
      <report test="(lower-case(local-name()) = 'positiondamper') and not(local-name() = 'PositionDamper')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PositionDamper </report>
      <report test="(lower-case(local-name()) = 'positiondamper2d') and not(local-name() = 'PositionDamper2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PositionDamper2D </report>
      <report test="(lower-case(local-name()) = 'positioninterpolator') and not(local-name() = 'PositionInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PositionInterpolator </report>
      <report test="(lower-case(local-name()) = 'positioninterpolator2d') and not(local-name() = 'PositionInterpolator2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PositionInterpolator2D </report>
      <report test="(lower-case(local-name()) = 'primitivepicksensor') and not(local-name() = 'PrimitivePickSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is PrimitivePickSensor </report>
      <report test="(lower-case(local-name()) = 'programshader') and not(local-name() = 'ProgramShader')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ProgramShader </report>
      <report test="(lower-case(local-name()) = 'projectionvolumestyle') and not(local-name() = 'ProjectionVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ProjectionVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'protoinstance') and not(local-name() = 'ProtoInstance')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ProtoInstance </report>
      <report test="(lower-case(local-name()) = 'proximitysensor') and not(local-name() = 'ProximitySensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ProximitySensor </report>
      <report test="(lower-case(local-name()) = 'quadset') and not(local-name() = 'QuadSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is QuadSet </report>
      <report test="(lower-case(local-name()) = 'receiverpdu') and not(local-name() = 'ReceiverPdu')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ReceiverPdu </report>
      <report test="(lower-case(local-name()) = 'rectangle2d') and not(local-name() = 'Rectangle2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Rectangle2D </report>
      <report test="(lower-case(local-name()) = 'rigidbody') and not(local-name() = 'RigidBody')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is RigidBody </report>
      <report test="(lower-case(local-name()) = 'rigidbodycollection') and not(local-name() = 'RigidBodyCollection')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is RigidBodyCollection </report>
      <report test="(lower-case(local-name()) = 'scalarchaser') and not(local-name() = 'ScalarChaser')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ScalarChaser </report>
      <report test="(lower-case(local-name()) = 'scalardamper') and not(local-name() = 'ScalarDamper')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ScalarDamper </report>
      <report test="(lower-case(local-name()) = 'scalarinterpolator') and not(local-name() = 'ScalarInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ScalarInterpolator </report>
      <report test="(lower-case(local-name()) = 'screenfontstyle') and not(local-name() = 'ScreenFontStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ScreenFontStyle </report>
      <report test="(lower-case(local-name()) = 'screengroup') and not(local-name() = 'ScreenGroup')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ScreenGroup </report>
      <report test="(lower-case(local-name()) = 'script') and not(local-name() = 'Script')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Script </report>
      <report test="(lower-case(local-name()) = 'segmentedvolumedata') and not(local-name() = 'SegmentedVolumeData')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SegmentedVolumeData </report>
      <report test="(lower-case(local-name()) = 'shadedvolumestyle') and not(local-name() = 'ShadedVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ShadedVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'shaderpart') and not(local-name() = 'ShaderPart')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ShaderPart </report>
      <report test="(lower-case(local-name()) = 'shaderprogram') and not(local-name() = 'ShaderProgram')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ShaderProgram </report>
      <report test="(lower-case(local-name()) = 'shape') and not(local-name() = 'Shape')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Shape </report>
      <report test="(lower-case(local-name()) = 'signalpdu') and not(local-name() = 'SignalPdu')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SignalPdu </report>
      <report test="(lower-case(local-name()) = 'silhouetteenhancementvolumestyle') and not(local-name() = 'SilhouetteEnhancementVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SilhouetteEnhancementVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'singleaxishingejoint') and not(local-name() = 'SingleAxisHingeJoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SingleAxisHingeJoint </report>
      <report test="(lower-case(local-name()) = 'sliderjoint') and not(local-name() = 'SliderJoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SliderJoint </report>
      <report test="(lower-case(local-name()) = 'sound') and not(local-name() = 'Sound')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Sound </report>
      <report test="(lower-case(local-name()) = 'spatialsound') and not(local-name() = 'SpatialSound')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SpatialSound </report>
      <report test="(lower-case(local-name()) = 'sphere') and not(local-name() = 'Sphere')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Sphere </report>
      <report test="(lower-case(local-name()) = 'spheresensor') and not(local-name() = 'SphereSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SphereSensor </report>
      <report test="(lower-case(local-name()) = 'splinepositioninterpolator') and not(local-name() = 'SplinePositionInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SplinePositionInterpolator </report>
      <report test="(lower-case(local-name()) = 'splinepositioninterpolator2d') and not(local-name() = 'SplinePositionInterpolator2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SplinePositionInterpolator2D </report>
      <report test="(lower-case(local-name()) = 'splinescalarinterpolator') and not(local-name() = 'SplineScalarInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SplineScalarInterpolator </report>
      <report test="(lower-case(local-name()) = 'spotlight') and not(local-name() = 'SpotLight')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SpotLight </report>
      <report test="(lower-case(local-name()) = 'squadorientationinterpolator') and not(local-name() = 'SquadOrientationInterpolator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SquadOrientationInterpolator </report>
      <report test="(lower-case(local-name()) = 'staticgroup') and not(local-name() = 'StaticGroup')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is StaticGroup </report>
      <report test="(lower-case(local-name()) = 'streamaudiodestination') and not(local-name() = 'StreamAudioDestination')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is StreamAudioDestination </report>
      <report test="(lower-case(local-name()) = 'streamaudiosource') and not(local-name() = 'StreamAudioSource')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is StreamAudioSource </report>
      <report test="(lower-case(local-name()) = 'stringsensor') and not(local-name() = 'StringSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is StringSensor </report>
      <report test="(lower-case(local-name()) = 'surfaceemitter') and not(local-name() = 'SurfaceEmitter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is SurfaceEmitter </report>
      <report test="(lower-case(local-name()) = 'switch') and not(local-name() = 'Switch')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Switch </report>
      <report test="(lower-case(local-name()) = 'texcoordchaser2d') and not(local-name() = 'TexCoordChaser2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TexCoordChaser2D </report>
      <report test="(lower-case(local-name()) = 'texcoorddamper2d') and not(local-name() = 'TexCoordDamper2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TexCoordDamper2D </report>
      <report test="(lower-case(local-name()) = 'text') and not(local-name() = 'Text')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Text </report>
      <report test="(lower-case(local-name()) = 'texturebackground') and not(local-name() = 'TextureBackground')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureBackground </report>
      <report test="(lower-case(local-name()) = 'texturecoordinate') and not(local-name() = 'TextureCoordinate')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureCoordinate </report>
      <report test="(lower-case(local-name()) = 'texturecoordinate3d') and not(local-name() = 'TextureCoordinate3D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureCoordinate3D </report>
      <report test="(lower-case(local-name()) = 'texturecoordinate4d') and not(local-name() = 'TextureCoordinate4D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureCoordinate4D </report>
      <report test="(lower-case(local-name()) = 'texturecoordinategenerator') and not(local-name() = 'TextureCoordinateGenerator')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureCoordinateGenerator </report>
      <report test="(lower-case(local-name()) = 'textureprojector') and not(local-name() = 'TextureProjector')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureProjector </report>
      <report test="(lower-case(local-name()) = 'textureprojectorparallel') and not(local-name() = 'TextureProjectorParallel')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureProjectorParallel </report>
      <report test="(lower-case(local-name()) = 'textureproperties') and not(local-name() = 'TextureProperties')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureProperties </report>
      <report test="(lower-case(local-name()) = 'texturetransform') and not(local-name() = 'TextureTransform')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureTransform </report>
      <report test="(lower-case(local-name()) = 'texturetransform3d') and not(local-name() = 'TextureTransform3D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureTransform3D </report>
      <report test="(lower-case(local-name()) = 'texturetransformmatrix3d') and not(local-name() = 'TextureTransformMatrix3D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TextureTransformMatrix3D </report>
      <report test="(lower-case(local-name()) = 'timesensor') and not(local-name() = 'TimeSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TimeSensor </report>
      <report test="(lower-case(local-name()) = 'timetrigger') and not(local-name() = 'TimeTrigger')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TimeTrigger </report>
      <report test="(lower-case(local-name()) = 'tonemappedvolumestyle') and not(local-name() = 'ToneMappedVolumeStyle')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ToneMappedVolumeStyle </report>
      <report test="(lower-case(local-name()) = 'touchsensor') and not(local-name() = 'TouchSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TouchSensor </report>
      <report test="(lower-case(local-name()) = 'transform') and not(local-name() = 'Transform')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Transform </report>
      <report test="(lower-case(local-name()) = 'transformsensor') and not(local-name() = 'TransformSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TransformSensor </report>
      <report test="(lower-case(local-name()) = 'transmitterpdu') and not(local-name() = 'TransmitterPdu')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TransmitterPdu </report>
      <report test="(lower-case(local-name()) = 'trianglefanset') and not(local-name() = 'TriangleFanSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TriangleFanSet </report>
      <report test="(lower-case(local-name()) = 'triangleset') and not(local-name() = 'TriangleSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TriangleSet </report>
      <report test="(lower-case(local-name()) = 'triangleset2d') and not(local-name() = 'TriangleSet2D')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TriangleSet2D </report>
      <report test="(lower-case(local-name()) = 'trianglestripset') and not(local-name() = 'TriangleStripSet')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TriangleStripSet </report>
      <report test="(lower-case(local-name()) = 'twosidedmaterial') and not(local-name() = 'TwoSidedMaterial')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is TwoSidedMaterial </report>
      <report test="(lower-case(local-name()) = 'universaljoint') and not(local-name() = 'UniversalJoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is UniversalJoint </report>
      <report test="(lower-case(local-name()) = 'unlitmaterial') and not(local-name() = 'UnlitMaterial')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is UnlitMaterial </report>
      <report test="(lower-case(local-name()) = 'viewpoint') and not(local-name() = 'Viewpoint')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Viewpoint </report>
      <report test="(lower-case(local-name()) = 'viewpointgroup') and not(local-name() = 'ViewpointGroup')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is ViewpointGroup </report>
      <report test="(lower-case(local-name()) = 'viewport') and not(local-name() = 'Viewport')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is Viewport </report>
      <report test="(lower-case(local-name()) = 'visibilitysensor') and not(local-name() = 'VisibilitySensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is VisibilitySensor </report>
      <report test="(lower-case(local-name()) = 'volumedata') and not(local-name() = 'VolumeData')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is VolumeData </report>
      <report test="(lower-case(local-name()) = 'volumeemitter') and not(local-name() = 'VolumeEmitter')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is VolumeEmitter </report>
      <report test="(lower-case(local-name()) = 'volumepicksensor') and not(local-name() = 'VolumePickSensor')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is VolumePickSensor </report>
      <report test="(lower-case(local-name()) = 'waveshaper') and not(local-name() = 'WaveShaper')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is WaveShaper </report>
      <report test="(lower-case(local-name()) = 'windphysicsmodel') and not(local-name() = 'WindPhysicsModel')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is WindPhysicsModel </report>
      <report test="(lower-case(local-name()) = 'worldinfo') and not(local-name() = 'WorldInfo')" role="error">&NodeDEFname; element capitalization-case mismatch, correct CamelCase naming is WorldInfo </report>
      <!-- *** finish: NodeName capitalization checks generated from X3DUOM by X3duomToX3dDiagnostics.xslt -->
    </rule>

    <!-- =========  ========== -->
  </pattern>

  <!-- not used
  <diagnostics>
    <diagnostic id="measuredProfile">diagnostic:  $fullProfile=<value-of select='$fullProfile'/>, $immersiveProfile=<value-of select='$immersiveProfile'/>, $interactiveProfile=<value-of select='$interactiveProfile'/>, $cadInterchangeProfile=<value-of select='$cadInterchangeProfile'/>, $interchangeProfile=<value-of select='$interchangeProfile'/>, $coreProfile=<value-of select='$coreProfile'/></diagnostic>
   
    error, results in empty string:
    <diagnostic id="DEFdiagnostic">&NodeDEFname;</diagnostic>

  </diagnostics>
  -->

</schema>
